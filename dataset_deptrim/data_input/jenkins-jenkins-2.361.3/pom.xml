<?xml version="1.0" encoding="UTF-8"?>
<!--
The MIT License

Copyright (c) 2004-2011, Sun Microsystems, Inc., Kohsuke Kawaguchi, id:sorokh

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.jenkins-ci</groupId>
    <artifactId>jenkins</artifactId>
    <version>1.85</version>
    <relativePath />
  </parent>

  <groupId>org.jenkins-ci.main</groupId>
  <artifactId>jenkins-parent</artifactId>
  <version>2.361.3</version>
  <packaging>pom</packaging>

  <name>Jenkins main module</name>
  <description>The module that constitutes the main jenkins.war</description>
  <url>https://github.com/jenkinsci/jenkins</url>

  <licenses>
    <license>
      <name>The MIT license</name>
      <url>https://opensource.org/licenses/MIT</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <modules>
    <module>bom</module>
    <module>websocket/spi</module>
    <module>websocket/jetty9</module>
    <module>websocket/jetty10</module>
    <module>core</module>
    <module>war</module>
    <module>test</module>
    <module>cli</module>
    <module>coverage</module>
  </modules>

  <scm child.scm.connection.inherit.append.path="false" child.scm.developerConnection.inherit.append.path="false" child.scm.url.inherit.append.path="false">
    <connection>scm:git:https://github.com/jenkinsci/jenkins.git</connection>
    <developerConnection>scm:git:git@github.com:jenkinsci/jenkins.git</developerConnection>
    <tag>jenkins-2.361.3</tag>
    <url>https://github.com/jenkinsci/jenkins</url>
  </scm>

  <issueManagement>
    <system>jira</system>
    <url>https://issues.jenkins.io/browse/JENKINS/component/15593</url>
  </issueManagement>

  <properties>
    <revision>2.361.3</revision>
    <changelist>-SNAPSHOT</changelist>

    <!-- *.html files are in UTF-8, and *.properties are in iso-8859-1, so this configuration is actually incorrect,
    but this suppresses a warning from Maven, and as long as we don't do filtering we should be OK. -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- configuration for patch tracker plugin  -->
    <project.patchManagement.system>github</project.patchManagement.system>
    <patch.request.organisation>jenkinsci</patch.request.organisation>
    <patch.request.repository>jenkins</patch.request.repository>
    <project.patchManagement.url>https://api.github.com</project.patchManagement.url>
    <patch.tracker.serverId>jenkins-jira</patch.tracker.serverId>

    <changelog.url>https://www.jenkins.io/changelog</changelog.url>

    <!-- Bundled Remoting version -->
    <remoting.version>3044.vb_940a_a_e4f72e</remoting.version>
    <!-- Minimum Remoting version, which is tested for API compatibility -->
    <remoting.minimum.supported.version>4.2.1</remoting.minimum.supported.version>

    <spotbugs.effort>Max</spotbugs.effort>
    <spotbugs.threshold>Medium</spotbugs.threshold>
    <spotbugs.excludeFilterFile>${maven.multiModuleProjectDirectory}/src/spotbugs/spotbugs-excludes.xml</spotbugs.excludeFilterFile>

    <access-modifier.version>1.27</access-modifier.version>
    <bridge-method-injector.version>1.23</bridge-method-injector.version>
    <mockito.version>4.6.1</mockito.version>
    <spotless.version>2.23.0</spotless.version>
  </properties>

  <dependencyManagement>
    <!-- any dependencies that can be used by plugins must be defined in the bom and not here -->
    <dependencies>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.8.2</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <!--  make sure these old servlet versions are never used by us or by any plugins which end up depending on this version -->
        <!--  plugin-pom tries to fudge servlet support to be compatible with cores < 2.0 and JTH which needs 3.x for jetty, and ends up causing issues with some IDEs -->
        <groupId>javax.servlet</groupId>
        <!-- the old artifactID for the servlet API -->
        <artifactId>servlet-api</artifactId>
        <version>[0]</version>
        <!--
          "[0]" is a range that must be exactly 0
          this is different to "0" which is hint to use version 0.
          therefore unless anyone else uses ranges (they should not) this version will always win
          We have deployed a version 0 to jenkins repo which has an empty jar
          This prevents conflicts between the old Servet API and the new Servlet API as the groupIDs have changed
          see https://github.com/jenkinsci/jenkins/pull/3033/files#r141325857 for a fuller description
        -->
        <scope>provided</scope>
        <optional>true</optional>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <!-- make sure our dependency tree and all others are clean of the legacy servlet api.  -->
      <groupId>javax.servlet</groupId>
      <!-- the old artifactID for the servlet API -->
      <artifactId>servlet-api</artifactId>
    </dependency>
  </dependencies>

  <!--
    Note that the 'repositories' and 'pluginRepositories' blocks below are actually copy-pasted
    from the Jenkins org pom. This is on purpose to keep Jenkins core buildable even if one has
    *not* defined the specific details in the settings.xml file.
  -->
  <repositories>
    <repository>
      <id>repo.jenkins-ci.org</id>
      <url>https://repo.jenkins-ci.org/public/</url>
      <!-- allow snapshots -->
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>repo.jenkins-ci.org</id>
      <url>https://repo.jenkins-ci.org/public/</url>
    </pluginRepository>
  </pluginRepositories>

  <build>
    <defaultGoal>install</defaultGoal>
    <resources>
      <resource>
        <filtering>false</filtering>
        <directory>${basedir}/src/main/resources</directory>
      </resource>
      <resource>
        <filtering>true</filtering>
        <directory>${basedir}/src/filter/resources</directory>
      </resource>
    </resources>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <!-- Version specified in parent POM -->
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <!-- Version specified in parent POM -->
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <!-- Version specified in parent POM -->
          <configuration>
            <fork>true</fork>
            <compilerReuseStrategy>alwaysNew</compilerReuseStrategy>
            <compilerArgs>
              <!--
                always compile package-info.java for useIncrementalCompilation
                ref: https://stackoverflow.com/questions/6770455/maven-compiling-package-info-java-to-package-info-class
              -->
              <compilerArg>-Xpkginfo:always</compilerArg>
            </compilerArgs>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-gpg-plugin</artifactId>
          <!-- Version specified in parent POM -->
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <!-- Version specified in parent POM -->
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <!-- Version specified in parent POM -->
          <configuration>
            <quiet>true</quiet>
            <splitindex>true</splitindex>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <!-- Version specified in parent POM -->
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <!-- Version specified in parent POM -->
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <!-- Version specified in parent POM -->
          <configuration>
            <systemPropertyVariables>
              <java.io.tmpdir>${project.build.directory}</java.io.tmpdir>
              <forkedProcessTimeoutInSeconds>3600</forkedProcessTimeoutInSeconds>
              <java.awt.headless>true</java.awt.headless>
            </systemPropertyVariables>
            <!-- SUREFIRE-1226 workaround -->
            <trimStackTrace>false</trimStackTrace>
            <runOrder>alphabetical</runOrder>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-assembly-plugin</artifactId>
          <!-- Version specified in parent POM -->
        </plugin>
        <plugin>
          <artifactId>maven-jarsigner-plugin</artifactId>
          <version>3.0.0</version>
          <configuration>
            <!--
              during the development, debug profile will cause
              the jars to be signed by a self-certified dummy public key.

              For release, you should define the real values in ~/.m2/settings.xml
            -->
            <alias>${hudson.sign.alias}</alias>
            <storepass>${hudson.sign.storepass}</storepass>
            <keystore>${hudson.sign.keystore}</keystore>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <!-- Version specified in parent POM -->
        </plugin>
        <plugin>
          <!--
            Both test harness and core uses stapler as an extension,
            and apparently without having extension preloaded at the parent, the main artifact of the 'test' module
            ends up installed with 'stapler-jar' extension (which normally is an indication that the ArtifactTypeHandler
            defined in this extension is not getting picked up.)

            To avoid this problem, I'm defining an extension here. Not sure if the nested <dependencies> is necessary.
            It's also possible that I misdiagnosed the problem and the root cause is something entirely different.

            To test if you can remove this work around, do a rebuild from main and see if the test harness
            is installed with the right extension into the local repository.
          -->
          <groupId>org.kohsuke.stapler</groupId>
          <artifactId>maven-stapler-plugin</artifactId>
          <!-- version specified in parent pom -->
          <extensions>true</extensions>
          <dependencies>
            <dependency>
              <groupId>org.jvnet.maven-jellydoc-plugin</groupId>
              <artifactId>maven-jellydoc-plugin</artifactId>
              <version>1.5</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.kohsuke</groupId>
          <artifactId>access-modifier-checker</artifactId>
          <version>${access-modifier.version}</version>
        </plugin>
        <plugin>
          <groupId>com.cloudbees</groupId>
          <artifactId>maven-license-plugin</artifactId>
          <!-- Version specified in parent POM -->
          <executions>
            <execution>
              <goals>
                <goal>process</goal>
              </goals>
              <phase>compile</phase>
              <configuration>
                <requireCompleteLicenseInfo>true</requireCompleteLicenseInfo>
                <script>../licenseCompleter.groovy</script>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.jvnet.localizer</groupId>
          <artifactId>localizer-maven-plugin</artifactId>
          <!-- Version specified in parent POM -->
          <configuration>
            <outputEncoding>UTF-8</outputEncoding>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.jvnet.hudson.tools</groupId>
          <artifactId>maven-encoding-plugin</artifactId>
          <version>1.1</version>
        </plugin>
        <plugin>
          <groupId>com.infradna.tool</groupId>
          <artifactId>bridge-method-injector</artifactId>
          <version>${bridge-method-injector.version}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>antlr-maven-plugin</artifactId>
          <version>2.2</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-pmd-plugin</artifactId>
          <!-- Version specified in parent POM -->
        </plugin>
        <plugin>
          <groupId>org.jvnet.updatecenter2</groupId>
          <artifactId>maven-makepkgs-plugin</artifactId>
          <version>0.6.2</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <!-- Version specified in parent POM -->
        </plugin>
        <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <!-- Version specified in parent POM -->
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <!-- Version specified in parent POM -->
                    <versionRange>[2.3,)</versionRange>
                    <goals>
                      <goal>list</goal>
                      <goal>unpack-dependencies</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
        <plugin>
          <groupId>com.github.spotbugs</groupId>
          <artifactId>spotbugs-maven-plugin</artifactId>
          <!-- Version specified in parent POM -->
          <configuration>
            <maxHeap>768</maxHeap>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-checkstyle-plugin</artifactId>
          <!-- Version specified in parent POM -->
          <configuration>
            <consoleOutput>true</consoleOutput>
            <includeTestSourceDirectory>true</includeTestSourceDirectory>
            <configLocation>${maven.multiModuleProjectDirectory}/src/checkstyle/checkstyle-configuration.xml</configLocation>
            <suppressionsLocation>${maven.multiModuleProjectDirectory}/src/checkstyle/checkstyle-suppressions.xml</suppressionsLocation>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>com.puppycrawl.tools</groupId>
              <artifactId>checkstyle</artifactId>
              <version>10.3.1</version>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <id>validate</id>
              <goals>
                <goal>check</goal>
              </goals>
              <phase>validate</phase>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>com.diffplug.spotless</groupId>
          <artifactId>spotless-maven-plugin</artifactId>
          <version>${spotless.version}</version>
          <configuration>
            <java>
              <endWithNewline />
              <importOrder />
              <indent>
                <spaces>true</spaces>
              </indent>
              <removeUnusedImports />
              <trimTrailingWhitespace />
            </java>
            <pom>
              <sortPom>
                <encoding>${project.build.sourceEncoding}</encoding>
                <lineSeparator>\n</lineSeparator>
                <expandEmptyElements>false</expandEmptyElements>
                <spaceBeforeCloseEmptyElement>true</spaceBeforeCloseEmptyElement>
                <sortDependencies>scope,groupId,artifactId</sortDependencies>
                <sortDependencyExclusions>groupId,artifactId</sortDependencyExclusions>
              </sortPom>
            </pom>
          </configuration>
          <executions>
            <execution>
              <!-- Runs in verify phase by default -->
              <goals>
                <!-- Can be disabled using -Dspotless.check.skip -->
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>0.8.8</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <artifactId>maven-release-plugin</artifactId>
        <!-- Version specified in parent POM -->
        <configuration>
          <!-- work around for a bug in javadoc plugin that causes the release to fail. see MRELEASE-271 -->
          <preparationGoals>clean install</preparationGoals>
          <goals>-DskipTests -Dspotbugs.skip -Dmaven.checkstyle.skip -Dspotless.check.skip generate-resources javadoc:javadoc deploy</goals>
          <pushChanges>false</pushChanges>
          <localCheckout>true</localCheckout>
          <tagNameFormat>jenkins-@{project.version}</tagNameFormat>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-remote-resources-plugin</artifactId>
        <!-- Version specified in parent POM -->
        <executions>
          <execution>
            <goals>
              <goal>process</goal>
            </goals>
            <configuration>
              <resourceBundles>
                <resourceBundle>org.jvnet.hudson:license:1.0</resourceBundle>
              </resourceBundles>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <!-- Version specified in parent POM -->
        <executions>
          <execution>
            <id>enforce-banned-dependencies</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <bannedDependencies>
                  <excludes>
                    <exclude>org.sonatype.sisu:sisu-guice</exclude>
                    <exclude>log4j:log4j:*:jar:compile</exclude>
                    <exclude>log4j:log4j:*:jar:runtime</exclude>
                    <exclude>commons-logging:commons-logging:*:jar:compile</exclude>
                    <exclude>commons-logging:commons-logging:*:jar:runtime</exclude>
                  </excludes>
                </bannedDependencies>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <!-- Version specified in parent POM -->
      </plugin>
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${spotless.version}</version>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>metrics</id>
      <build>
        <plugins>
          <plugin>
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs-maven-plugin</artifactId>
            <!-- Version specified in parent POM -->
            <configuration>
              <threshold>High</threshold>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>debug</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <hudson.sign.alias>jenkins</hudson.sign.alias>
        <hudson.sign.keystore>../dummy.keystore</hudson.sign.keystore>
        <hudson.sign.storepass>jenkins</hudson.sign.storepass>
      </properties>
    </profile>
    <profile>
      <id>release</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <!-- Version specified in parent POM -->
            <inherited>false</inherited>
            <executions>
              <execution>
                <goals>
                  <goal>single</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <finalName>jenkins-${project.version}</finalName>
                  <descriptors>
                    <descriptor>assembly-src.xml</descriptor>
                  </descriptors>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-gpg-plugin</artifactId>
            <!-- Version specified in parent POM -->
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <goals>
                  <goal>sign</goal>
                </goals>
                <phase>verify</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>lts-release</id>
      <properties>
        <changelog.url>https://www.jenkins.io/changelog-stable</changelog.url>
      </properties>
    </profile>
    <profile>
      <id>m2e</id>
      <activation>
        <property>
          <name>m2e.version</name>
        </property>
      </activation>
      <properties>
        <m2BuildDirectory>target</m2BuildDirectory>
      </properties>
      <build>
        <directory>${m2BuildDirectory}</directory>
        <plugins>
          <plugin>
            <groupId>org.maven.ide.eclipse</groupId>
            <artifactId>lifecycle-mapping</artifactId>
            <version>0.12.0</version>
            <configuration>
              <mappingId>customizable</mappingId>
              <configurators>
                <configurator id="org.maven.ide.eclipse.jdt.javaConfigurator" />
                <configurator id="org.maven.ide.eclipse.plexus.annotations.plexusConfigurator" />
              </configurators>
              <mojoExecutions>
                <mojoExecution>org.apache.maven.plugins:maven-resources-plugin::</mojoExecution>
              </mojoExecutions>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
