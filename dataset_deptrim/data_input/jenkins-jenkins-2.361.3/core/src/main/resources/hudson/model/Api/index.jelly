<!--
The MIT License

Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" xmlns:i="jelly:fmt">
  <l:layout title="Remote API" type="one-column">
    <l:main-panel>
      <h1>REST API</h1>

      <p>
        Many objects of Jenkins provide the remote access API. They are available
        at <code>${rootURL}/.../api/</code> where "..." portion is the object for
        which you'd like to access.
      </p>

      <dl>
        <dt><a href="xml">XML API</a></dt>
        <dd>
          Access data exposed in <a href="..">HTML</a> as XML for machine consumption.
          <a href="schema">Schema</a> is also available.

          <p>
            You can also specify optional XPath to control the fragment you'd like to obtain (but see <a href="#tree">below</a>).
            For example, <code>../api/xml?xpath=/*/*[0]</code>.
          </p>
          <p>
            For XPath that matches multiple nodes, you need to also specify the "wrapper" query parameter
            to specify the name of the root XML element to be create so that the resulting XML becomes well-formed.
          </p>
          <p>
            Similarly <code>exclude</code> query parameter can be used to exclude nodes
            that match the given XPath from the result. This is useful for
            trimming down the amount of data you fetch (but again see <a href="#tree">below</a>). This query parameter can be specified
            multiple times.
          </p>
          <p>
            XPath filtering is powerful, and you can have it only return a very small data, but note that
            the server still has to build a full DOM of the raw data, which could cause a large memory spike.
            To avoid overloading the server, consider using the <code>tree</code> parameter, or use the <code>xpath</code> parameter
            in conjunction with the <code>tree</code> parameter. When used together, the result of the <code>tree</code> parameter
            filtering is built into DOM, then the XPath is applied to compute the final return value. In this way,
            you can often substantially reduce the size of DOM built in memory.
          </p>
        </dd>

        <dt><a href="json?pretty=true">JSON API</a></dt>
        <dd>
          Access the same data as JSON for JavaScript-based access. <code>tree</code> may be used.
        </dd>

        <dt><a href="python?pretty=true">Python API</a></dt>
        <dd>
         <p>
           Access the same data as Python for Python clients. This can be parsed into Python
           objects as <code>ast.literal_eval(urllib.urlopen("...").read())</code>
           and the resulting object tree is identical to that of JSON.
         </p>
        </dd>
      </dl>

      <p>
        For more information about remote API in Jenkins, see
        <a href="https://www.jenkins.io/redirect/remote-api">the documentation</a>.
      </p>

      <h2>Controlling the amount of data you fetch</h2>
      <p>
        <a name="tree" />
        The <code>tree</code> query parameter allows you to explicitly specify and retrieve only
        the information you are looking for, by using an XPath-ish path expression.

        The value should be a list of property names to include, with sub-properties inside square braces.
        Try <a href="xml?tree=jobs[name],views[name,jobs[name]]">tree=jobs[name],views[name,jobs[name]]</a>
        to see just a list of jobs (only giving the name) and views (giving the name and jobs they contain).
        <strong>Note</strong>: for array-type properties (such as <code>jobs</code> in this example),
        the name must be given in the original plural, not in the singular as the element would appear in XML (<code>&amp;lt;job&amp;gt;</code>).
        This will be more natural for e.g. <a href="json?tree=jobs[name]">json?tree=jobs[name]</a> anyway:
        the JSON writer does not do plural-to-singular mangling because arrays are represented explicitly.
      </p>
      <p>
        For array-type properties, a range specifier is supported. For example, <code>tree=jobs[name]{0,10}</code> would
        retrieve the name of the first 10 jobs. The range specifier has the following variants:
      </p>
      <ul>
        <li>
          <b>{M,N}</b>: From the M-th element (inclusive) to the N-th element (exclusive).
        </li>
        <li>
          <b>{M,}</b>: From the M-th element (inclusive) to the end.
        </li>
        <li>
          <b>{,N}</b>: From the first element (inclusive) to the N-th element (exclusive). The same as {0,N}.
        </li>
        <li>
          <b>{N}</b>: Just retrieve the N-th element. The same as {N,N+1}.
        </li>
      </ul>

      <p>
        Another way to retrieve more data is to use the <code>depth=N</code> query parameter.
        This retrieves all the data up to the specified depth.
        Compare <a href="xml">depth=0</a> and <a href="xml?depth=1">depth=1</a> and see what the difference
        is for yourself. Also note that data created by a smaller depth value is always a subset of
        the data created by a bigger depth value.
      </p>
      <p>
        Because of the size of the data, the <code>depth</code> parameter should really be only used to explore
        what data Jenkins can return. Once you identify the data you want to retrieve, you can then come up with
        the <code>tree</code> parameter to exactly specify the data you need.
      </p>

      <st:include it="${it.bean}" page="_api.jelly" optional="true" />
    </l:main-panel>
  </l:layout>
</j:jelly>
