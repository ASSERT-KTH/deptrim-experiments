<!--
The MIT License

Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi, Tom Huybrechts

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->

<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" xmlns:l="/lib/layout">
  <st:documentation>
    This tag inside &lt;l:tasks> tag renders the left navigation bar of Hudson.
    Each &lt;task> tag gets an icon and link.

    <st:attribute name="href" use="required">
      Link target. Relative to the current page.
    </st:attribute>
    <st:attribute name="icon" use="required">
      URL to an icon image, or the icon class specification.  If using an image URL,
      the image should be 24x24 in size and relative to the context path of Hudson.

      Common values include:

      # "symbol-search" / "symbol-terminal" / "symbol-settings" - use a Jenkins Symbol as the icon for your task
      # "icon-folder icon-md" is an example of using a class spec for a medium folder icon
      # "images/24x24/..." then points to the stock icon resources
      # "plugin/foobar/abc/def.png" that points to "src/main/webapp/abc/def.png" in your plugin resources
    </st:attribute>
    <st:attribute name="title" use="required">
      Human readable text that follows the icon.
    </st:attribute>
    <st:attribute name="enabled">
      If specified, then this controls whether the task is enabled or not.
    </st:attribute>
    <st:attribute name="contextMenu" type="boolean">
      If "false", remove this item from the context menu.
    </st:attribute>
    <st:attribute name="permission">
      If specified, the link will be only displayed when the current user
      has the specified permission against the "it" object.

      This is useful for showing links to restricted pages, as showing
      them to unprivileged users don't make sense.

      If both permission and permissions is set, then permissions will be used
    </st:attribute>
    <st:attribute name="permissions">
      If specified, the link will be only displayed when the current user has
      one or more of the specified permissions against the "it" object.

      If both permission and permissions is set, then permissions will be used
    </st:attribute>
    <st:attribute name="post" type="boolean">
      If true, send a POST rather than a GET request.
      (onclick supersedes this except in the context menu.)
      (since 1.504)
    </st:attribute>
    <st:attribute name="requiresConfirmation" type="boolean">
      If true, require confirmation before clicking.
      Generally used with post="true".
      (onclick supersedes this except in the context menu.)
      (since 1.512)
    </st:attribute>
    <st:attribute name="confirmationMessage">
      Message to use for confirmation, if requested; defaults to title.
      (since 1.512)
    </st:attribute>
  </st:documentation>

  <!--
    Much of the following horrible code is to implement hierarchy support in <task> tag.
    The semantics is that when one of the nested <task> matches, the parent is also considered as a match
    and thus gets a highlight.
  -->
  <j:set var="isCurrent" value="${h.hyperlinkMatchesCurrentPage(href)}" />
  <j:scope>
    <j:set var="parentTagContext" value="${context.parent}"/>
    <d:invokeBody />
  </j:scope>
  <j:if test="${attrs.permission != null}">
    <j:set var="hasPermission" value="${h.hasPermission(it, attrs.permission)}" />
  </j:if>

  <j:if test="${attrs.permissions != null}">
    <j:set var="hasPermission" value="${h.hasAnyPermission(it, attrs.permissions)}" />
  </j:if>

  <j:if test="${attrs.permission == null and attrs.permissions == null}">
    <j:set var="hasPermission" value="true" />
  </j:if>

  <j:if test="${hasPermission}">
    <j:choose>
      <j:when test="${parentTagContext!=null}">
        <j:if test="${isCurrent or hasMatchingChild}">
          <j:set target="${parentTagContext.variables}" property="hasMatchingChild" value="true"/>
        </j:if>
      </j:when>
      <j:set var="match" value="${isCurrent or hasMatchingChild}" />

      <j:if test="${attrs.permission != null}">
        <j:set var="hasPermission" value="${h.hasPermission(it, attrs.permission)}" />
      </j:if>

      <!--
      The icon attribute can be an icon class spec, or can be the url of an icon image.
      Within core Jenkins, we've updated all usages of the task element to use icon class specs,
      but we need to accommodate plugins etc that still use urls.  So, first we treat the icon
      attribute value as an icon spec and attempt to use that spec to lookup the icon's metadata.
      If that lookup fails, we try treat it as a URL and try looking up the icon metadata by URL.
      If either of these lookups are successful, we create an icon element instance using the
      icon class spec from the icon metadata, otherwise we create an icon element instance using
      icon attribute value as an icon "src" (Vs class spec).
      -->
      <j:when test="${enabled==false}">
        <div class="task disabled">
          <span class="task-link-wrapper">
            <span class="task-disabled-link">
              <span class="task-icon-link">
                <l:icon src="${icon}" />
              </span>
              <span class="task-link-text">${title}</span>
            </span>
          </span>
        </div>
      </j:when>

      <j:otherwise>
        <div class="task ">
          <span class="task-link-wrapper ${watch ? 'task--active' : ''}">
            <j:set var="iconSrc" value="${h.tryGetIconPath(icon, context)}"/>
            <j:set var="iconXml">
              <l:icon src="${icon}" />
            </j:set>
            ${taskTags!=null and attrs.contextMenu!='false' ? taskTags.add(href, iconSrc, iconXml, title, post == 'true', requiresConfirmation == 'true') : null}
            <j:set var="id" value="${h.generateId()}"/>
            <j:if test="${attrs.onclick == null and post and not requiresConfirmation}">
                <script>
                    function postRequest_${id}(a) {
                        new Ajax.Request(a.href);
                        hoverNotification('${%Done.}', a.parentNode);
                        return false;
                    }
                </script>
            </j:if>

            <j:choose>
              <j:when test="${requiresConfirmation and not attrs.onClick}">
                <l:confirmationLink class="task-link ${isCurrent ? 'task-link--active' : ''}" href="${href}" post="${post}" message="${confirmationMessage ?: title}">
                  <span class="task-icon-link">
                    <l:icon src="${icon}" />
                  </span>
                  <span>${title}</span>
                </l:confirmationLink>
              </j:when>

              <j:otherwise>
                <a href="${href}" class="task-link ${isCurrent ? 'task-link--active' : ''}" onclick="${attrs.onclick ?: (post ? 'return postRequest_' + id + '(this)' : null)}">
                  <span class="task-icon-link">
                    <l:icon src="${icon}" />
                  </span>
                  <span class="task-link-text">${title}</span>
                </a>
              </j:otherwise>
            </j:choose>
          </span>

          <j:if test="${match}">
            <div class="subtasks">
              <d:invokeBody />
            </div>
          </j:if>
        </div>
      </j:otherwise>
    </j:choose>
  </j:if>
</j:jelly>
