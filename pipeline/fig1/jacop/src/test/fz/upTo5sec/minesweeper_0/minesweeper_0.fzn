var 0..1: X_INTRODUCED_0;
var 0..1: X_INTRODUCED_1;
var 0..1: X_INTRODUCED_3;
var 0..1: X_INTRODUCED_5;
var 0..1: X_INTRODUCED_7;
var 0..1: X_INTRODUCED_8;
var 0..1: X_INTRODUCED_9;
var 0..1: X_INTRODUCED_10;
var 0..1: X_INTRODUCED_11;
var 0..1: X_INTRODUCED_12;
var 0..1: X_INTRODUCED_13;
var 0..1: X_INTRODUCED_16;
var 0..1: X_INTRODUCED_19;
var 0..1: X_INTRODUCED_22;
var 0..1: X_INTRODUCED_23;
var 0..1: X_INTRODUCED_24;
var 0..1: X_INTRODUCED_25;
var 0..1: X_INTRODUCED_26;
var 0..1: X_INTRODUCED_27;
var 0..1: X_INTRODUCED_28;
var 0..1: X_INTRODUCED_30;
var 0..1: X_INTRODUCED_32;
var 0..1: X_INTRODUCED_34;
var 0..1: X_INTRODUCED_35;
array [1..36] of var int: mines:: output_array([1..6,1..6]) = [X_INTRODUCED_0,X_INTRODUCED_1,0,X_INTRODUCED_3,0,X_INTRODUCED_5,0,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,0,0,X_INTRODUCED_16,0,0,X_INTRODUCED_19,0,0,X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28,0,X_INTRODUCED_30,0,X_INTRODUCED_32,0,X_INTRODUCED_34,X_INTRODUCED_35];
array [1..36] of var int: X_INTRODUCED_51 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,0,X_INTRODUCED_3,0,X_INTRODUCED_5,0,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,0,0,X_INTRODUCED_16,0,0,X_INTRODUCED_19,0,0,X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28,0,X_INTRODUCED_30,0,X_INTRODUCED_32,0,X_INTRODUCED_34,X_INTRODUCED_35];
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_1,X_INTRODUCED_3,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_3,X_INTRODUCED_5,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11],-3);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_7,X_INTRODUCED_12,X_INTRODUCED_13],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_13,X_INTRODUCED_19],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_16,X_INTRODUCED_22],-4);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_16,X_INTRODUCED_22,X_INTRODUCED_23],-3);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_19,X_INTRODUCED_24,X_INTRODUCED_25],-1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_13,X_INTRODUCED_19,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27],-3);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_16,X_INTRODUCED_22,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28],-4);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_28,X_INTRODUCED_34,X_INTRODUCED_35],-3);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_30,X_INTRODUCED_32],-3);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28,X_INTRODUCED_32,X_INTRODUCED_34],-3);
solve :: int_search(X_INTRODUCED_51,first_fail,indomain_min,complete) satisfy;
