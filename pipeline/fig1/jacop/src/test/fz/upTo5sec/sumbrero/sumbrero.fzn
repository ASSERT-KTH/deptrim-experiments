array [1..2] of int: X_INTRODUCED_8 = [1,1];
array [1..3] of int: X_INTRODUCED_10 = [1,1,1];
var 1..9: X_INTRODUCED_0;
var 1..9: X_INTRODUCED_1;
var 1..9: X_INTRODUCED_2;
var 1..9: X_INTRODUCED_3;
var 1..9: X_INTRODUCED_4;
var 1..9: X_INTRODUCED_5;
var 1..9: X_INTRODUCED_6;
array [1..7] of var int: x:: output_array([1..7]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6];
constraint int_lin_eq(X_INTRODUCED_8,[X_INTRODUCED_0,X_INTRODUCED_5],8);
constraint int_lin_eq(X_INTRODUCED_10,[X_INTRODUCED_1,X_INTRODUCED_3,X_INTRODUCED_6],14);
constraint int_lin_eq(X_INTRODUCED_8,[X_INTRODUCED_2,X_INTRODUCED_4],13);
constraint int_lin_eq(X_INTRODUCED_8,[X_INTRODUCED_0,X_INTRODUCED_3],3);
constraint int_lin_eq(X_INTRODUCED_10,[X_INTRODUCED_1,X_INTRODUCED_4,X_INTRODUCED_5],16);
constraint int_lin_eq(X_INTRODUCED_8,[X_INTRODUCED_2,X_INTRODUCED_6],16);
constraint int_lin_eq(X_INTRODUCED_8,[X_INTRODUCED_3,X_INTRODUCED_4],8);
constraint int_lin_eq(X_INTRODUCED_10,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2],11);
constraint int_lin_eq(X_INTRODUCED_8,[X_INTRODUCED_5,X_INTRODUCED_6],16);
solve :: int_search(x,first_fail,indomain_min,complete) satisfy;
