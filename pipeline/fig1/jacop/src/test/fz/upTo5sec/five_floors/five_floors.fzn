array [1..2] of int: X_INTRODUCED_1 = [1,-1];
array [1..2] of int: X_INTRODUCED_6 = [-1,1];
var 1..4: Baker:: output_var;
var 2..5: Cooper:: output_var;
var 2..4: Fletcher:: output_var;
var 1..5: Miller:: output_var;
var 1..5: Smith:: output_var;
var -4..4: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var 2..4: X_INTRODUCED_3 ::var_is_introduced ;
var -4..4: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var 2..4: X_INTRODUCED_5 ::var_is_introduced ;
array [1..5] of var int: x = [Baker,Cooper,Fletcher,Miller,Smith];
constraint int_lin_ne(X_INTRODUCED_1,[Baker,Cooper],0);
constraint int_lin_ne(X_INTRODUCED_1,[Baker,Fletcher],0);
constraint int_lin_ne(X_INTRODUCED_1,[Baker,Miller],0);
constraint int_lin_ne(X_INTRODUCED_1,[Baker,Smith],0);
constraint int_lin_ne(X_INTRODUCED_1,[Cooper,Fletcher],0);
constraint int_lin_ne(X_INTRODUCED_1,[Cooper,Miller],0);
constraint int_lin_ne(X_INTRODUCED_1,[Cooper,Smith],0);
constraint int_lin_ne(X_INTRODUCED_1,[Fletcher,Miller],0);
constraint int_lin_ne(X_INTRODUCED_1,[Fletcher,Smith],0);
constraint int_lin_ne(X_INTRODUCED_1,[Miller,Smith],0);
constraint int_abs(X_INTRODUCED_2,X_INTRODUCED_3);
constraint int_abs(X_INTRODUCED_4,X_INTRODUCED_5);
constraint int_lin_le(X_INTRODUCED_6,[Miller,Cooper],-1);
constraint int_lin_eq([1,-1,-1],[Fletcher,Cooper,X_INTRODUCED_2],0):: defines_var(X_INTRODUCED_2);
constraint int_lin_eq([1,-1,-1],[Smith,Fletcher,X_INTRODUCED_4],0):: defines_var(X_INTRODUCED_4);
solve  satisfy;
