array [1..2] of int: X_INTRODUCED_4 = [1,-1];
var 0..400: X_INTRODUCED_1;
var 0..400: X_INTRODUCED_2;
var 0..400: X_INTRODUCED_3;
var bool: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
array [1..4] of var int: x:: output_array([1..4]) = [0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
constraint int_lin_le(X_INTRODUCED_4,[X_INTRODUCED_1,X_INTRODUCED_2],0);
constraint int_lin_le(X_INTRODUCED_4,[X_INTRODUCED_2,X_INTRODUCED_3],0);
constraint array_bool_or([X_INTRODUCED_7,X_INTRODUCED_9],true);
constraint array_bool_or([X_INTRODUCED_11,X_INTRODUCED_13],true);
constraint array_bool_or([X_INTRODUCED_15,X_INTRODUCED_17],true);
constraint int_lin_eq_reif([1],[X_INTRODUCED_1],100,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint int_lin_eq_reif([1],[X_INTRODUCED_1],10,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint int_lin_eq_reif(X_INTRODUCED_4,[X_INTRODUCED_2,X_INTRODUCED_1],100,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint int_lin_eq_reif(X_INTRODUCED_4,[X_INTRODUCED_2,X_INTRODUCED_1],10,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
constraint int_lin_eq_reif(X_INTRODUCED_4,[X_INTRODUCED_3,X_INTRODUCED_2],100,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint int_lin_eq_reif(X_INTRODUCED_4,[X_INTRODUCED_3,X_INTRODUCED_2],10,X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
solve :: int_search(x,first_fail,indomain_split,complete) satisfy;
