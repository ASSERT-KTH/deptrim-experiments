predicate jacop_alldiff(array [int] of var int: x);
array [1..2] of int: X_INTRODUCED_39 = [1,1];
array [1..4] of int: X_INTRODUCED_43 = [1,1,1,1];
var {1,3}: X_INTRODUCED_8;
var {1,3}: X_INTRODUCED_9;
var 1..9: X_INTRODUCED_13;
var 1..9: X_INTRODUCED_14;
var 1..9: X_INTRODUCED_15;
var 1..9: X_INTRODUCED_16;
var 1..9: X_INTRODUCED_19;
var 1..9: X_INTRODUCED_20;
var 1..9: X_INTRODUCED_22;
var 1..9: X_INTRODUCED_23;
var {1,2,3,5}: X_INTRODUCED_26;
var {1,2,3,5}: X_INTRODUCED_27;
var {1,2,3,5}: X_INTRODUCED_28;
var {1,2,3,5}: X_INTRODUCED_29;
var 1..9: X_INTRODUCED_33;
var 1..9: X_INTRODUCED_34;
array [1..36] of var int: grid:: output_array([1..6,1..6]) = [0,0,0,0,0,0,0,0,X_INTRODUCED_8,X_INTRODUCED_9,0,0,0,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,0,0,X_INTRODUCED_19,X_INTRODUCED_20,0,X_INTRODUCED_22,X_INTRODUCED_23,0,0,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28,X_INTRODUCED_29,0,0,0,X_INTRODUCED_33,X_INTRODUCED_34,0];
array [1..2] of var int: X_INTRODUCED_36 ::var_is_introduced  = [X_INTRODUCED_8,X_INTRODUCED_9];
array [1..4] of var int: X_INTRODUCED_40 ::var_is_introduced  = [X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16];
array [1..2] of var int: X_INTRODUCED_44 ::var_is_introduced  = [X_INTRODUCED_19,X_INTRODUCED_20];
array [1..2] of var int: X_INTRODUCED_47 ::var_is_introduced  = [X_INTRODUCED_22,X_INTRODUCED_23];
array [1..4] of var int: X_INTRODUCED_50 ::var_is_introduced  = [X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28,X_INTRODUCED_29];
array [1..2] of var int: X_INTRODUCED_53 ::var_is_introduced  = [X_INTRODUCED_33,X_INTRODUCED_34];
array [1..4] of var int: X_INTRODUCED_56 ::var_is_introduced  = [X_INTRODUCED_8,X_INTRODUCED_14,X_INTRODUCED_20,X_INTRODUCED_26];
array [1..2] of var int: X_INTRODUCED_59 ::var_is_introduced  = [X_INTRODUCED_9,X_INTRODUCED_15];
array [1..2] of var int: X_INTRODUCED_62 ::var_is_introduced  = [X_INTRODUCED_13,X_INTRODUCED_19];
array [1..4] of var int: X_INTRODUCED_65 ::var_is_introduced  = [X_INTRODUCED_16,X_INTRODUCED_22,X_INTRODUCED_28,X_INTRODUCED_34];
array [1..2] of var int: X_INTRODUCED_68 ::var_is_introduced  = [X_INTRODUCED_23,X_INTRODUCED_29];
array [1..2] of var int: X_INTRODUCED_71 ::var_is_introduced  = [X_INTRODUCED_27,X_INTRODUCED_33];
constraint jacop_alldiff(X_INTRODUCED_36);
constraint int_lin_eq(X_INTRODUCED_39,[X_INTRODUCED_8,X_INTRODUCED_9],4);
constraint jacop_alldiff(X_INTRODUCED_40);
constraint int_lin_eq(X_INTRODUCED_43,[X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16],27);
constraint jacop_alldiff(X_INTRODUCED_44);
constraint int_lin_eq(X_INTRODUCED_39,[X_INTRODUCED_19,X_INTRODUCED_20],5);
constraint jacop_alldiff(X_INTRODUCED_47);
constraint int_lin_eq(X_INTRODUCED_39,[X_INTRODUCED_22,X_INTRODUCED_23],15);
constraint jacop_alldiff(X_INTRODUCED_50);
constraint int_lin_eq(X_INTRODUCED_43,[X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28,X_INTRODUCED_29],11);
constraint jacop_alldiff(X_INTRODUCED_53);
constraint int_lin_eq(X_INTRODUCED_39,[X_INTRODUCED_33,X_INTRODUCED_34],13);
constraint jacop_alldiff(X_INTRODUCED_56);
constraint int_lin_eq(X_INTRODUCED_43,[X_INTRODUCED_8,X_INTRODUCED_14,X_INTRODUCED_20,X_INTRODUCED_26],17);
constraint jacop_alldiff(X_INTRODUCED_59);
constraint int_lin_eq(X_INTRODUCED_39,[X_INTRODUCED_9,X_INTRODUCED_15],5);
constraint jacop_alldiff(X_INTRODUCED_62);
constraint int_lin_eq(X_INTRODUCED_39,[X_INTRODUCED_13,X_INTRODUCED_19],13);
constraint jacop_alldiff(X_INTRODUCED_65);
constraint int_lin_eq(X_INTRODUCED_43,[X_INTRODUCED_16,X_INTRODUCED_22,X_INTRODUCED_28,X_INTRODUCED_34],24);
constraint jacop_alldiff(X_INTRODUCED_68);
constraint int_lin_eq(X_INTRODUCED_39,[X_INTRODUCED_23,X_INTRODUCED_29],7);
constraint jacop_alldiff(X_INTRODUCED_71);
constraint int_lin_eq(X_INTRODUCED_39,[X_INTRODUCED_27,X_INTRODUCED_33],9);
solve  satisfy;
