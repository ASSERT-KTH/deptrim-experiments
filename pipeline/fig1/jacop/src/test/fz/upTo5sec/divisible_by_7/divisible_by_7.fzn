array [1..3] of int: X_INTRODUCED_11 = [-1,-1,-1];
array [1..2] of int: X_INTRODUCED_27 = [1,-1];
var {1,3,6,9}: X_INTRODUCED_0;
var {1,3,6,9}: X_INTRODUCED_1;
var {1,3,6,9}: X_INTRODUCED_2;
var 111..999: z:: is_defined_var;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_22 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_23 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
array [1..3] of var int: x:: output_array([1..3]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2];
constraint array_bool_or([X_INTRODUCED_21,X_INTRODUCED_24],true);
constraint int_mod(z,7,0);
constraint int_lin_ne(X_INTRODUCED_27,[X_INTRODUCED_0,X_INTRODUCED_1],0);
constraint int_lin_ne(X_INTRODUCED_27,[X_INTRODUCED_0,X_INTRODUCED_2],0);
constraint int_lin_ne(X_INTRODUCED_27,[X_INTRODUCED_1,X_INTRODUCED_2],0);
constraint int_lin_eq([10,100,1,-1],[X_INTRODUCED_1,X_INTRODUCED_0,X_INTRODUCED_2,z],0):: defines_var(z);
constraint int_eq_reif(X_INTRODUCED_0,6,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint bool2int(X_INTRODUCED_4,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_eq_reif(X_INTRODUCED_1,6,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint bool2int(X_INTRODUCED_6,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint int_eq_reif(X_INTRODUCED_2,6,X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint bool2int(X_INTRODUCED_8,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint int_lin_eq_reif(X_INTRODUCED_11,[X_INTRODUCED_5,X_INTRODUCED_7,X_INTRODUCED_9],0,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint int_eq_reif(X_INTRODUCED_0,9,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
constraint bool2int(X_INTRODUCED_13,X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
constraint int_eq_reif(X_INTRODUCED_1,9,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint bool2int(X_INTRODUCED_15,X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint int_eq_reif(X_INTRODUCED_2,9,X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint bool2int(X_INTRODUCED_17,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint int_lin_eq_reif(X_INTRODUCED_11,[X_INTRODUCED_14,X_INTRODUCED_16,X_INTRODUCED_18],-1,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint array_bool_and([X_INTRODUCED_12,X_INTRODUCED_20],X_INTRODUCED_21):: defines_var(X_INTRODUCED_21);
constraint int_lin_eq_reif(X_INTRODUCED_11,[X_INTRODUCED_14,X_INTRODUCED_16,X_INTRODUCED_18],0,X_INTRODUCED_22):: defines_var(X_INTRODUCED_22);
constraint int_lin_eq_reif(X_INTRODUCED_11,[X_INTRODUCED_5,X_INTRODUCED_7,X_INTRODUCED_9],-1,X_INTRODUCED_23):: defines_var(X_INTRODUCED_23);
constraint array_bool_and([X_INTRODUCED_22,X_INTRODUCED_23],X_INTRODUCED_24):: defines_var(X_INTRODUCED_24);
solve :: int_search(x,first_fail,indomain_min,complete) satisfy;
