predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..2] of int: X_INTRODUCED_32 = [1,-1];
array [1..22] of int: X_INTRODUCED_67 = [7,8,9,10,1,1,9,2,7,2,7,7,2,5,8,4,1,9,8,3,8,9];
array [1..22] of int: X_INTRODUCED_68 = [8,3,7,2,3,6,7,9,9,5,2,5,9,3,2,3,9,4,3,9,9,2];
array [1..27] of int: X_INTRODUCED_70 = [10,6,10,3,10,3,10,5,4,1,7,3,3,3,9,1,2,5,7,3,8,1,1,7,2,9,9];
array [1..27] of int: X_INTRODUCED_71 = [8,3,7,3,6,9,9,3,1,2,5,2,5,9,3,2,3,8,9,4,7,3,9,9,4,5,2];
array [1..23] of int: X_INTRODUCED_73 = [3,1,2,3,3,5,3,7,4,6,6,8,4,7,6,9,8,10,3,7,6,2,8];
array [1..23] of int: X_INTRODUCED_74 = [8,3,3,6,7,9,3,1,2,2,5,9,3,2,3,3,8,9,3,9,9,4,5];
array [1..19] of int: X_INTRODUCED_76 = [2,9,8,9,10,6,3,8,10,8,4,6,8,4,1,10,5,7,4];
array [1..19] of int: X_INTRODUCED_77 = [3,7,2,6,9,3,1,2,5,2,9,3,3,9,4,3,9,4,5];
var 0..151: X_INTRODUCED_0;
var 0..151: X_INTRODUCED_1;
var 0..151: X_INTRODUCED_2;
var 0..151: X_INTRODUCED_3;
var 0..151: X_INTRODUCED_4;
var 0..151: X_INTRODUCED_5;
var 0..151: X_INTRODUCED_6;
var 0..151: X_INTRODUCED_7;
var 0..151: X_INTRODUCED_8;
var 0..151: X_INTRODUCED_9;
var 0..151: X_INTRODUCED_10;
var 0..151: X_INTRODUCED_11;
var 0..151: X_INTRODUCED_12;
var 0..151: X_INTRODUCED_13;
var 0..151: X_INTRODUCED_14;
var 0..151: X_INTRODUCED_15;
var 0..151: X_INTRODUCED_16;
var 0..151: X_INTRODUCED_17;
var 0..151: X_INTRODUCED_18;
var 0..151: X_INTRODUCED_19;
var 0..151: X_INTRODUCED_20;
var 0..151: X_INTRODUCED_21;
var 0..151: X_INTRODUCED_22;
var 0..151: X_INTRODUCED_23;
var 0..151: X_INTRODUCED_24;
var 0..151: X_INTRODUCED_25;
var 0..151: X_INTRODUCED_26;
var 0..151: X_INTRODUCED_27;
var 0..151: X_INTRODUCED_28;
var 0..151: X_INTRODUCED_29;
var 0..152: objective:: output_var;
var bool: X_INTRODUCED_59 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_60 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_61 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_62 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_65 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_66 ::var_is_introduced :: is_defined_var;
array [1..30] of var int: s:: output_array([1..30]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28,X_INTRODUCED_29];
array [1..22] of var int: X_INTRODUCED_69 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_21,X_INTRODUCED_22,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_29];
array [1..27] of var int: X_INTRODUCED_72 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28,X_INTRODUCED_29];
array [1..23] of var int: X_INTRODUCED_75 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28];
array [1..19] of var int: X_INTRODUCED_78 ::var_is_introduced  = [X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_5,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_19,X_INTRODUCED_21,X_INTRODUCED_22,X_INTRODUCED_24,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28];
array [1..31] of var int: X_INTRODUCED_81 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28,X_INTRODUCED_29,objective];
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_0,X_INTRODUCED_5],-8);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_0,X_INTRODUCED_12],-8);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_0,X_INTRODUCED_15],-8);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_1,X_INTRODUCED_3],-3);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_1,X_INTRODUCED_4],-3);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_1,X_INTRODUCED_18],-3);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_2,X_INTRODUCED_22],-7);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_3,X_INTRODUCED_16],-2);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_4,X_INTRODUCED_6],-3);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_4,X_INTRODUCED_17],-3);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_4,X_INTRODUCED_19],-3);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_5,X_INTRODUCED_8],-6);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_6,X_INTRODUCED_7],-7);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_6,X_INTRODUCED_14],-7);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_7,X_INTRODUCED_10],-9);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_7,X_INTRODUCED_22],-9);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_8,X_INTRODUCED_9],-9);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_9,X_INTRODUCED_11],-3);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_9,X_INTRODUCED_13],-3);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_10,X_INTRODUCED_12],-1);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_11,X_INTRODUCED_19],-2);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_11,X_INTRODUCED_20],-2);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_12,X_INTRODUCED_23],-5);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_12,X_INTRODUCED_29],-5);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_13,X_INTRODUCED_24],-2);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_13,X_INTRODUCED_25],-2);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_14,X_INTRODUCED_27],-5);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_15,X_INTRODUCED_19],-9);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_16,X_INTRODUCED_27],-3);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_17,X_INTRODUCED_23],-2);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_18,X_INTRODUCED_22],-3);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_19,X_INTRODUCED_26],-3);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_20,X_INTRODUCED_21],-8);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_21,X_INTRODUCED_23],-9);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_21,X_INTRODUCED_25],-9);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_21,X_INTRODUCED_29],-9);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_22,X_INTRODUCED_24],-4);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_22,X_INTRODUCED_29],-4);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_23,X_INTRODUCED_28],-7);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_24,X_INTRODUCED_26],-3);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_25,X_INTRODUCED_26],-9);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_26,X_INTRODUCED_27],-9);
constraint array_bool_or([X_INTRODUCED_59,X_INTRODUCED_60],true);
constraint array_bool_or([X_INTRODUCED_61,X_INTRODUCED_62],true);
constraint array_bool_or([X_INTRODUCED_65,X_INTRODUCED_66],true);
constraint jacop_cumulative(X_INTRODUCED_69,X_INTRODUCED_68,X_INTRODUCED_67,30);
constraint jacop_cumulative(X_INTRODUCED_72,X_INTRODUCED_71,X_INTRODUCED_70,27);
constraint jacop_cumulative(X_INTRODUCED_75,X_INTRODUCED_74,X_INTRODUCED_73,17);
constraint jacop_cumulative(X_INTRODUCED_78,X_INTRODUCED_77,X_INTRODUCED_76,21);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_27,objective],-4);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_28,objective],-5);
constraint int_lin_le(X_INTRODUCED_32,[X_INTRODUCED_29,objective],-2);
constraint int_lin_le_reif(X_INTRODUCED_32,[X_INTRODUCED_21,X_INTRODUCED_15],-9,X_INTRODUCED_59):: defines_var(X_INTRODUCED_59);
constraint int_lin_le_reif(X_INTRODUCED_32,[X_INTRODUCED_15,X_INTRODUCED_21],-9,X_INTRODUCED_60):: defines_var(X_INTRODUCED_60);
constraint int_lin_le_reif(X_INTRODUCED_32,[X_INTRODUCED_21,X_INTRODUCED_19],-9,X_INTRODUCED_61):: defines_var(X_INTRODUCED_61);
constraint int_lin_le_reif(X_INTRODUCED_32,[X_INTRODUCED_19,X_INTRODUCED_21],-3,X_INTRODUCED_62):: defines_var(X_INTRODUCED_62);
constraint int_lin_le_reif(X_INTRODUCED_32,[X_INTRODUCED_28,X_INTRODUCED_21],-5,X_INTRODUCED_65):: defines_var(X_INTRODUCED_65);
constraint int_lin_le_reif(X_INTRODUCED_32,[X_INTRODUCED_21,X_INTRODUCED_28],-9,X_INTRODUCED_66):: defines_var(X_INTRODUCED_66);
solve :: int_search(X_INTRODUCED_81,smallest,indomain_min,complete) minimize objective;
