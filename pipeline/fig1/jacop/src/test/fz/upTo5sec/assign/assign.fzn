predicate jacop_alldiff(array [int] of var int: x);
array [1..5] of int: X_INTRODUCED_4 = [7,1,3,4,6];
array [1..5] of int: X_INTRODUCED_7 = [8,2,5,1,4];
array [1..5] of int: X_INTRODUCED_10 = [4,3,7,2,5];
array [1..5] of int: X_INTRODUCED_13 = [3,1,6,3,6];
var 1..5: X_INTRODUCED_0;
var 1..5: X_INTRODUCED_1;
var 1..5: X_INTRODUCED_2;
var 1..5: X_INTRODUCED_3;
var 1..7: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var 1..8: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var 2..7: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var 1..6: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var 5..28: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
array [1..4] of var int: task:: output_array([1..4]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
constraint jacop_alldiff(task);
constraint array_int_element(X_INTRODUCED_0,X_INTRODUCED_4,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint array_int_element(X_INTRODUCED_1,X_INTRODUCED_7,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint array_int_element(X_INTRODUCED_2,X_INTRODUCED_10,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint array_int_element(X_INTRODUCED_3,X_INTRODUCED_13,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint int_lin_eq([1,1,1,1,-1],[X_INTRODUCED_6,X_INTRODUCED_9,X_INTRODUCED_12,X_INTRODUCED_15,X_INTRODUCED_16],0):: defines_var(X_INTRODUCED_16);
solve  maximize X_INTRODUCED_16;
