array [1..2] of int: X_INTRODUCED_22 = [1,-1];
var 1..10: X_INTRODUCED_0;
var 1..10: X_INTRODUCED_1;
var 1..10: X_INTRODUCED_2;
var 1..10: X_INTRODUCED_3;
var 1..10: X_INTRODUCED_10 ::var_is_introduced ;
var 1..10: X_INTRODUCED_11 ::var_is_introduced ;
var 1..10: X_INTRODUCED_12 ::var_is_introduced ;
var 1..10: X_INTRODUCED_19 ::var_is_introduced ;
var 1..10: X_INTRODUCED_20 ::var_is_introduced ;
var 1..10: X_INTRODUCED_21 ::var_is_introduced ;
array [1..4] of var int: x:: output_array([1..4]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
constraint int_min(X_INTRODUCED_1,X_INTRODUCED_0,X_INTRODUCED_10);
constraint int_min(X_INTRODUCED_2,X_INTRODUCED_10,X_INTRODUCED_11);
constraint int_min(X_INTRODUCED_3,X_INTRODUCED_11,X_INTRODUCED_12);
constraint int_max(X_INTRODUCED_1,X_INTRODUCED_0,X_INTRODUCED_19);
constraint int_max(X_INTRODUCED_2,X_INTRODUCED_19,X_INTRODUCED_20);
constraint int_max(X_INTRODUCED_3,X_INTRODUCED_20,X_INTRODUCED_21);
constraint int_lin_eq(X_INTRODUCED_22,[X_INTRODUCED_21,X_INTRODUCED_12],3);
constraint int_lin_ne(X_INTRODUCED_22,[X_INTRODUCED_0,X_INTRODUCED_1],0);
constraint int_lin_ne(X_INTRODUCED_22,[X_INTRODUCED_0,X_INTRODUCED_2],0);
constraint int_lin_ne(X_INTRODUCED_22,[X_INTRODUCED_0,X_INTRODUCED_3],0);
constraint int_lin_ne(X_INTRODUCED_22,[X_INTRODUCED_1,X_INTRODUCED_2],0);
constraint int_lin_ne(X_INTRODUCED_22,[X_INTRODUCED_1,X_INTRODUCED_3],0);
constraint int_lin_ne(X_INTRODUCED_22,[X_INTRODUCED_2,X_INTRODUCED_3],0);
solve  satisfy;
