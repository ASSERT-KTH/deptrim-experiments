array [1..3] of int: X_INTRODUCED_19 = [1,1,1];
var 0..1: X_INTRODUCED_6;
var 0..1: X_INTRODUCED_7;
var 0..1: X_INTRODUCED_8;
var 0..1: X_INTRODUCED_10;
var 0..1: X_INTRODUCED_11;
var 0..1: X_INTRODUCED_12;
var 0..1: X_INTRODUCED_14;
var 0..1: X_INTRODUCED_15;
var 0..1: X_INTRODUCED_16;
var 1..3: the_killer:: output_var;
var 1..1: the_victim:: output_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_35 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_37 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_39 ::var_is_introduced :: is_defined_var;
var 1..7: X_INTRODUCED_42 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var = false;
var bool: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var = false;
array [1..9] of var int: hates:: output_array([1..3,1..3]) = [1,0,1,1,0,1,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8];
array [1..9] of var int: richer:: output_array([1..3,1..3]) = [0,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,0,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,0];
array [1..9] of var int: X_INTRODUCED_44 ::var_is_introduced  = [0,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,0,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,0];
array [1..9] of var int: X_INTRODUCED_47 ::var_is_introduced  = [1,0,1,1,0,1,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8];
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8],2);
constraint bool_eq(X_INTRODUCED_35,X_INTRODUCED_30);
constraint int_eq_reif(X_INTRODUCED_10,0,X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint int_eq_reif(X_INTRODUCED_16,0,X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
constraint int_eq_reif(X_INTRODUCED_11,0,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint int_eq_reif(X_INTRODUCED_14,0,X_INTRODUCED_39):: defines_var(X_INTRODUCED_39);
constraint array_var_int_element(X_INTRODUCED_42,X_INTRODUCED_44,0);
constraint array_var_int_element(X_INTRODUCED_42,X_INTRODUCED_47,1);
constraint int_eq(X_INTRODUCED_6,0);
constraint int_eq(X_INTRODUCED_8,0);
constraint int_eq_reif(X_INTRODUCED_12,0,X_INTRODUCED_29):: defines_var(X_INTRODUCED_29);
constraint int_eq_reif(X_INTRODUCED_15,0,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint int_eq_reif(X_INTRODUCED_10,1,X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint int_eq_reif(X_INTRODUCED_11,1,X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
constraint int_eq_reif(X_INTRODUCED_12,1,X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint int_eq_reif(X_INTRODUCED_14,1,X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
constraint int_eq_reif(X_INTRODUCED_15,1,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint int_eq_reif(X_INTRODUCED_16,1,X_INTRODUCED_39):: defines_var(X_INTRODUCED_39);
constraint int_lin_eq([3,-1],[the_killer,X_INTRODUCED_42],2):: domain:: defines_var(X_INTRODUCED_42);
solve  satisfy;
