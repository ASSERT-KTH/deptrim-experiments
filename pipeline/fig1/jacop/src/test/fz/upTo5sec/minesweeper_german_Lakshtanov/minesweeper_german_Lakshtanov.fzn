var 0..1: X_INTRODUCED_0;
var 0..1: X_INTRODUCED_2;
var 0..1: X_INTRODUCED_4;
var 0..1: X_INTRODUCED_7;
var 0..1: X_INTRODUCED_9;
var 0..1: X_INTRODUCED_11;
var 0..1: X_INTRODUCED_12;
var 0..1: X_INTRODUCED_14;
var 0..1: X_INTRODUCED_16;
var 0..1: X_INTRODUCED_19;
var 0..1: X_INTRODUCED_21;
var 0..1: X_INTRODUCED_23;
var 0..1: X_INTRODUCED_24;
var 0..1: X_INTRODUCED_26;
var 0..1: X_INTRODUCED_28;
array [1..30] of var int: mines:: output_array([1..5,1..6]) = [X_INTRODUCED_0,0,X_INTRODUCED_2,0,X_INTRODUCED_4,0,0,X_INTRODUCED_7,0,X_INTRODUCED_9,0,X_INTRODUCED_11,X_INTRODUCED_12,0,X_INTRODUCED_14,0,X_INTRODUCED_16,0,0,X_INTRODUCED_19,0,X_INTRODUCED_21,0,X_INTRODUCED_23,X_INTRODUCED_24,0,X_INTRODUCED_26,0,X_INTRODUCED_28,0];
array [1..30] of var int: X_INTRODUCED_49 ::var_is_introduced  = [X_INTRODUCED_0,0,X_INTRODUCED_2,0,X_INTRODUCED_4,0,0,X_INTRODUCED_7,0,X_INTRODUCED_9,0,X_INTRODUCED_11,X_INTRODUCED_12,0,X_INTRODUCED_14,0,X_INTRODUCED_16,0,0,X_INTRODUCED_19,0,X_INTRODUCED_21,0,X_INTRODUCED_23,X_INTRODUCED_24,0,X_INTRODUCED_26,0,X_INTRODUCED_28,0];
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_0,X_INTRODUCED_2,X_INTRODUCED_7],-1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_2,X_INTRODUCED_4,X_INTRODUCED_9],-1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1],[X_INTRODUCED_4,X_INTRODUCED_11],-1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_0,X_INTRODUCED_7,X_INTRODUCED_12],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1],[X_INTRODUCED_2,X_INTRODUCED_7,X_INTRODUCED_9,X_INTRODUCED_14],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1],[X_INTRODUCED_4,X_INTRODUCED_9,X_INTRODUCED_11,X_INTRODUCED_16],-1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1],[X_INTRODUCED_7,X_INTRODUCED_12,X_INTRODUCED_14,X_INTRODUCED_19],-3);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1],[X_INTRODUCED_9,X_INTRODUCED_14,X_INTRODUCED_16,X_INTRODUCED_21],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_11,X_INTRODUCED_16,X_INTRODUCED_23],-1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_12,X_INTRODUCED_19,X_INTRODUCED_24],-1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1],[X_INTRODUCED_14,X_INTRODUCED_19,X_INTRODUCED_21,X_INTRODUCED_26],-3);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1],[X_INTRODUCED_16,X_INTRODUCED_21,X_INTRODUCED_23,X_INTRODUCED_28],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_19,X_INTRODUCED_24,X_INTRODUCED_26],-1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_21,X_INTRODUCED_26,X_INTRODUCED_28],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1],[X_INTRODUCED_23,X_INTRODUCED_28],-1);
solve :: int_search(X_INTRODUCED_49,first_fail,indomain_min,complete) satisfy;
