array [1..2] of int: X_INTRODUCED_12 = [1,-1];
var 1..4: w:: output_var;
var 1..4: x:: output_var;
var 1..4: y:: output_var;
var 1..4: z:: output_var;
var bool: X_INTRODUCED_0 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
array [1..4] of var int: wxyz = [w,x,y,z];
constraint bool_clause([X_INTRODUCED_1],[X_INTRODUCED_0]);
constraint bool_clause([X_INTRODUCED_3],[X_INTRODUCED_2]);
constraint bool_clause([X_INTRODUCED_5],[X_INTRODUCED_4]);
constraint bool_clause([X_INTRODUCED_8],[X_INTRODUCED_7]);
constraint bool_clause([X_INTRODUCED_10],[X_INTRODUCED_9]);
constraint int_lin_ne(X_INTRODUCED_12,[w,x],0);
constraint int_lin_ne(X_INTRODUCED_12,[w,y],0);
constraint int_lin_ne(X_INTRODUCED_12,[w,z],0);
constraint int_lin_ne(X_INTRODUCED_12,[x,y],0);
constraint int_lin_ne(X_INTRODUCED_12,[x,z],0);
constraint int_lin_ne(X_INTRODUCED_12,[y,z],0);
constraint int_ne_reif(x,4,X_INTRODUCED_0):: defines_var(X_INTRODUCED_0);
constraint int_eq_reif(x,2,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint int_eq_reif(y,4,X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint int_ne_reif(x,2,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint int_ne_reif(w,3,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint int_eq_reif(z,2,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_eq_reif(y,2,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint array_bool_or([X_INTRODUCED_5,X_INTRODUCED_6],X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint int_eq_reif(x,1,X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint int_ne_reif(x,1,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint int_ne_reif(y,3,X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
solve  satisfy;
