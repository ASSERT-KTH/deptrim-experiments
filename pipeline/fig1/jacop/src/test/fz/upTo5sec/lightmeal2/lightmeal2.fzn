array [1..8] of int: X_INTRODUCED_9 = [1,1,1,1,1,1,1,1];
array [1..2] of int: X_INTRODUCED_11 = [1,1];
array [1..9] of int: X_INTRODUCED_28 = [1,-1,-6,-5,-7,-2,-4,-2,-6];
var 0..1: X_INTRODUCED_0;
var 0..1: X_INTRODUCED_1;
var 0..1: X_INTRODUCED_2;
var 0..1: X_INTRODUCED_3;
var 0..1: X_INTRODUCED_4;
var 0..1: X_INTRODUCED_5;
var 0..1: X_INTRODUCED_6;
var 0..1: X_INTRODUCED_7;
var 0..10: sum_calories:: output_var:: is_defined_var;
array [1..8] of var int: x:: output_array([1..8]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7];
constraint int_lin_eq(X_INTRODUCED_9,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7],3);
constraint int_lin_eq(X_INTRODUCED_11,[X_INTRODUCED_6,X_INTRODUCED_7],1);
constraint int_lin_le(X_INTRODUCED_11,[X_INTRODUCED_4,X_INTRODUCED_5],1);
constraint int_lin_le(X_INTRODUCED_11,[X_INTRODUCED_2,X_INTRODUCED_3],1);
constraint int_lin_eq(X_INTRODUCED_11,[X_INTRODUCED_0,X_INTRODUCED_1],1);
constraint int_lin_eq(X_INTRODUCED_28,[sum_calories,X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7],0):: defines_var(sum_calories);
solve :: int_search([X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,sum_calories],first_fail,indomain_min,complete) satisfy;
