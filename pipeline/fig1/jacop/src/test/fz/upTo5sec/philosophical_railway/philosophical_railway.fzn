array [1..2] of int: X_INTRODUCED_6 = [1,1];
array [1..2] of int: X_INTRODUCED_34 = [1,-1];
var 1..5: James:: output_var;
var 1..5: Kant:: output_var;
var 1..5: Locke:: output_var;
var 1..5: Mill:: output_var;
var 1..5: Nietzsche:: output_var;
var bool: X_INTRODUCED_0 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_22 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_31 ::var_is_introduced :: is_defined_var;
array [1..5] of var int: philosophers = [James,Kant,Locke,Mill,Nietzsche];
constraint int_lin_eq(X_INTRODUCED_6,[X_INTRODUCED_5,X_INTRODUCED_3],1);
constraint int_lin_eq(X_INTRODUCED_6,[X_INTRODUCED_13,X_INTRODUCED_9],1);
constraint int_lin_eq(X_INTRODUCED_6,[X_INTRODUCED_22,X_INTRODUCED_18],1);
constraint int_lin_eq(X_INTRODUCED_6,[X_INTRODUCED_18,X_INTRODUCED_25],1);
constraint int_lin_eq(X_INTRODUCED_6,[X_INTRODUCED_31,X_INTRODUCED_29],1);
constraint int_lin_ne(X_INTRODUCED_34,[James,Kant],0);
constraint int_lin_ne(X_INTRODUCED_34,[James,Locke],0);
constraint int_lin_ne(X_INTRODUCED_34,[James,Mill],0);
constraint int_lin_ne(X_INTRODUCED_34,[James,Nietzsche],0);
constraint int_lin_ne(X_INTRODUCED_34,[Kant,Locke],0);
constraint int_lin_ne(X_INTRODUCED_34,[Kant,Mill],0);
constraint int_lin_ne(X_INTRODUCED_34,[Kant,Nietzsche],0);
constraint int_lin_ne(X_INTRODUCED_34,[Locke,Mill],0);
constraint int_lin_ne(X_INTRODUCED_34,[Locke,Nietzsche],0);
constraint int_lin_ne(X_INTRODUCED_34,[Mill,Nietzsche],0);
constraint array_bool_or([X_INTRODUCED_0,X_INTRODUCED_2],true);
constraint array_bool_or([X_INTRODUCED_1,X_INTRODUCED_2],true);
constraint bool_clause([],[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2]);
constraint int_ne_reif(Mill,2,X_INTRODUCED_0):: defines_var(X_INTRODUCED_0);
constraint int_ne_reif(Locke,2,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint bool2int(X_INTRODUCED_2,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint int_ne_reif(James,4,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint bool2int(X_INTRODUCED_4,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint array_bool_and([X_INTRODUCED_0,X_INTRODUCED_1],X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint bool2int(X_INTRODUCED_8,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint int_eq_reif(Nietzsche,3,X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint int_eq_reif(James,3,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint array_bool_or([X_INTRODUCED_10,X_INTRODUCED_11],X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint bool2int(X_INTRODUCED_12,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
constraint int_ne_reif(Nietzsche,4,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint int_ne_reif(Kant,4,X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint array_bool_and([X_INTRODUCED_15,X_INTRODUCED_16],X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint bool2int(X_INTRODUCED_17,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint int_ne_reif(James,3,X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
constraint int_ne_reif(James,2,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint array_bool_and([X_INTRODUCED_19,X_INTRODUCED_20],X_INTRODUCED_21):: defines_var(X_INTRODUCED_21);
constraint bool2int(X_INTRODUCED_21,X_INTRODUCED_22):: defines_var(X_INTRODUCED_22);
constraint int_ne_reif(Mill,5,X_INTRODUCED_24):: defines_var(X_INTRODUCED_24);
constraint bool2int(X_INTRODUCED_24,X_INTRODUCED_25):: defines_var(X_INTRODUCED_25);
constraint int_eq_reif(James,2,X_INTRODUCED_27):: defines_var(X_INTRODUCED_27);
constraint array_bool_or([X_INTRODUCED_11,X_INTRODUCED_27],X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint bool2int(X_INTRODUCED_28,X_INTRODUCED_29):: defines_var(X_INTRODUCED_29);
constraint int_eq_reif(Nietzsche,5,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint bool2int(X_INTRODUCED_30,X_INTRODUCED_31):: defines_var(X_INTRODUCED_31);
solve  satisfy;
