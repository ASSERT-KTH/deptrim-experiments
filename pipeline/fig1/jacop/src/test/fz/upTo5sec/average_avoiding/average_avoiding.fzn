array [1..3] of int: X_INTRODUCED_36 = [2,-1,-1];
var 2..4: X_INTRODUCED_0;
var 2..4: X_INTRODUCED_1;
var 2..4: X_INTRODUCED_2;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_26 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
array [1..3] of var int: x:: output_array([1..3]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2];
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_5,X_INTRODUCED_7,X_INTRODUCED_9],-1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_16,X_INTRODUCED_18,X_INTRODUCED_20],-1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_25,X_INTRODUCED_27,X_INTRODUCED_29],-1);
constraint int_lin_ne(X_INTRODUCED_36,[X_INTRODUCED_1,X_INTRODUCED_0,X_INTRODUCED_2],0);
constraint int_eq_reif(X_INTRODUCED_0,2,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint bool2int(X_INTRODUCED_4,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_eq_reif(X_INTRODUCED_1,2,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint bool2int(X_INTRODUCED_6,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint int_eq_reif(X_INTRODUCED_2,2,X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint bool2int(X_INTRODUCED_8,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint int_eq_reif(X_INTRODUCED_0,3,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint bool2int(X_INTRODUCED_15,X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint int_eq_reif(X_INTRODUCED_1,3,X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint bool2int(X_INTRODUCED_17,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint int_eq_reif(X_INTRODUCED_2,3,X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
constraint bool2int(X_INTRODUCED_19,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint int_eq_reif(X_INTRODUCED_0,4,X_INTRODUCED_24):: defines_var(X_INTRODUCED_24);
constraint bool2int(X_INTRODUCED_24,X_INTRODUCED_25):: defines_var(X_INTRODUCED_25);
constraint int_eq_reif(X_INTRODUCED_1,4,X_INTRODUCED_26):: defines_var(X_INTRODUCED_26);
constraint bool2int(X_INTRODUCED_26,X_INTRODUCED_27):: defines_var(X_INTRODUCED_27);
constraint int_eq_reif(X_INTRODUCED_2,4,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint bool2int(X_INTRODUCED_28,X_INTRODUCED_29):: defines_var(X_INTRODUCED_29);
solve  satisfy;
