predicate jacop_alldiff(array [int] of var int: x);
var 0..3: X_INTRODUCED_0;
var 0..3: X_INTRODUCED_1;
var 0..3: X_INTRODUCED_2;
var 0..3: X_INTRODUCED_3;
var 0..3: X_INTRODUCED_4;
var 0..3: X_INTRODUCED_5;
var 0..3: X_INTRODUCED_6;
var 0..3: X_INTRODUCED_7;
var 0..3: X_INTRODUCED_8;
var 0..3: X_INTRODUCED_9;
var 0..3: X_INTRODUCED_10;
var 0..3: X_INTRODUCED_11;
var 0..3: X_INTRODUCED_12;
var 0..3: X_INTRODUCED_13;
var 0..3: X_INTRODUCED_14;
var 0..3: X_INTRODUCED_15;
var 1..16: X_INTRODUCED_23 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_26 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_32 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_42 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_44 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_46 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_48 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_50 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_52 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_54 ::var_is_introduced :: is_defined_var;
array [1..16] of var int: quasiGroup:: output_array([0..3,0..3]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15];
array [1..4] of var int: qgDiagonal:: output_array([0..3]) = [X_INTRODUCED_0,X_INTRODUCED_5,X_INTRODUCED_10,X_INTRODUCED_15];
array [1..16] of var int: X_INTRODUCED_20 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15];
array [1..16] of var int: X_INTRODUCED_21 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15];
array [1..4] of var int: X_INTRODUCED_56 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_4,X_INTRODUCED_8,X_INTRODUCED_12];
array [1..4] of var int: X_INTRODUCED_57 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
constraint array_var_int_element(X_INTRODUCED_23,X_INTRODUCED_21,0);
constraint array_var_int_element(X_INTRODUCED_26,X_INTRODUCED_21,0);
constraint array_var_int_element(X_INTRODUCED_28,X_INTRODUCED_21,0);
constraint array_var_int_element(X_INTRODUCED_30,X_INTRODUCED_21,0);
constraint array_var_int_element(X_INTRODUCED_32,X_INTRODUCED_21,1);
constraint array_var_int_element(X_INTRODUCED_34,X_INTRODUCED_21,1);
constraint array_var_int_element(X_INTRODUCED_36,X_INTRODUCED_21,1);
constraint array_var_int_element(X_INTRODUCED_38,X_INTRODUCED_21,1);
constraint array_var_int_element(X_INTRODUCED_40,X_INTRODUCED_21,2);
constraint array_var_int_element(X_INTRODUCED_42,X_INTRODUCED_21,2);
constraint array_var_int_element(X_INTRODUCED_44,X_INTRODUCED_21,2);
constraint array_var_int_element(X_INTRODUCED_46,X_INTRODUCED_21,2);
constraint array_var_int_element(X_INTRODUCED_48,X_INTRODUCED_21,3);
constraint array_var_int_element(X_INTRODUCED_50,X_INTRODUCED_21,3);
constraint array_var_int_element(X_INTRODUCED_52,X_INTRODUCED_21,3);
constraint array_var_int_element(X_INTRODUCED_54,X_INTRODUCED_21,3);
constraint jacop_alldiff(X_INTRODUCED_56);
constraint jacop_alldiff([X_INTRODUCED_1,X_INTRODUCED_5,X_INTRODUCED_9,X_INTRODUCED_13]);
constraint jacop_alldiff([X_INTRODUCED_2,X_INTRODUCED_6,X_INTRODUCED_10,X_INTRODUCED_14]);
constraint jacop_alldiff([X_INTRODUCED_3,X_INTRODUCED_7,X_INTRODUCED_11,X_INTRODUCED_15]);
constraint jacop_alldiff(X_INTRODUCED_57);
constraint jacop_alldiff([X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7]);
constraint jacop_alldiff([X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11]);
constraint jacop_alldiff([X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15]);
constraint int_lin_eq([5,-1],[X_INTRODUCED_0,X_INTRODUCED_23],-1):: domain:: defines_var(X_INTRODUCED_23);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_4,X_INTRODUCED_1,X_INTRODUCED_26],-1):: domain:: defines_var(X_INTRODUCED_26);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_8,X_INTRODUCED_2,X_INTRODUCED_28],-1):: domain:: defines_var(X_INTRODUCED_28);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_12,X_INTRODUCED_3,X_INTRODUCED_30],-1):: domain:: defines_var(X_INTRODUCED_30);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_1,X_INTRODUCED_4,X_INTRODUCED_32],-1):: domain:: defines_var(X_INTRODUCED_32);
constraint int_lin_eq([5,-1],[X_INTRODUCED_5,X_INTRODUCED_34],-1):: domain:: defines_var(X_INTRODUCED_34);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_9,X_INTRODUCED_6,X_INTRODUCED_36],-1):: domain:: defines_var(X_INTRODUCED_36);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_13,X_INTRODUCED_7,X_INTRODUCED_38],-1):: domain:: defines_var(X_INTRODUCED_38);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_2,X_INTRODUCED_8,X_INTRODUCED_40],-1):: domain:: defines_var(X_INTRODUCED_40);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_6,X_INTRODUCED_9,X_INTRODUCED_42],-1):: domain:: defines_var(X_INTRODUCED_42);
constraint int_lin_eq([5,-1],[X_INTRODUCED_10,X_INTRODUCED_44],-1):: domain:: defines_var(X_INTRODUCED_44);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_14,X_INTRODUCED_11,X_INTRODUCED_46],-1):: domain:: defines_var(X_INTRODUCED_46);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_3,X_INTRODUCED_12,X_INTRODUCED_48],-1):: domain:: defines_var(X_INTRODUCED_48);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_7,X_INTRODUCED_13,X_INTRODUCED_50],-1):: domain:: defines_var(X_INTRODUCED_50);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_11,X_INTRODUCED_14,X_INTRODUCED_52],-1):: domain:: defines_var(X_INTRODUCED_52);
constraint int_lin_eq([5,-1],[X_INTRODUCED_15,X_INTRODUCED_54],-1):: domain:: defines_var(X_INTRODUCED_54);
solve :: int_search(X_INTRODUCED_20,first_fail,indomain_min,complete) satisfy;
