var 0..1: X_INTRODUCED_2;
var 0..1: X_INTRODUCED_8;
var 0..1: X_INTRODUCED_9;
var 0..1: X_INTRODUCED_11;
var 0..1: X_INTRODUCED_12;
var 0..1: X_INTRODUCED_16;
var 0..1: X_INTRODUCED_17;
var 0..1: X_INTRODUCED_18;
var 0..1: X_INTRODUCED_19;
var 0..1: X_INTRODUCED_20;
var 0..1: X_INTRODUCED_21;
var 0..1: X_INTRODUCED_26;
var 0..1: X_INTRODUCED_28;
var 0..1: X_INTRODUCED_29;
var 0..1: X_INTRODUCED_30;
var 0..1: X_INTRODUCED_35;
var 0..1: X_INTRODUCED_38;
var 0..1: X_INTRODUCED_43;
var 0..1: X_INTRODUCED_44;
var 0..1: X_INTRODUCED_45;
var 0..1: X_INTRODUCED_47;
var 0..1: X_INTRODUCED_52;
var 0..1: X_INTRODUCED_53;
var 0..1: X_INTRODUCED_54;
var 0..1: X_INTRODUCED_62;
array [1..64] of var int: mines:: output_array([1..8,1..8]) = [0,0,X_INTRODUCED_2,0,0,1,0,0,X_INTRODUCED_8,X_INTRODUCED_9,0,X_INTRODUCED_11,X_INTRODUCED_12,0,1,0,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,0,1,1,0,X_INTRODUCED_26,0,X_INTRODUCED_28,X_INTRODUCED_29,X_INTRODUCED_30,0,0,1,1,X_INTRODUCED_35,0,0,X_INTRODUCED_38,0,0,0,0,X_INTRODUCED_43,X_INTRODUCED_44,X_INTRODUCED_45,0,X_INTRODUCED_47,0,0,1,0,X_INTRODUCED_52,X_INTRODUCED_53,X_INTRODUCED_54,0,0,0,0,1,0,0,X_INTRODUCED_62,0];
array [1..64] of var int: X_INTRODUCED_99 ::var_is_introduced  = [0,0,X_INTRODUCED_2,0,0,1,0,0,X_INTRODUCED_8,X_INTRODUCED_9,0,X_INTRODUCED_11,X_INTRODUCED_12,0,1,0,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,0,1,1,0,X_INTRODUCED_26,0,X_INTRODUCED_28,X_INTRODUCED_29,X_INTRODUCED_30,0,0,1,1,X_INTRODUCED_35,0,0,X_INTRODUCED_38,0,0,0,0,X_INTRODUCED_43,X_INTRODUCED_44,X_INTRODUCED_45,0,X_INTRODUCED_47,0,0,1,0,X_INTRODUCED_52,X_INTRODUCED_53,X_INTRODUCED_54,0,0,0,0,1,0,0,X_INTRODUCED_62,0];
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1],[X_INTRODUCED_8,X_INTRODUCED_9],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_2,X_INTRODUCED_8,X_INTRODUCED_9],-3);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_2,X_INTRODUCED_11,X_INTRODUCED_12],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1],[X_INTRODUCED_11,X_INTRODUCED_12],-1);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1,-1],[X_INTRODUCED_2,X_INTRODUCED_9,X_INTRODUCED_11,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19],-4);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_12,X_INTRODUCED_20,X_INTRODUCED_21],-2);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_21,X_INTRODUCED_29,X_INTRODUCED_30],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1],[X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_26],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1,-1],[X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_26,X_INTRODUCED_28,X_INTRODUCED_35],-5);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1],[X_INTRODUCED_30,X_INTRODUCED_38],-1);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1,-1],[X_INTRODUCED_28,X_INTRODUCED_29,X_INTRODUCED_35,X_INTRODUCED_43,X_INTRODUCED_44,X_INTRODUCED_45],-5);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1,-1],[X_INTRODUCED_28,X_INTRODUCED_29,X_INTRODUCED_30,X_INTRODUCED_38,X_INTRODUCED_44,X_INTRODUCED_45],-5);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_30,X_INTRODUCED_38,X_INTRODUCED_47],-2);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1],[X_INTRODUCED_35,X_INTRODUCED_43],-1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_38,X_INTRODUCED_45,X_INTRODUCED_47,X_INTRODUCED_53,X_INTRODUCED_54],-4);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_43,X_INTRODUCED_44,X_INTRODUCED_52],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_47,X_INTRODUCED_54,X_INTRODUCED_62],-3);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1],[X_INTRODUCED_52,X_INTRODUCED_53],-1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1],[X_INTRODUCED_52,X_INTRODUCED_53,X_INTRODUCED_54,X_INTRODUCED_62],-3);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1],[X_INTRODUCED_54,X_INTRODUCED_62],-2);
solve :: int_search(X_INTRODUCED_99,first_fail,indomain_min,complete) satisfy;
