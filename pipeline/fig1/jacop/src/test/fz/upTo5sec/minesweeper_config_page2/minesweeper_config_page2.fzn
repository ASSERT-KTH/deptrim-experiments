var 0..1: X_INTRODUCED_0;
var 0..1: X_INTRODUCED_1;
var 0..1: X_INTRODUCED_2;
var 0..1: X_INTRODUCED_3;
var 0..1: X_INTRODUCED_4;
var 0..1: X_INTRODUCED_5;
var 0..1: X_INTRODUCED_6;
var 0..1: X_INTRODUCED_11;
var 0..1: X_INTRODUCED_12;
var 0..1: X_INTRODUCED_17;
var 0..1: X_INTRODUCED_18;
var 0..1: X_INTRODUCED_23;
var 0..1: X_INTRODUCED_24;
var 0..1: X_INTRODUCED_29;
var 0..1: X_INTRODUCED_30;
var 0..1: X_INTRODUCED_31;
var 0..1: X_INTRODUCED_32;
var 0..1: X_INTRODUCED_33;
var 0..1: X_INTRODUCED_34;
var 0..1: X_INTRODUCED_35;
array [1..36] of var int: mines:: output_array([1..6,1..6]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,0,0,0,0,X_INTRODUCED_11,X_INTRODUCED_12,0,0,0,0,X_INTRODUCED_17,X_INTRODUCED_18,0,0,0,0,X_INTRODUCED_23,X_INTRODUCED_24,0,0,0,0,X_INTRODUCED_29,X_INTRODUCED_30,X_INTRODUCED_31,X_INTRODUCED_32,X_INTRODUCED_33,X_INTRODUCED_34,X_INTRODUCED_35];
array [1..36] of var int: X_INTRODUCED_54 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,0,0,0,0,X_INTRODUCED_11,X_INTRODUCED_12,0,0,0,0,X_INTRODUCED_17,X_INTRODUCED_18,0,0,0,0,X_INTRODUCED_23,X_INTRODUCED_24,0,0,0,0,X_INTRODUCED_29,X_INTRODUCED_30,X_INTRODUCED_31,X_INTRODUCED_32,X_INTRODUCED_33,X_INTRODUCED_34,X_INTRODUCED_35];
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_6,X_INTRODUCED_12],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_11,X_INTRODUCED_17],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_6,X_INTRODUCED_12,X_INTRODUCED_18],-2);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_11,X_INTRODUCED_17,X_INTRODUCED_23],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_12,X_INTRODUCED_18,X_INTRODUCED_24],-2);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_17,X_INTRODUCED_23,X_INTRODUCED_29],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_18,X_INTRODUCED_24,X_INTRODUCED_30,X_INTRODUCED_31,X_INTRODUCED_32],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_31,X_INTRODUCED_32,X_INTRODUCED_33],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1],[X_INTRODUCED_32,X_INTRODUCED_33,X_INTRODUCED_34],-2);
constraint int_ne(0,1);
constraint int_lin_eq([-1,-1,-1,-1,-1],[X_INTRODUCED_23,X_INTRODUCED_29,X_INTRODUCED_33,X_INTRODUCED_34,X_INTRODUCED_35],-2);
solve :: int_search(X_INTRODUCED_54,first_fail,indomain_min,complete) satisfy;
