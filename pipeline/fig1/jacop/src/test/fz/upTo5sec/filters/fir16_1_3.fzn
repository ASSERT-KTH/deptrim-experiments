predicate jacop_diff2_strict(array [int] of var int: x,array [int] of var int: y,array [int] of var int: lx,array [int] of var int: ly);
predicate jacop_maximum(var int: m,array [int] of var int: x);
array [1..2] of int: X_INTRODUCED_68 = [1,-1];
array [1..16] of int: X_INTRODUCED_104 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
array [1..17] of int: X_INTRODUCED_107 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2];
array [1..17] of int: X_INTRODUCED_108 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
var 0..100: X_INTRODUCED_0;
var 0..100: X_INTRODUCED_1;
var 0..100: X_INTRODUCED_2;
var 0..100: X_INTRODUCED_3;
var 0..100: X_INTRODUCED_4;
var 0..100: X_INTRODUCED_5;
var 0..100: X_INTRODUCED_6;
var 0..100: X_INTRODUCED_7;
var 0..100: X_INTRODUCED_8;
var 0..100: X_INTRODUCED_9;
var 0..100: X_INTRODUCED_10;
var 0..100: X_INTRODUCED_11;
var 0..100: X_INTRODUCED_12;
var 0..100: X_INTRODUCED_13;
var 0..100: X_INTRODUCED_14;
var 0..100: X_INTRODUCED_15;
var 0..100: X_INTRODUCED_16;
var 0..100: X_INTRODUCED_17;
var 0..100: X_INTRODUCED_18;
var 0..100: X_INTRODUCED_19;
var 0..100: X_INTRODUCED_20;
var 0..100: X_INTRODUCED_21;
var 0..100: X_INTRODUCED_22;
var 0..100: X_INTRODUCED_23;
var 0..100: X_INTRODUCED_24;
var 0..100: X_INTRODUCED_25;
var 0..100: X_INTRODUCED_26;
var 0..100: X_INTRODUCED_27;
var 0..100: X_INTRODUCED_28;
var 0..100: X_INTRODUCED_29;
var 0..100: X_INTRODUCED_30;
var 0..100: X_INTRODUCED_31;
var 0..100: X_INTRODUCED_32;
var 1..3: X_INTRODUCED_33;
var 1..3: X_INTRODUCED_34;
var 1..3: X_INTRODUCED_35;
var 1..3: X_INTRODUCED_36;
var 1..3: X_INTRODUCED_37;
var 1..3: X_INTRODUCED_38;
var 1..3: X_INTRODUCED_39;
var 1..3: X_INTRODUCED_40;
var 1..3: X_INTRODUCED_41;
var 1..3: X_INTRODUCED_42;
var 1..3: X_INTRODUCED_43;
var 1..3: X_INTRODUCED_44;
var 1..3: X_INTRODUCED_45;
var 1..3: X_INTRODUCED_46;
var 1..3: X_INTRODUCED_47;
var 1..3: X_INTRODUCED_48;
var 1..3: X_INTRODUCED_49;
var int: end:: output_var;
var 1..101: X_INTRODUCED_109 ::var_is_introduced :: is_defined_var;
array [1..33] of var int: t:: output_array([1..33]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28,X_INTRODUCED_29,X_INTRODUCED_30,X_INTRODUCED_31,X_INTRODUCED_32];
array [1..33] of var int: r:: output_array([1..33]) = [X_INTRODUCED_33,X_INTRODUCED_34,X_INTRODUCED_35,X_INTRODUCED_36,X_INTRODUCED_37,X_INTRODUCED_38,X_INTRODUCED_39,X_INTRODUCED_40,X_INTRODUCED_41,X_INTRODUCED_42,X_INTRODUCED_43,X_INTRODUCED_44,X_INTRODUCED_45,X_INTRODUCED_46,X_INTRODUCED_47,X_INTRODUCED_48,X_INTRODUCED_49,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
array [1..16] of var int: t_add = [X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28,X_INTRODUCED_29,X_INTRODUCED_30,X_INTRODUCED_31,X_INTRODUCED_32];
array [1..17] of var int: t_mul = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16];
array [1..16] of var int: X_INTRODUCED_102 ::var_is_introduced  = [X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27,X_INTRODUCED_28,X_INTRODUCED_29,X_INTRODUCED_30,X_INTRODUCED_31,X_INTRODUCED_32];
array [1..16] of var int: X_INTRODUCED_103 ::var_is_introduced  = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
array [1..17] of var int: X_INTRODUCED_105 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16];
array [1..17] of var int: X_INTRODUCED_106 ::var_is_introduced  = [X_INTRODUCED_33,X_INTRODUCED_34,X_INTRODUCED_35,X_INTRODUCED_36,X_INTRODUCED_37,X_INTRODUCED_38,X_INTRODUCED_39,X_INTRODUCED_40,X_INTRODUCED_41,X_INTRODUCED_42,X_INTRODUCED_43,X_INTRODUCED_44,X_INTRODUCED_45,X_INTRODUCED_46,X_INTRODUCED_47,X_INTRODUCED_48,X_INTRODUCED_49];
array [1..1] of var int: X_INTRODUCED_110 ::var_is_introduced  = [X_INTRODUCED_109];
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_0,X_INTRODUCED_17],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_1,X_INTRODUCED_17],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_2,X_INTRODUCED_18],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_3,X_INTRODUCED_19],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_4,X_INTRODUCED_20],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_5,X_INTRODUCED_21],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_6,X_INTRODUCED_22],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_7,X_INTRODUCED_23],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_8,X_INTRODUCED_24],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_9,X_INTRODUCED_25],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_10,X_INTRODUCED_26],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_11,X_INTRODUCED_27],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_12,X_INTRODUCED_28],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_13,X_INTRODUCED_29],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_14,X_INTRODUCED_30],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_15,X_INTRODUCED_31],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_16,X_INTRODUCED_32],-2);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_17,X_INTRODUCED_18],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_18,X_INTRODUCED_19],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_19,X_INTRODUCED_20],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_20,X_INTRODUCED_21],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_21,X_INTRODUCED_22],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_22,X_INTRODUCED_23],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_23,X_INTRODUCED_24],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_24,X_INTRODUCED_25],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_25,X_INTRODUCED_26],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_26,X_INTRODUCED_27],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_27,X_INTRODUCED_28],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_28,X_INTRODUCED_29],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_29,X_INTRODUCED_30],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_30,X_INTRODUCED_31],-1);
constraint int_lin_le(X_INTRODUCED_68,[X_INTRODUCED_31,X_INTRODUCED_32],-1);
constraint jacop_diff2_strict(X_INTRODUCED_102,X_INTRODUCED_103,X_INTRODUCED_104,X_INTRODUCED_104);
constraint jacop_diff2_strict(X_INTRODUCED_105,X_INTRODUCED_106,X_INTRODUCED_107,X_INTRODUCED_108);
constraint jacop_maximum(end,X_INTRODUCED_110);
constraint int_lin_eq([1,-1],[X_INTRODUCED_32,X_INTRODUCED_109],-1):: defines_var(X_INTRODUCED_109);
solve :: seq_search([int_search(t,smallest,indomain_min,complete),int_search(r,input_order,indomain_min,complete)]) minimize end;
