predicate jacop_diff2_strict(array [int] of var int: x,array [int] of var int: y,array [int] of var int: lx,array [int] of var int: ly);
predicate jacop_maximum(var int: m,array [int] of var int: x);
array [1..2] of int: X_INTRODUCED_24 = [1,-1];
array [1..5] of int: X_INTRODUCED_33 = [1,1,1,1,1];
array [1..6] of int: X_INTRODUCED_36 = [1,1,1,1,1,1];
var 0..100: X_INTRODUCED_0;
var 0..100: X_INTRODUCED_1;
var 0..100: X_INTRODUCED_2;
var 0..100: X_INTRODUCED_3;
var 0..100: X_INTRODUCED_4;
var 0..100: X_INTRODUCED_5;
var 0..100: X_INTRODUCED_6;
var 0..100: X_INTRODUCED_7;
var 0..100: X_INTRODUCED_8;
var 0..100: X_INTRODUCED_9;
var 0..100: X_INTRODUCED_10;
var 1..3: X_INTRODUCED_11;
var 1..3: X_INTRODUCED_12;
var 1..3: X_INTRODUCED_13;
var 1..3: X_INTRODUCED_14;
var 1..2: X_INTRODUCED_15;
var 1..3: X_INTRODUCED_16;
var 1..3: X_INTRODUCED_17;
var 1..2: X_INTRODUCED_18;
var 1..2: X_INTRODUCED_19;
var 1..2: X_INTRODUCED_20;
var 1..2: X_INTRODUCED_21;
var int: end:: output_var;
var 1..101: X_INTRODUCED_39 ::var_is_introduced :: is_defined_var;
var 1..101: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
var 1..101: X_INTRODUCED_41 ::var_is_introduced :: is_defined_var;
array [1..11] of var int: t:: output_array([1..11]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10];
array [1..11] of var int: r:: output_array([1..11]) = [X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21];
array [1..5] of var int: t_add = [X_INTRODUCED_4,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10];
array [1..6] of var int: t_mul = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_5,X_INTRODUCED_6];
array [1..5] of var int: X_INTRODUCED_34 ::var_is_introduced  = [X_INTRODUCED_15,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21];
array [1..5] of var int: X_INTRODUCED_35 ::var_is_introduced  = [X_INTRODUCED_4,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10];
array [1..6] of var int: X_INTRODUCED_37 ::var_is_introduced  = [X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_16,X_INTRODUCED_17];
array [1..6] of var int: X_INTRODUCED_38 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_5,X_INTRODUCED_6];
array [1..3] of var int: X_INTRODUCED_42 ::var_is_introduced  = [X_INTRODUCED_39,X_INTRODUCED_40,X_INTRODUCED_41];
constraint int_lin_le(X_INTRODUCED_24,[X_INTRODUCED_0,X_INTRODUCED_5],-1);
constraint int_lin_le(X_INTRODUCED_24,[X_INTRODUCED_1,X_INTRODUCED_5],-1);
constraint int_lin_le(X_INTRODUCED_24,[X_INTRODUCED_2,X_INTRODUCED_6],-1);
constraint int_lin_le(X_INTRODUCED_24,[X_INTRODUCED_3,X_INTRODUCED_7],-1);
constraint int_lin_le(X_INTRODUCED_24,[X_INTRODUCED_4,X_INTRODUCED_8],-1);
constraint int_lin_le(X_INTRODUCED_24,[X_INTRODUCED_5,X_INTRODUCED_9],-1);
constraint int_lin_le(X_INTRODUCED_24,[X_INTRODUCED_6,X_INTRODUCED_10],-1);
constraint int_lin_le(X_INTRODUCED_24,[X_INTRODUCED_9,X_INTRODUCED_10],-1);
constraint jacop_diff2_strict(X_INTRODUCED_35,X_INTRODUCED_34,X_INTRODUCED_33,X_INTRODUCED_33);
constraint jacop_diff2_strict(X_INTRODUCED_38,X_INTRODUCED_37,X_INTRODUCED_36,X_INTRODUCED_36);
constraint jacop_maximum(end,X_INTRODUCED_42);
constraint int_lin_eq([1,-1],[X_INTRODUCED_7,X_INTRODUCED_39],-1):: defines_var(X_INTRODUCED_39);
constraint int_lin_eq([1,-1],[X_INTRODUCED_8,X_INTRODUCED_40],-1):: defines_var(X_INTRODUCED_40);
constraint int_lin_eq([1,-1],[X_INTRODUCED_10,X_INTRODUCED_41],-1):: defines_var(X_INTRODUCED_41);
solve :: seq_search([int_search(t,smallest,indomain_min,complete),int_search(r,input_order,indomain_min,complete)]) minimize end;
