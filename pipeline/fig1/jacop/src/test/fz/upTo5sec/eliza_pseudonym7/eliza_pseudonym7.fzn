array [1..2] of int: X_INTRODUCED_17 = [1,-1];
array [1..6] of int: X_INTRODUCED_24 = [-1,-1,-1,-1,-1,-1];
var 2..6: anna:: output_var:: is_defined_var;
var 4..6: barbra:: output_var:: is_defined_var;
var 5..5: carla:: output_var;
var 1..6: delilah:: output_var;
var 1..6: eliza:: output_var;
var 1..6: fiona:: output_var;
var 1..6: abulia:: output_var;
var 1..6: betise:: output_var;
var 1..4: caryatid:: output_var:: is_defined_var;
var 1..6: dehisce:: output_var;
var 1..6: euhemerism:: output_var;
var 1..6: floruit:: output_var;
var 1..6: sum_beginnings:: is_defined_var;
var bool: X_INTRODUCED_0 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
array [1..6] of var int: friends = [anna,barbra,5,delilah,eliza,fiona];
array [1..6] of var int: all_words = [abulia,betise,caryatid,dehisce,euhemerism,floruit];
array [1..13] of var int: X_INTRODUCED_14 ::var_is_introduced  = [anna,barbra,5,delilah,eliza,fiona,abulia,betise,caryatid,dehisce,euhemerism,floruit,sum_beginnings];
constraint int_lin_eq(X_INTRODUCED_17,[barbra,dehisce],3):: defines_var(barbra);
constraint array_bool_or([X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21],true);
constraint int_lin_eq(X_INTRODUCED_17,[anna,euhemerism],1):: defines_var(anna);
constraint int_lin_eq(X_INTRODUCED_17,[caryatid,fiona],-2):: defines_var(caryatid);
constraint int_lin_eq(X_INTRODUCED_24,[X_INTRODUCED_11,X_INTRODUCED_9,X_INTRODUCED_7,X_INTRODUCED_5,X_INTRODUCED_3,X_INTRODUCED_1],-1);
constraint int_lin_ne(X_INTRODUCED_17,[abulia,betise],0);
constraint int_lin_ne(X_INTRODUCED_17,[abulia,caryatid],0);
constraint int_lin_ne(X_INTRODUCED_17,[abulia,dehisce],0);
constraint int_lin_ne(X_INTRODUCED_17,[abulia,euhemerism],0);
constraint int_lin_ne(X_INTRODUCED_17,[abulia,floruit],0);
constraint int_lin_ne(X_INTRODUCED_17,[betise,caryatid],0);
constraint int_lin_ne(X_INTRODUCED_17,[betise,dehisce],0);
constraint int_lin_ne(X_INTRODUCED_17,[betise,euhemerism],0);
constraint int_lin_ne(X_INTRODUCED_17,[betise,floruit],0);
constraint int_lin_ne(X_INTRODUCED_17,[caryatid,dehisce],0);
constraint int_lin_ne(X_INTRODUCED_17,[caryatid,euhemerism],0);
constraint int_lin_ne(X_INTRODUCED_17,[caryatid,floruit],0);
constraint int_lin_ne(X_INTRODUCED_17,[dehisce,euhemerism],0);
constraint int_lin_ne(X_INTRODUCED_17,[dehisce,floruit],0);
constraint int_lin_ne(X_INTRODUCED_17,[euhemerism,floruit],0);
constraint int_lin_ne(X_INTRODUCED_17,[anna,barbra],0);
constraint int_lin_ne([1],[anna],5);
constraint int_lin_ne(X_INTRODUCED_17,[anna,delilah],0);
constraint int_lin_ne(X_INTRODUCED_17,[anna,eliza],0);
constraint int_lin_ne(X_INTRODUCED_17,[anna,fiona],0);
constraint int_lin_ne([1],[barbra],5);
constraint int_lin_ne(X_INTRODUCED_17,[barbra,delilah],0);
constraint int_lin_ne(X_INTRODUCED_17,[barbra,eliza],0);
constraint int_lin_ne(X_INTRODUCED_17,[barbra,fiona],0);
constraint int_lin_ne([-1],[delilah],-5);
constraint int_lin_ne([-1],[eliza],-5);
constraint int_lin_ne([-1],[fiona],-5);
constraint int_lin_ne(X_INTRODUCED_17,[delilah,eliza],0);
constraint int_lin_ne(X_INTRODUCED_17,[delilah,fiona],0);
constraint int_lin_ne(X_INTRODUCED_17,[eliza,fiona],0);
constraint int_lin_eq([1,1,1,1,1,1,-1],[X_INTRODUCED_11,X_INTRODUCED_9,X_INTRODUCED_7,X_INTRODUCED_5,X_INTRODUCED_3,X_INTRODUCED_1,sum_beginnings],0):: defines_var(sum_beginnings);
constraint int_eq_reif(fiona,floruit,X_INTRODUCED_0):: defines_var(X_INTRODUCED_0);
constraint bool2int(X_INTRODUCED_0,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint int_eq_reif(anna,abulia,X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint bool2int(X_INTRODUCED_2,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint int_eq_reif(barbra,betise,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint bool2int(X_INTRODUCED_4,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_eq_reif(caryatid,5,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint bool2int(X_INTRODUCED_6,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint int_eq_reif(dehisce,delilah,X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint bool2int(X_INTRODUCED_8,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint int_eq_reif(eliza,euhemerism,X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint bool2int(X_INTRODUCED_10,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint int_eq_reif(caryatid,3,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint int_eq_reif(euhemerism,3,X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
constraint int_eq_reif(floruit,3,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint int_eq_reif(abulia,3,X_INTRODUCED_21):: defines_var(X_INTRODUCED_21);
solve :: int_search(X_INTRODUCED_14,first_fail,indomain_min,complete) satisfy;
