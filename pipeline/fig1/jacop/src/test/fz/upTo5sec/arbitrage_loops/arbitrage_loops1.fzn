predicate jacop_alldiff(array [int] of var int: x);
array [1..16] of float: X_INTRODUCED_26 = [0.0,0.7779,102.459,0.0083,1.2851,0.0,131.711,0.01125,0.0098,0.0075,0.0,8.110000000000001e-05,115.65,88.84990000000001,12325.44,0.0];
array [1..16] of float: X_INTRODUCED_31 = [0.0,0.7779,102.459,0.0083,1.2851,0.0,131.711,0.01125,0.0098,0.0075,0.0,8.110000000000001e-05,115.65,88.84990000000001,12325.44,0.0];
array [1..16] of float: X_INTRODUCED_36 = [0.0,0.7779,102.459,0.0083,1.2851,0.0,131.711,0.01125,0.0098,0.0075,0.0,8.110000000000001e-05,115.65,88.84990000000001,12325.44,0.0];
array [1..16] of float: X_INTRODUCED_41 = [0.0,0.7779,102.459,0.0083,1.2851,0.0,131.711,0.01125,0.0098,0.0075,0.0,8.110000000000001e-05,115.65,88.84990000000001,12325.44,0.0];
var 0..4: X_INTRODUCED_1;
var 0..4: X_INTRODUCED_2;
var 0..4: X_INTRODUCED_3;
var 0..4: X_INTRODUCED_4;
var 0.0..12325.44: X_INTRODUCED_9;
var 0.0..2.30786142199159e+16: z:: output_var:: is_defined_var;
var 0.0..151916471.1936: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var 0.0..1872437350708.445: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
var 0.0..12325.44: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
var 0.0..12325.44: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var 0.0..12325.44: X_INTRODUCED_35 ::var_is_introduced :: is_defined_var;
var 1..16: X_INTRODUCED_39 ::var_is_introduced :: is_defined_var;
var 0.0..12325.44: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
array [1..5] of var int: y:: output_array([1..5]) = [X_INTRODUCED_4,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4];
array [1..5] of var float: profit:: output_array([1..5]) = [X_INTRODUCED_25,X_INTRODUCED_30,X_INTRODUCED_35,X_INTRODUCED_40,X_INTRODUCED_9];
array [1..4] of var int: X_INTRODUCED_42 ::var_is_introduced  = [X_INTRODUCED_4,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
constraint array_float_element(X_INTRODUCED_24,X_INTRODUCED_26,X_INTRODUCED_25):: defines_var(X_INTRODUCED_25);
constraint array_float_element(X_INTRODUCED_29,X_INTRODUCED_31,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint array_float_element(X_INTRODUCED_34,X_INTRODUCED_36,X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
constraint array_float_element(X_INTRODUCED_39,X_INTRODUCED_41,X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
constraint jacop_alldiff(X_INTRODUCED_42);
constraint float_le(0.0,z);
constraint float_times(X_INTRODUCED_25,X_INTRODUCED_19,z):: defines_var(z);
constraint float_times(X_INTRODUCED_35,X_INTRODUCED_40,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint float_times(X_INTRODUCED_30,X_INTRODUCED_18,X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_1,X_INTRODUCED_4,X_INTRODUCED_24],4):: domain:: defines_var(X_INTRODUCED_24);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_2,X_INTRODUCED_1,X_INTRODUCED_29],4):: domain:: defines_var(X_INTRODUCED_29);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_3,X_INTRODUCED_2,X_INTRODUCED_34],4):: domain:: defines_var(X_INTRODUCED_34);
constraint int_lin_eq([1,4,-1],[X_INTRODUCED_4,X_INTRODUCED_3,X_INTRODUCED_39],4):: domain:: defines_var(X_INTRODUCED_39);
solve  maximize z;
