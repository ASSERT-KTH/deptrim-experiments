array [1..4] of int: X_INTRODUCED_4 = [1,1,1,1];
array [1..2] of int: X_INTRODUCED_9 = [-1,-1];
var bool: A:: output_var;
var bool: B:: output_var;
var bool: C:: output_var;
var bool: D:: output_var;
var bool: M2:: is_defined_var:: output_var;
var bool: M3:: is_defined_var:: output_var;
var bool: M4:: is_defined_var:: output_var;
var bool: M5:: is_defined_var:: output_var;
var bool: M6:: is_defined_var:: output_var;
var bool: M7:: is_defined_var:: output_var;
var bool: M8:: is_defined_var:: output_var;
var 0..1: X_INTRODUCED_0 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
constraint int_lin_eq(X_INTRODUCED_4,[X_INTRODUCED_3,X_INTRODUCED_2,X_INTRODUCED_1,X_INTRODUCED_0],1);
constraint array_bool_or([M3,M7],true);
constraint bool_clause([M7],[M6]);
constraint bool_clause([M6],[M3,M7]);
constraint array_bool_or([M8,X_INTRODUCED_6],true);
constraint bool_clause([M8],[A]);
constraint bool_clause([A],[M8,X_INTRODUCED_6]);
constraint int_lin_le_reif(X_INTRODUCED_9,[X_INTRODUCED_2,X_INTRODUCED_3],-1,M2):: defines_var(M2);
constraint array_bool_and([A,M2],M3):: defines_var(M3);
constraint array_bool_and([A,B],M4):: defines_var(M4);
constraint array_bool_and([A,C],M5):: defines_var(M5);
constraint array_bool_or([M4,M5],M6):: defines_var(M6);
constraint bool2int(D,X_INTRODUCED_0):: defines_var(X_INTRODUCED_0);
constraint bool2int(A,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint bool2int(B,X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint bool2int(C,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint array_bool_and([M7,M8],X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
solve  satisfy;
