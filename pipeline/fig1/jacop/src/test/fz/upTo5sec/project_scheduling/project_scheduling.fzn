predicate jacop_maximum(var int: m,array [int] of var int: x);
array [1..2] of int: X_INTRODUCED_19 = [1,-1];
var 0..27: X_INTRODUCED_0;
var 0..27: X_INTRODUCED_1;
var 0..27: X_INTRODUCED_2;
var 0..27: X_INTRODUCED_3;
var 0..27: X_INTRODUCED_4;
var 0..27: X_INTRODUCED_5;
var 0..27: X_INTRODUCED_6;
var 0..27: X_INTRODUCED_7;
var 7..34: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var 4..31: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var 3..30: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var 3..30: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var 2..29: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var 2..29: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var 3..30: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var 3..30: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var 2..34: X_INTRODUCED_18 ::var_is_introduced ;
array [1..8] of var int: start:: output_array([1..8]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7];
array [1..8] of var int: X_INTRODUCED_17 ::var_is_introduced  = [X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16];
constraint jacop_maximum(X_INTRODUCED_18,X_INTRODUCED_17);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_0,X_INTRODUCED_1],-7);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_0,X_INTRODUCED_2],-7);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_0,X_INTRODUCED_3],-7);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_2,X_INTRODUCED_4],-3);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_2,X_INTRODUCED_7],-3);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_1,X_INTRODUCED_5],-4);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_3,X_INTRODUCED_6],-3);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_4,X_INTRODUCED_6],-2);
constraint int_lin_eq([1,-1],[X_INTRODUCED_0,X_INTRODUCED_9],-7):: defines_var(X_INTRODUCED_9);
constraint int_lin_eq([1,-1],[X_INTRODUCED_1,X_INTRODUCED_10],-4):: defines_var(X_INTRODUCED_10);
constraint int_lin_eq([1,-1],[X_INTRODUCED_2,X_INTRODUCED_11],-3):: defines_var(X_INTRODUCED_11);
constraint int_lin_eq([1,-1],[X_INTRODUCED_3,X_INTRODUCED_12],-3):: defines_var(X_INTRODUCED_12);
constraint int_lin_eq([1,-1],[X_INTRODUCED_4,X_INTRODUCED_13],-2):: defines_var(X_INTRODUCED_13);
constraint int_lin_eq([1,-1],[X_INTRODUCED_5,X_INTRODUCED_14],-2):: defines_var(X_INTRODUCED_14);
constraint int_lin_eq([1,-1],[X_INTRODUCED_6,X_INTRODUCED_15],-3):: defines_var(X_INTRODUCED_15);
constraint int_lin_eq([1,-1],[X_INTRODUCED_7,X_INTRODUCED_16],-3):: defines_var(X_INTRODUCED_16);
solve  minimize X_INTRODUCED_18;
