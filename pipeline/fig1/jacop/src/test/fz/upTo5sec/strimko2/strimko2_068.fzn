predicate jacop_alldiff(array [int] of var int: x);
var 1..4: X_INTRODUCED_0;
var 1..4: X_INTRODUCED_1;
var 1..4: X_INTRODUCED_2;
var 1..4: X_INTRODUCED_3;
var 1..4: X_INTRODUCED_4;
var 1..4: X_INTRODUCED_7;
var 1..4: X_INTRODUCED_8;
var 1..4: X_INTRODUCED_9;
var 1..4: X_INTRODUCED_11;
var 1..4: X_INTRODUCED_12;
var 1..4: X_INTRODUCED_13;
var 1..4: X_INTRODUCED_14;
var 1..4: X_INTRODUCED_15;
array [1..16] of var int: x:: output_array([1..4,1..4]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,3,2,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,1,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15];
array [1..4] of var int: X_INTRODUCED_16 ::var_is_introduced  = [X_INTRODUCED_0,3,1,X_INTRODUCED_15];
array [1..4] of var int: X_INTRODUCED_17 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_4,X_INTRODUCED_8,X_INTRODUCED_12];
array [1..4] of var int: X_INTRODUCED_18 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
constraint jacop_alldiff(X_INTRODUCED_16);
constraint jacop_alldiff([X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_4,X_INTRODUCED_7]);
constraint jacop_alldiff([X_INTRODUCED_8,X_INTRODUCED_11,X_INTRODUCED_13,X_INTRODUCED_14]);
constraint jacop_alldiff([X_INTRODUCED_3,2,X_INTRODUCED_9,X_INTRODUCED_12]);
constraint jacop_alldiff(X_INTRODUCED_17);
constraint jacop_alldiff(X_INTRODUCED_18);
constraint jacop_alldiff([X_INTRODUCED_1,3,X_INTRODUCED_9,X_INTRODUCED_13]);
constraint jacop_alldiff([X_INTRODUCED_4,3,2,X_INTRODUCED_7]);
constraint jacop_alldiff([X_INTRODUCED_2,2,1,X_INTRODUCED_14]);
constraint jacop_alldiff([X_INTRODUCED_8,X_INTRODUCED_9,1,X_INTRODUCED_11]);
constraint jacop_alldiff([X_INTRODUCED_3,X_INTRODUCED_7,X_INTRODUCED_11,X_INTRODUCED_15]);
constraint jacop_alldiff([X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15]);
solve  satisfy;
