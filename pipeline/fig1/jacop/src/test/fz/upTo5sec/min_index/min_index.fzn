var 3..3: X_INTRODUCED_0;
var 2..2: X_INTRODUCED_1;
var 7..7: X_INTRODUCED_2;
var 2..2: X_INTRODUCED_3;
var 6..6: X_INTRODUCED_4;
var 1..5: min_ind:: output_var;
var 1..7: min_val:: output_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var 1..7: X_INTRODUCED_14 ::var_is_introduced ;
var 1..7: X_INTRODUCED_15 ::var_is_introduced ;
var 1..7: X_INTRODUCED_16 ::var_is_introduced ;
var 1..7: X_INTRODUCED_17 ::var_is_introduced ;
var bool: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_22 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_23 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_26 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_31 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_32 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_33 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_35 ::var_is_introduced :: is_defined_var;
array [1..5] of var int: variables:: output_array([1..5]) = [3,2,7,2,6];
constraint int_min(2,3,X_INTRODUCED_14);
constraint int_min(7,X_INTRODUCED_14,X_INTRODUCED_15);
constraint int_min(2,X_INTRODUCED_15,X_INTRODUCED_16);
constraint int_min(6,X_INTRODUCED_16,X_INTRODUCED_17);
constraint array_bool_or([X_INTRODUCED_19,X_INTRODUCED_23,X_INTRODUCED_27,X_INTRODUCED_31,X_INTRODUCED_35],true);
constraint int_eq_reif(min_ind,1,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_eq_reif(min_val,3,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint int_eq_reif(3,X_INTRODUCED_17,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint array_bool_and([X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_18],X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
constraint int_eq_reif(min_ind,2,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint int_eq_reif(min_val,2,X_INTRODUCED_21):: defines_var(X_INTRODUCED_21);
constraint int_eq_reif(2,X_INTRODUCED_17,X_INTRODUCED_22):: defines_var(X_INTRODUCED_22);
constraint array_bool_and([X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_22],X_INTRODUCED_23):: defines_var(X_INTRODUCED_23);
constraint int_eq_reif(min_ind,3,X_INTRODUCED_24):: defines_var(X_INTRODUCED_24);
constraint int_eq_reif(min_val,7,X_INTRODUCED_25):: defines_var(X_INTRODUCED_25);
constraint int_eq_reif(7,X_INTRODUCED_17,X_INTRODUCED_26):: defines_var(X_INTRODUCED_26);
constraint array_bool_and([X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26],X_INTRODUCED_27):: defines_var(X_INTRODUCED_27);
constraint int_eq_reif(min_ind,4,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint int_eq_reif(min_val,2,X_INTRODUCED_29):: defines_var(X_INTRODUCED_29);
constraint int_eq_reif(2,X_INTRODUCED_17,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint array_bool_and([X_INTRODUCED_28,X_INTRODUCED_29,X_INTRODUCED_30],X_INTRODUCED_31):: defines_var(X_INTRODUCED_31);
constraint int_eq_reif(min_ind,5,X_INTRODUCED_32):: defines_var(X_INTRODUCED_32);
constraint int_eq_reif(min_val,6,X_INTRODUCED_33):: defines_var(X_INTRODUCED_33);
constraint int_eq_reif(6,X_INTRODUCED_17,X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint array_bool_and([X_INTRODUCED_32,X_INTRODUCED_33,X_INTRODUCED_34],X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
solve :: int_search([X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,min_ind,min_val],first_fail,indomain_min,complete) satisfy;
