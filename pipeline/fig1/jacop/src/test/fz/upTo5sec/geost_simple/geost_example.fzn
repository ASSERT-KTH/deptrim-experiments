predicate jacop_geost_bb(int: k,array [int,int] of int: rect_size,array [int,int] of int: rect_offset,array [int] of set of int: shape,array [int,int] of var int: x,array [int] of var int: kind,array [int] of int: l,array [int] of int: u);
array [1..4] of set of int: shape = [1..3,4..6,7..7,7..7];
array [1..14] of int: offset = [0,0,0,1,1,2,0,0,0,2,1,1,0,0];
array [1..14] of int: size = [2,1,1,2,3,1,2,1,2,1,1,1,2,3];
array [1..2] of int: X_INTRODUCED_9 = [5,5];
array [1..2] of int: X_INTRODUCED_10 = [0,0];
var 0..5: X_INTRODUCED_0;
var 0..5: X_INTRODUCED_1;
var 0..5: X_INTRODUCED_2;
var 0..5: X_INTRODUCED_3;
var 0..5: X_INTRODUCED_4;
var 0..5: X_INTRODUCED_5;
var 1..4: X_INTRODUCED_6;
var 1..4: X_INTRODUCED_7;
var 1..4: X_INTRODUCED_8;
array [1..6] of var int: x:: output_array([1..3,1..2]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5];
array [1..3] of var int: kind:: output_array([1..3]) = [X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8];
constraint jacop_geost_bb(2,size,offset,shape,x,kind,X_INTRODUCED_10,X_INTRODUCED_9);
solve :: int_search([X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5],input_order,indomain_min,complete) satisfy;
