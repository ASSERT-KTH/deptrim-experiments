array [1..2] of int: X_INTRODUCED_6 = [1,1];
array [1..3] of int: X_INTRODUCED_8 = [1,1,1];
array [1..6] of int: X_INTRODUCED_22 = [1,-8,-6,-5,-2,-2];
var 0..1: X_INTRODUCED_0;
var 0..1: X_INTRODUCED_1;
var 0..1: X_INTRODUCED_2;
var 0..1: X_INTRODUCED_3;
var 0..1: X_INTRODUCED_4;
var 0..23: total:: output_var:: is_defined_var;
array [1..5] of var int: x:: output_array([1..5]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4];
constraint int_lin_le(X_INTRODUCED_6,[X_INTRODUCED_0,X_INTRODUCED_2],1);
constraint int_lin_le(X_INTRODUCED_8,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_3],1);
constraint int_lin_le(X_INTRODUCED_6,[X_INTRODUCED_0,X_INTRODUCED_1],1);
constraint int_lin_le(X_INTRODUCED_6,[X_INTRODUCED_2,X_INTRODUCED_4],1);
constraint int_lin_le(X_INTRODUCED_6,[X_INTRODUCED_1,X_INTRODUCED_4],1);
constraint int_lin_eq(X_INTRODUCED_22,[total,X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4],0):: defines_var(total);
solve :: int_search(x,first_fail,indomain_min,complete) maximize total;
