array [1..5] of int: X_INTRODUCED_6 = [1,-12,-2,-10,-11];
var bool: t:: output_var;
var bool: h:: output_var;
var bool: r:: output_var;
var bool: s:: output_var;
var bool: n:: output_var;
var 0..35: cost:: output_var:: is_defined_var;
var 0..1: X_INTRODUCED_0 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
constraint int_lin_eq(X_INTRODUCED_6,[cost,X_INTRODUCED_3,X_INTRODUCED_2,X_INTRODUCED_1,X_INTRODUCED_0],0):: defines_var(cost);
constraint bool_clause([t,s,n],[h,r]);
constraint bool_clause([n,X_INTRODUCED_10],[X_INTRODUCED_9]);
constraint bool_clause([r,n],[t]);
constraint bool2int(n,X_INTRODUCED_0):: defines_var(X_INTRODUCED_0);
constraint bool2int(t,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint bool2int(h,X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint bool2int(s,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint array_bool_or([r,s],X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint array_bool_or([t,h],X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
solve  minimize cost;
