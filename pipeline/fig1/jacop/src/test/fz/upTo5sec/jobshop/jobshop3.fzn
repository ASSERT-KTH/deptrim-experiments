predicate jacop_maximum(var int: m,array [int] of var int: x);
predicate jacop_list_diff2(array [int] of var int: x,array [int] of var int: y,array [int] of var int: lx,array [int] of var int: ly);
array [1..2] of int: X_INTRODUCED_19 = [1,-1];
array [1..3] of int: X_INTRODUCED_28 = [3,4,3];
array [1..3] of int: X_INTRODUCED_30 = [1,1,1];
array [1..3] of int: X_INTRODUCED_31 = [0,0,0];
array [1..3] of int: X_INTRODUCED_32 = [3,2,3];
array [1..3] of int: X_INTRODUCED_34 = [4,3,4];
array [1..3] of int: X_INTRODUCED_36 = [4,2,3];
var 0..38: X_INTRODUCED_0;
var 0..38: X_INTRODUCED_1;
var 0..38: X_INTRODUCED_2;
var 0..38: X_INTRODUCED_3;
var 0..38: X_INTRODUCED_4;
var 0..38: X_INTRODUCED_5;
var 0..38: X_INTRODUCED_6;
var 0..38: X_INTRODUCED_7;
var 0..38: X_INTRODUCED_8;
var 0..38: X_INTRODUCED_9;
var 0..38: X_INTRODUCED_10;
var 0..38: X_INTRODUCED_11;
var 4..42: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var 2..40: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var 4..42: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var 2..38: X_INTRODUCED_17 ::var_is_introduced ;
array [1..12] of var int: s:: output_array([1..3,1..4]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11];
array [1..3] of var int: X_INTRODUCED_16 ::var_is_introduced  = [X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15];
array [1..3] of var int: X_INTRODUCED_29 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_4,X_INTRODUCED_10];
array [1..3] of var int: X_INTRODUCED_33 ::var_is_introduced  = [X_INTRODUCED_1,X_INTRODUCED_6,X_INTRODUCED_9];
array [1..3] of var int: X_INTRODUCED_35 ::var_is_introduced  = [X_INTRODUCED_2,X_INTRODUCED_5,X_INTRODUCED_11];
array [1..3] of var int: X_INTRODUCED_37 ::var_is_introduced  = [X_INTRODUCED_3,X_INTRODUCED_7,X_INTRODUCED_8];
constraint jacop_maximum(X_INTRODUCED_17,X_INTRODUCED_16);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_0,X_INTRODUCED_1],-3);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_1,X_INTRODUCED_2],-3);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_2,X_INTRODUCED_3],-4);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_4,X_INTRODUCED_5],-4);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_5,X_INTRODUCED_6],-3);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_6,X_INTRODUCED_7],-2);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_8,X_INTRODUCED_9],-3);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_9,X_INTRODUCED_10],-3);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_10,X_INTRODUCED_11],-3);
constraint jacop_list_diff2(X_INTRODUCED_29,X_INTRODUCED_31,X_INTRODUCED_28,X_INTRODUCED_30);
constraint jacop_list_diff2(X_INTRODUCED_33,X_INTRODUCED_31,X_INTRODUCED_32,X_INTRODUCED_30);
constraint jacop_list_diff2(X_INTRODUCED_35,X_INTRODUCED_31,X_INTRODUCED_34,X_INTRODUCED_30);
constraint jacop_list_diff2(X_INTRODUCED_37,X_INTRODUCED_31,X_INTRODUCED_36,X_INTRODUCED_30);
constraint int_lin_eq([1,-1],[X_INTRODUCED_3,X_INTRODUCED_13],-4):: defines_var(X_INTRODUCED_13);
constraint int_lin_eq([1,-1],[X_INTRODUCED_7,X_INTRODUCED_14],-2):: defines_var(X_INTRODUCED_14);
constraint int_lin_eq([1,-1],[X_INTRODUCED_11,X_INTRODUCED_15],-4):: defines_var(X_INTRODUCED_15);
solve  minimize X_INTRODUCED_17;
