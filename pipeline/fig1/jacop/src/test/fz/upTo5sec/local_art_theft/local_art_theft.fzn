array [1..6] of int: X_INTRODUCED_25 = [-1,-1,-1,-1,-1,-1];
array [1..4] of int: X_INTRODUCED_33 = [1,-1,-1,-1];
var bool: X_INTRODUCED_0;
var bool: X_INTRODUCED_1;
var bool: X_INTRODUCED_2;
var bool: X_INTRODUCED_3;
var bool: X_INTRODUCED_4;
var bool: X_INTRODUCED_5;
var 2..3: X_INTRODUCED_6:: is_defined_var;
var 2..3: X_INTRODUCED_7:: is_defined_var;
var 2..3: X_INTRODUCED_8:: is_defined_var;
var 2..3: X_INTRODUCED_9:: is_defined_var;
var 2..3: X_INTRODUCED_10:: is_defined_var;
var 2..3: X_INTRODUCED_11:: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_22 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_23 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_26 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_31 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_35 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_37 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_41 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_42 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_44 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_46 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_48 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_50 ::var_is_introduced :: is_defined_var;
array [1..6] of var bool: b:: output_array([1..6]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5];
array [1..6] of var int: counts:: output_array([1..6]) = [X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11];
constraint int_lin_eq(X_INTRODUCED_25,[X_INTRODUCED_13,X_INTRODUCED_15,X_INTRODUCED_17,X_INTRODUCED_19,X_INTRODUCED_21,X_INTRODUCED_23],-4);
constraint int_lin_eq(X_INTRODUCED_33,[X_INTRODUCED_6,X_INTRODUCED_27,X_INTRODUCED_29,X_INTRODUCED_31],0):: defines_var(X_INTRODUCED_6);
constraint bool_clause([X_INTRODUCED_34],[X_INTRODUCED_0]);
constraint int_lin_eq(X_INTRODUCED_33,[X_INTRODUCED_7,X_INTRODUCED_36,X_INTRODUCED_38,X_INTRODUCED_31],0):: defines_var(X_INTRODUCED_7);
constraint bool_clause([X_INTRODUCED_40],[X_INTRODUCED_1]);
constraint int_lin_eq(X_INTRODUCED_33,[X_INTRODUCED_8,X_INTRODUCED_27,X_INTRODUCED_31,X_INTRODUCED_42],0):: defines_var(X_INTRODUCED_8);
constraint bool_clause([X_INTRODUCED_44],[X_INTRODUCED_2]);
constraint int_lin_eq(X_INTRODUCED_33,[X_INTRODUCED_9,X_INTRODUCED_36,X_INTRODUCED_38,X_INTRODUCED_42],0):: defines_var(X_INTRODUCED_9);
constraint bool_clause([X_INTRODUCED_46],[X_INTRODUCED_3]);
constraint int_lin_eq(X_INTRODUCED_33,[X_INTRODUCED_10,X_INTRODUCED_38,X_INTRODUCED_29,X_INTRODUCED_42],0):: defines_var(X_INTRODUCED_10);
constraint bool_clause([X_INTRODUCED_48],[X_INTRODUCED_4]);
constraint int_lin_eq(X_INTRODUCED_33,[X_INTRODUCED_11,X_INTRODUCED_36,X_INTRODUCED_38,X_INTRODUCED_29],0):: defines_var(X_INTRODUCED_11);
constraint bool_clause([X_INTRODUCED_50],[X_INTRODUCED_5]);
constraint int_eq_reif(X_INTRODUCED_6,2,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint bool2int(X_INTRODUCED_12,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
constraint int_eq_reif(X_INTRODUCED_7,2,X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
constraint bool2int(X_INTRODUCED_14,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint int_eq_reif(X_INTRODUCED_8,2,X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint bool2int(X_INTRODUCED_16,X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint int_eq_reif(X_INTRODUCED_9,2,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint bool2int(X_INTRODUCED_18,X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
constraint int_eq_reif(X_INTRODUCED_10,2,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint bool2int(X_INTRODUCED_20,X_INTRODUCED_21):: defines_var(X_INTRODUCED_21);
constraint int_eq_reif(X_INTRODUCED_11,2,X_INTRODUCED_22):: defines_var(X_INTRODUCED_22);
constraint bool2int(X_INTRODUCED_22,X_INTRODUCED_23):: defines_var(X_INTRODUCED_23);
constraint bool_eq_reif(X_INTRODUCED_1,false,X_INTRODUCED_26):: defines_var(X_INTRODUCED_26);
constraint bool2int(X_INTRODUCED_26,X_INTRODUCED_27):: defines_var(X_INTRODUCED_27);
constraint bool_eq_reif(X_INTRODUCED_3,false,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint bool2int(X_INTRODUCED_28,X_INTRODUCED_29):: defines_var(X_INTRODUCED_29);
constraint bool_eq_reif(X_INTRODUCED_4,false,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint bool2int(X_INTRODUCED_30,X_INTRODUCED_31):: defines_var(X_INTRODUCED_31);
constraint array_bool_and([X_INTRODUCED_26,X_INTRODUCED_28,X_INTRODUCED_30],X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint bool_eq_reif(X_INTRODUCED_0,false,X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
constraint bool2int(X_INTRODUCED_35,X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint bool_eq_reif(X_INTRODUCED_2,false,X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
constraint bool2int(X_INTRODUCED_37,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint array_bool_and([X_INTRODUCED_30,X_INTRODUCED_35,X_INTRODUCED_37],X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
constraint bool_eq_reif(X_INTRODUCED_5,false,X_INTRODUCED_41):: defines_var(X_INTRODUCED_41);
constraint bool2int(X_INTRODUCED_41,X_INTRODUCED_42):: defines_var(X_INTRODUCED_42);
constraint array_bool_and([X_INTRODUCED_26,X_INTRODUCED_30,X_INTRODUCED_41],X_INTRODUCED_44):: defines_var(X_INTRODUCED_44);
constraint array_bool_and([X_INTRODUCED_35,X_INTRODUCED_37,X_INTRODUCED_41],X_INTRODUCED_46):: defines_var(X_INTRODUCED_46);
constraint array_bool_and([X_INTRODUCED_28,X_INTRODUCED_37,X_INTRODUCED_41],X_INTRODUCED_48):: defines_var(X_INTRODUCED_48);
constraint array_bool_and([X_INTRODUCED_28,X_INTRODUCED_35,X_INTRODUCED_37],X_INTRODUCED_50):: defines_var(X_INTRODUCED_50);
solve  satisfy;
