array [1..2] of int: X_INTRODUCED_0 = [1,-1];
array [1..3] of int: X_INTRODUCED_13 = [1,1,1];
var {1,3,4}: country:: output_var;
var {1,3,4}: grunge:: output_var;
var {1,3,4}: reggae:: output_var;
var 1..4: speed_metal:: output_var;
var 2..4: carnival_games:: output_var;
var 1..4: information_booth:: output_var;
var 1..4: mosh_pit:: output_var;
var 1..4: T_shirt_vendor:: output_var;
var bool: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
array [1..4] of var int: genre = [country,grunge,reggae,speed_metal];
array [1..4] of var int: rendevouz = [carnival_games,information_booth,mosh_pit,T_shirt_vendor];
constraint int_lin_ne(X_INTRODUCED_0,[reggae,information_booth],0);
constraint array_bool_or([X_INTRODUCED_3,X_INTRODUCED_6],true);
constraint int_lin_eq(X_INTRODUCED_13,[X_INTRODUCED_12,X_INTRODUCED_10,X_INTRODUCED_8],2);
constraint int_lin_ne(X_INTRODUCED_0,[reggae,T_shirt_vendor],0);
constraint int_lin_ne(X_INTRODUCED_0,[carnival_games,information_booth],0);
constraint int_lin_ne(X_INTRODUCED_0,[carnival_games,mosh_pit],0);
constraint int_lin_ne(X_INTRODUCED_0,[carnival_games,T_shirt_vendor],0);
constraint int_lin_ne(X_INTRODUCED_0,[information_booth,mosh_pit],0);
constraint int_lin_ne(X_INTRODUCED_0,[information_booth,T_shirt_vendor],0);
constraint int_lin_ne(X_INTRODUCED_0,[mosh_pit,T_shirt_vendor],0);
constraint int_lin_ne(X_INTRODUCED_0,[country,grunge],0);
constraint int_lin_ne(X_INTRODUCED_0,[country,reggae],0);
constraint int_lin_ne(X_INTRODUCED_0,[country,speed_metal],0);
constraint int_lin_ne(X_INTRODUCED_0,[grunge,reggae],0);
constraint int_lin_ne(X_INTRODUCED_0,[grunge,speed_metal],0);
constraint int_lin_ne(X_INTRODUCED_0,[reggae,speed_metal],0);
constraint int_eq_reif(country,mosh_pit,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint int_eq_reif(speed_metal,3,X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint array_bool_and([X_INTRODUCED_1,X_INTRODUCED_2],X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint int_eq_reif(speed_metal,mosh_pit,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint int_eq_reif(country,3,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint array_bool_and([X_INTRODUCED_4,X_INTRODUCED_5],X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint int_ne_reif(T_shirt_vendor,4,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint bool2int(X_INTRODUCED_7,X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint int_eq_reif(grunge,1,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint bool2int(X_INTRODUCED_9,X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint int_ne_reif(information_booth,3,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint bool2int(X_INTRODUCED_11,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
solve  satisfy;
