predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..2] of int: X_INTRODUCED_17 = [1,-1];
array [1..4] of int: X_INTRODUCED_30 = [9,8,5,1];
array [1..4] of int: X_INTRODUCED_31 = [9,9,100,9];
array [1..6] of int: X_INTRODUCED_33 = [4,3,5,5,2,3];
array [1..6] of int: X_INTRODUCED_34 = [3,3,175,25,225,8];
array [1..3] of int: X_INTRODUCED_36 = [10,4,7];
array [1..3] of int: X_INTRODUCED_37 = [125,9,1];
var 0..1025: X_INTRODUCED_0;
var 0..1025: X_INTRODUCED_1;
var 0..1025: X_INTRODUCED_2;
var 0..1025: X_INTRODUCED_3;
var 0..1025: X_INTRODUCED_4;
var 0..1025: X_INTRODUCED_5;
var 0..1025: X_INTRODUCED_6;
var 0..1025: X_INTRODUCED_7;
var 0..1025: X_INTRODUCED_8;
var 0..1025: X_INTRODUCED_9;
var 0..1025: X_INTRODUCED_10;
var 0..1025: X_INTRODUCED_11;
var 0..1025: X_INTRODUCED_12;
var 0..1025: X_INTRODUCED_13;
var 0..1025: X_INTRODUCED_14;
var 0..1026: objective:: output_var;
var bool: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
array [1..15] of var int: s:: output_array([1..15]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14];
array [1..4] of var int: X_INTRODUCED_32 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_2,X_INTRODUCED_10,X_INTRODUCED_12];
array [1..6] of var int: X_INTRODUCED_35 ::var_is_introduced  = [X_INTRODUCED_1,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_6,X_INTRODUCED_8,X_INTRODUCED_11];
array [1..3] of var int: X_INTRODUCED_38 ::var_is_introduced  = [X_INTRODUCED_7,X_INTRODUCED_13,X_INTRODUCED_14];
array [1..16] of var int: X_INTRODUCED_45 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,objective];
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_4],-9);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_10],-9);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_1,X_INTRODUCED_3],-3);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_1,X_INTRODUCED_5],-3);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_7],-9);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_9],-9);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_4,X_INTRODUCED_8],-175);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_5,X_INTRODUCED_6],-250);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_5,X_INTRODUCED_11],-250);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_5,X_INTRODUCED_12],-250);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_6,X_INTRODUCED_14],-25);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_7,X_INTRODUCED_12],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_7,X_INTRODUCED_13],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_9,X_INTRODUCED_14],-75);
constraint array_bool_or([X_INTRODUCED_27,X_INTRODUCED_28],true);
constraint jacop_cumulative(X_INTRODUCED_32,X_INTRODUCED_31,X_INTRODUCED_30,18);
constraint jacop_cumulative(X_INTRODUCED_35,X_INTRODUCED_34,X_INTRODUCED_33,19);
constraint jacop_cumulative(X_INTRODUCED_38,X_INTRODUCED_37,X_INTRODUCED_36,14);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_3,objective],-3);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_8,objective],-225);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_10,objective],-100);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_11,objective],-8);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_12,objective],-9);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_13,objective],-9);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_14,objective],-1);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_14,X_INTRODUCED_7],-1,X_INTRODUCED_27):: defines_var(X_INTRODUCED_27);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_7,X_INTRODUCED_14],-125,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
solve :: int_search(X_INTRODUCED_45,smallest,indomain_min,complete) minimize objective;
