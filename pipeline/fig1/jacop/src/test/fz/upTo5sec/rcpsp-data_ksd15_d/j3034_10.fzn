predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..2] of int: X_INTRODUCED_17 = [1,-1];
array [1..4] of int: X_INTRODUCED_39 = [3,6,2,8];
array [1..4] of int: X_INTRODUCED_40 = [7,200,25,6];
array [1..7] of int: X_INTRODUCED_42 = [4,5,5,9,5,2,7];
array [1..7] of int: X_INTRODUCED_43 = [7,10,1,150,175,250,4];
array [1..2] of int: X_INTRODUCED_45 = [6,7];
array [1..2] of int: X_INTRODUCED_46 = [200,3];
var 0..1141: X_INTRODUCED_0;
var 0..1141: X_INTRODUCED_1;
var 0..1141: X_INTRODUCED_2;
var 0..1141: X_INTRODUCED_3;
var 0..1141: X_INTRODUCED_4;
var 0..1141: X_INTRODUCED_5;
var 0..1141: X_INTRODUCED_6;
var 0..1141: X_INTRODUCED_7;
var 0..1141: X_INTRODUCED_8;
var 0..1141: X_INTRODUCED_9;
var 0..1141: X_INTRODUCED_10;
var 0..1141: X_INTRODUCED_11;
var 0..1141: X_INTRODUCED_12;
var 0..1141: X_INTRODUCED_13;
var 0..1141: X_INTRODUCED_14;
var 0..1142: objective:: output_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_31 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_33 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_37 ::var_is_introduced :: is_defined_var;
array [1..15] of var int: s:: output_array([1..15]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14];
array [1..4] of var int: X_INTRODUCED_41 ::var_is_introduced  = [X_INTRODUCED_2,X_INTRODUCED_5,X_INTRODUCED_9,X_INTRODUCED_13];
array [1..7] of var int: X_INTRODUCED_44 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_12];
array [1..2] of var int: X_INTRODUCED_47 ::var_is_introduced  = [X_INTRODUCED_8,X_INTRODUCED_11];
array [1..16] of var int: X_INTRODUCED_49 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,objective];
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_6],-7);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_8],-7);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_13],-7);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_1,X_INTRODUCED_3],-10);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_1,X_INTRODUCED_4],-10);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_1,X_INTRODUCED_8],-10);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_4],-7);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_5],-7);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_10],-7);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_3,X_INTRODUCED_10],-1);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_3,X_INTRODUCED_11],-1);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_3,X_INTRODUCED_12],-1);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_4,X_INTRODUCED_7],-150);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_5,X_INTRODUCED_9],-200);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_5,X_INTRODUCED_12],-200);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_6,X_INTRODUCED_10],-175);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_6,X_INTRODUCED_11],-175);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_7,X_INTRODUCED_13],-250);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_7,X_INTRODUCED_14],-250);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_8,X_INTRODUCED_14],-200);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_9,X_INTRODUCED_11],-25);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_9,X_INTRODUCED_13],-25);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_10,X_INTRODUCED_14],-100);
constraint array_bool_or([X_INTRODUCED_30,X_INTRODUCED_31],true);
constraint array_bool_or([X_INTRODUCED_33,X_INTRODUCED_34],true);
constraint array_bool_or([X_INTRODUCED_36,X_INTRODUCED_37],true);
constraint jacop_cumulative(X_INTRODUCED_41,X_INTRODUCED_40,X_INTRODUCED_39,13);
constraint jacop_cumulative(X_INTRODUCED_44,X_INTRODUCED_43,X_INTRODUCED_42,15);
constraint jacop_cumulative(X_INTRODUCED_47,X_INTRODUCED_46,X_INTRODUCED_45,11);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_11,objective],-3);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_12,objective],-4);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_13,objective],-6);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_14,objective],-4);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_12,X_INTRODUCED_4],-4,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_4,X_INTRODUCED_12],-150,X_INTRODUCED_31):: defines_var(X_INTRODUCED_31);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_13,X_INTRODUCED_5],-6,X_INTRODUCED_33):: defines_var(X_INTRODUCED_33);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_5,X_INTRODUCED_13],-200,X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_11,X_INTRODUCED_8],-3,X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_8,X_INTRODUCED_11],-200,X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
solve :: int_search(X_INTRODUCED_49,smallest,indomain_min,complete) minimize objective;
