predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..2] of int: X_INTRODUCED_17 = [1,-1];
array [1..4] of int: X_INTRODUCED_25 = [2,3,9,2];
array [1..4] of int: X_INTRODUCED_26 = [250,125,175,250];
array [1..5] of int: X_INTRODUCED_28 = [8,10,7,5,9];
array [1..5] of int: X_INTRODUCED_29 = [10,7,8,10,5];
array [1..5] of int: X_INTRODUCED_31 = [3,5,7,7,2];
array [1..5] of int: X_INTRODUCED_32 = [3,7,5,125,100];
var 0..1304: X_INTRODUCED_0;
var 0..1304: X_INTRODUCED_1;
var 0..1304: X_INTRODUCED_2;
var 0..1304: X_INTRODUCED_3;
var 0..1304: X_INTRODUCED_4;
var 0..1304: X_INTRODUCED_5;
var 0..1304: X_INTRODUCED_6;
var 0..1304: X_INTRODUCED_7;
var 0..1304: X_INTRODUCED_8;
var 0..1304: X_INTRODUCED_9;
var 0..1304: X_INTRODUCED_10;
var 0..1304: X_INTRODUCED_11;
var 0..1304: X_INTRODUCED_12;
var 0..1304: X_INTRODUCED_13;
var 0..1304: X_INTRODUCED_14;
var 0..1305: objective:: output_var;
array [1..15] of var int: s:: output_array([1..15]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14];
array [1..4] of var int: X_INTRODUCED_27 ::var_is_introduced  = [X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_9,X_INTRODUCED_10];
array [1..5] of var int: X_INTRODUCED_30 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14];
array [1..5] of var int: X_INTRODUCED_33 ::var_is_introduced  = [X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_8];
array [1..16] of var int: X_INTRODUCED_43 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,objective];
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_7],-10);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_12],-10);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_1,X_INTRODUCED_4],-3);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_1,X_INTRODUCED_9],-3);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_3],-7);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_5],-7);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_8],-7);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_4,X_INTRODUCED_6],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_4,X_INTRODUCED_13],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_6,X_INTRODUCED_10],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_6,X_INTRODUCED_11],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_7,X_INTRODUCED_11],-225);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_7,X_INTRODUCED_13],-225);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_7,X_INTRODUCED_14],-225);
constraint jacop_cumulative(X_INTRODUCED_27,X_INTRODUCED_26,X_INTRODUCED_25,14);
constraint jacop_cumulative(X_INTRODUCED_30,X_INTRODUCED_29,X_INTRODUCED_28,28);
constraint jacop_cumulative(X_INTRODUCED_33,X_INTRODUCED_32,X_INTRODUCED_31,16);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_3,objective],-5);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_5,objective],-250);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_8,objective],-100);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_9,objective],-175);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_10,objective],-250);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_11,objective],-7);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_12,objective],-8);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_13,objective],-10);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_14,objective],-5);
solve :: int_search(X_INTRODUCED_43,smallest,indomain_min,complete) minimize objective;
