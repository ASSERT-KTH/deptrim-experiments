predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..2] of int: X_INTRODUCED_17 = [1,-1];
array [1..11] of int: X_INTRODUCED_28 = [2,2,7,5,4,5,2,10,1,7,3];
array [1..11] of int: X_INTRODUCED_29 = [8,5,9,3,150,250,125,175,3,2,6];
array [1..10] of int: X_INTRODUCED_31 = [3,3,1,8,10,7,3,6,7,10];
array [1..10] of int: X_INTRODUCED_32 = [8,5,3,150,200,25,125,175,2,6];
array [1..4] of int: X_INTRODUCED_34 = [3,1,4,6];
array [1..4] of int: X_INTRODUCED_35 = [8,150,10,3];
array [1..6] of int: X_INTRODUCED_37 = [8,1,1,5,8,4];
array [1..6] of int: X_INTRODUCED_38 = [8,5,3,200,175,6];
var 0..1170: X_INTRODUCED_0;
var 0..1170: X_INTRODUCED_1;
var 0..1170: X_INTRODUCED_2;
var 0..1170: X_INTRODUCED_3;
var 0..1170: X_INTRODUCED_4;
var 0..1170: X_INTRODUCED_5;
var 0..1170: X_INTRODUCED_6;
var 0..1170: X_INTRODUCED_7;
var 0..1170: X_INTRODUCED_8;
var 0..1170: X_INTRODUCED_9;
var 0..1170: X_INTRODUCED_10;
var 0..1170: X_INTRODUCED_11;
var 0..1170: X_INTRODUCED_12;
var 0..1170: X_INTRODUCED_13;
var 0..1170: X_INTRODUCED_14;
var 0..1171: objective:: output_var;
array [1..15] of var int: s:: output_array([1..15]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14];
array [1..11] of var int: X_INTRODUCED_30 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_7,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14];
array [1..10] of var int: X_INTRODUCED_33 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_13,X_INTRODUCED_14];
array [1..4] of var int: X_INTRODUCED_36 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_4,X_INTRODUCED_11,X_INTRODUCED_12];
array [1..6] of var int: X_INTRODUCED_39 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_3,X_INTRODUCED_6,X_INTRODUCED_10,X_INTRODUCED_14];
array [1..16] of var int: X_INTRODUCED_46 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,objective];
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_3],-8);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_1,X_INTRODUCED_8],-5);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_6],-9);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_7],-9);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_10],-9);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_3,X_INTRODUCED_4],-3);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_3,X_INTRODUCED_14],-3);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_4,X_INTRODUCED_5],-150);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_5,X_INTRODUCED_7],-200);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_6,X_INTRODUCED_12],-200);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_7,X_INTRODUCED_13],-250);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_8,X_INTRODUCED_9],-25);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_8,X_INTRODUCED_11],-25);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_8,X_INTRODUCED_13],-25);
constraint jacop_cumulative(X_INTRODUCED_30,X_INTRODUCED_29,X_INTRODUCED_28,20);
constraint jacop_cumulative(X_INTRODUCED_33,X_INTRODUCED_32,X_INTRODUCED_31,26);
constraint jacop_cumulative(X_INTRODUCED_36,X_INTRODUCED_35,X_INTRODUCED_34,12);
constraint jacop_cumulative(X_INTRODUCED_39,X_INTRODUCED_38,X_INTRODUCED_37,17);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_9,objective],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_10,objective],-175);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_11,objective],-10);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_12,objective],-3);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_13,objective],-2);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_14,objective],-6);
solve :: int_search(X_INTRODUCED_46,smallest,indomain_min,complete) minimize objective;
