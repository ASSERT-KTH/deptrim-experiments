predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..2] of int: X_INTRODUCED_17 = [1,-1];
array [1..13] of int: X_INTRODUCED_24 = [8,10,5,1,2,8,6,1,3,1,6,6,2];
array [1..13] of int: X_INTRODUCED_25 = [1,10,10,50,225,225,175,125,125,25,6,7,4];
array [1..12] of int: X_INTRODUCED_27 = [7,9,9,1,9,10,6,10,8,1,2,6];
array [1..12] of int: X_INTRODUCED_28 = [1,6,10,50,225,225,175,125,125,9,6,7];
array [1..12] of int: X_INTRODUCED_30 = [9,3,8,7,7,6,9,6,8,10,9,8];
array [1..12] of int: X_INTRODUCED_31 = [6,10,10,50,225,225,175,125,125,25,6,4];
var 0..1002: X_INTRODUCED_0;
var 0..1002: X_INTRODUCED_1;
var 0..1002: X_INTRODUCED_2;
var 0..1002: X_INTRODUCED_3;
var 0..1002: X_INTRODUCED_4;
var 0..1002: X_INTRODUCED_5;
var 0..1002: X_INTRODUCED_6;
var 0..1002: X_INTRODUCED_7;
var 0..1002: X_INTRODUCED_8;
var 0..1002: X_INTRODUCED_9;
var 0..1002: X_INTRODUCED_10;
var 0..1002: X_INTRODUCED_11;
var 0..1002: X_INTRODUCED_12;
var 0..1002: X_INTRODUCED_13;
var 0..1002: X_INTRODUCED_14;
var 0..1003: objective:: output_var;
array [1..15] of var int: s:: output_array([1..15]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14];
array [1..13] of var int: X_INTRODUCED_26 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14];
array [1..12] of var int: X_INTRODUCED_29 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13];
array [1..12] of var int: X_INTRODUCED_32 ::var_is_introduced  = [X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_12,X_INTRODUCED_14];
array [1..16] of var int: X_INTRODUCED_43 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,objective];
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_3],-1);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_4],-1);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_8],-1);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_7],-10);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_12],-10);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_3,X_INTRODUCED_6],-10);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_4,X_INTRODUCED_5],-50);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_4,X_INTRODUCED_9],-50);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_4,X_INTRODUCED_13],-50);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_8,X_INTRODUCED_10],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_8,X_INTRODUCED_11],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_8,X_INTRODUCED_14],-125);
constraint jacop_cumulative(X_INTRODUCED_26,X_INTRODUCED_25,X_INTRODUCED_24,39);
constraint jacop_cumulative(X_INTRODUCED_29,X_INTRODUCED_28,X_INTRODUCED_27,51);
constraint jacop_cumulative(X_INTRODUCED_32,X_INTRODUCED_31,X_INTRODUCED_30,44);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_1,objective],-6);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_5,objective],-225);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_6,objective],-225);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_7,objective],-175);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_9,objective],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_10,objective],-25);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_11,objective],-9);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_12,objective],-6);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_13,objective],-7);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_14,objective],-4);
solve :: int_search(X_INTRODUCED_43,smallest,indomain_min,complete) minimize objective;
