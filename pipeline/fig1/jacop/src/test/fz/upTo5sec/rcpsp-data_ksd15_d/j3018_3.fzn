predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..2] of int: X_INTRODUCED_17 = [1,-1];
array [1..5] of int: X_INTRODUCED_42 = [4,6,7,1,1];
array [1..5] of int: X_INTRODUCED_43 = [10,8,25,200,1];
array [1..3] of int: X_INTRODUCED_45 = [4,1,7];
array [1..3] of int: X_INTRODUCED_46 = [1,125,150];
array [1..5] of int: X_INTRODUCED_48 = [5,6,10,10,6];
array [1..5] of int: X_INTRODUCED_49 = [5,200,150,6,6];
var 0..1117: X_INTRODUCED_0;
var 0..1117: X_INTRODUCED_1;
var 0..1117: X_INTRODUCED_2;
var 0..1117: X_INTRODUCED_3;
var 0..1117: X_INTRODUCED_4;
var 0..1117: X_INTRODUCED_5;
var 0..1117: X_INTRODUCED_6;
var 0..1117: X_INTRODUCED_7;
var 0..1117: X_INTRODUCED_8;
var 0..1117: X_INTRODUCED_9;
var 0..1117: X_INTRODUCED_10;
var 0..1117: X_INTRODUCED_11;
var 0..1117: X_INTRODUCED_12;
var 0..1117: X_INTRODUCED_13;
var 0..1117: X_INTRODUCED_14;
var 0..1118: objective:: output_var;
var bool: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_31 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_33 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_37 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_39 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
array [1..15] of var int: s:: output_array([1..15]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14];
array [1..5] of var int: X_INTRODUCED_44 ::var_is_introduced  = [X_INTRODUCED_1,X_INTRODUCED_3,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_13];
array [1..3] of var int: X_INTRODUCED_47 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_4,X_INTRODUCED_10];
array [1..5] of var int: X_INTRODUCED_50 ::var_is_introduced  = [X_INTRODUCED_2,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_11,X_INTRODUCED_12];
array [1..16] of var int: X_INTRODUCED_55 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,objective];
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_4],-1);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_5],-1);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_0,X_INTRODUCED_14],-1);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_1,X_INTRODUCED_6],-10);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_3],-5);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_6],-5);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_3,X_INTRODUCED_8],-8);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_4,X_INTRODUCED_9],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_4,X_INTRODUCED_10],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_4,X_INTRODUCED_13],-125);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_5,X_INTRODUCED_7],-225);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_7,X_INTRODUCED_11],-200);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_8,X_INTRODUCED_9],-200);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_8,X_INTRODUCED_12],-200);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_9,X_INTRODUCED_11],-150);
constraint array_bool_or([X_INTRODUCED_27,X_INTRODUCED_28],true);
constraint array_bool_or([X_INTRODUCED_30,X_INTRODUCED_31],true);
constraint array_bool_or([X_INTRODUCED_33,X_INTRODUCED_34],true);
constraint array_bool_or([X_INTRODUCED_37,X_INTRODUCED_38],true);
constraint array_bool_or([X_INTRODUCED_39,X_INTRODUCED_40],true);
constraint jacop_cumulative(X_INTRODUCED_44,X_INTRODUCED_43,X_INTRODUCED_42,16);
constraint jacop_cumulative(X_INTRODUCED_47,X_INTRODUCED_46,X_INTRODUCED_45,11);
constraint jacop_cumulative(X_INTRODUCED_50,X_INTRODUCED_49,X_INTRODUCED_48,13);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_6,objective],-25);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_10,objective],-150);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_11,objective],-6);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_12,objective],-6);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_13,objective],-1);
constraint int_lin_le(X_INTRODUCED_17,[X_INTRODUCED_14,objective],-6);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_9,X_INTRODUCED_2],-150,X_INTRODUCED_27):: defines_var(X_INTRODUCED_27);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_9],-5,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_11,X_INTRODUCED_2],-6,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_2,X_INTRODUCED_11],-5,X_INTRODUCED_31):: defines_var(X_INTRODUCED_31);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_11,X_INTRODUCED_8],-6,X_INTRODUCED_33):: defines_var(X_INTRODUCED_33);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_8,X_INTRODUCED_11],-200,X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_12,X_INTRODUCED_9],-6,X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_9,X_INTRODUCED_12],-150,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_12,X_INTRODUCED_11],-6,X_INTRODUCED_39):: defines_var(X_INTRODUCED_39);
constraint int_lin_le_reif(X_INTRODUCED_17,[X_INTRODUCED_11,X_INTRODUCED_12],-6,X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
solve :: int_search(X_INTRODUCED_55,smallest,indomain_min,complete) minimize objective;
