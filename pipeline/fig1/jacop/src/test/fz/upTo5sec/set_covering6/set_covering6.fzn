array [1..5] of int: X_INTRODUCED_12 = [1,-50,-20,-15,-15];
array [1..2] of int: X_INTRODUCED_14 = [-1,-1];
array [1..3] of int: X_INTRODUCED_16 = [-1,-1,-1];
var 0..1: X_INTRODUCED_0;
var 0..1: X_INTRODUCED_1;
var 0..1: X_INTRODUCED_2;
var 0..1: X_INTRODUCED_3;
var 0..100: total_cost:: output_var:: is_defined_var;
array [1..4] of var int: x:: output_array([1..4]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
constraint int_lin_eq(X_INTRODUCED_12,[total_cost,X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3],0):: defines_var(total_cost);
constraint int_lin_le(X_INTRODUCED_14,[X_INTRODUCED_0,X_INTRODUCED_2],-1);
constraint int_lin_le(X_INTRODUCED_16,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2],-1);
constraint int_lin_le(X_INTRODUCED_16,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_3],-1);
solve :: int_search(x,largest,indomain_min,complete) minimize total_cost;
