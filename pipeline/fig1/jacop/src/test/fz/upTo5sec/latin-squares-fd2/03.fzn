predicate jacop_alldiff(array [int] of var int: x);
var 1..3: X_INTRODUCED_0;
var 1..3: X_INTRODUCED_1;
var 1..3: X_INTRODUCED_2;
var 1..3: X_INTRODUCED_3;
var 1..3: X_INTRODUCED_4;
var 1..3: X_INTRODUCED_5;
var 1..3: X_INTRODUCED_6;
var 1..3: X_INTRODUCED_7;
var 1..3: X_INTRODUCED_8;
array [1..9] of var int: x:: output_array([1..3,1..3]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8];
array [1..3] of var int: X_INTRODUCED_9 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2];
array [1..3] of var int: X_INTRODUCED_10 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_3,X_INTRODUCED_6];
constraint jacop_alldiff(X_INTRODUCED_9);
constraint jacop_alldiff([X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5]);
constraint jacop_alldiff([X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8]);
constraint jacop_alldiff(X_INTRODUCED_10);
constraint jacop_alldiff([X_INTRODUCED_1,X_INTRODUCED_4,X_INTRODUCED_7]);
constraint jacop_alldiff([X_INTRODUCED_2,X_INTRODUCED_5,X_INTRODUCED_8]);
solve :: int_search([X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8],input_order,indomain_max,complete) satisfy;
