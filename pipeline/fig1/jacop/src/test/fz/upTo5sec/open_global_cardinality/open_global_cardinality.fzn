var set of 1..4: s:: output_var;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_23 ::var_is_introduced :: is_defined_var;
var 0..0: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_51 ::var_is_introduced  = true;
array [1..4] of var int: variables:: output_array([1..4]) = [3,3,8,6];
array [1..6] of var int: values:: output_array([1..3,1..2]) = [3,1,5,0,6,1];
constraint int_lin_eq([-1,-1],[X_INTRODUCED_13,X_INTRODUCED_17],-1);
constraint set_eq(s,2..4);
constraint set_in_reif(1,s,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint array_bool_and([X_INTRODUCED_11],X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint bool2int(X_INTRODUCED_12,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
constraint set_in_reif(2,s,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint array_bool_and([X_INTRODUCED_15],X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint bool2int(X_INTRODUCED_16,X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint set_in_reif(4,s,X_INTRODUCED_23):: defines_var(X_INTRODUCED_23);
constraint bool2int(false,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint array_bool_and([X_INTRODUCED_23],true);
solve  satisfy;
