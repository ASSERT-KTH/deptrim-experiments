array [1..5] of int: X_INTRODUCED_8 = [-1,-1,-1,-1,-1];
var int: X_INTRODUCED_0;
var int: X_INTRODUCED_1;
var int: X_INTRODUCED_2;
var int: X_INTRODUCED_3;
var int: X_INTRODUCED_4;
var int: X_INTRODUCED_5;
var int: X_INTRODUCED_6;
var int: z:: is_defined_var;
array [1..7] of var int: x:: output_array([1..7]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6];
constraint int_lin_le(X_INTRODUCED_8,[X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6],-11);
constraint int_lin_le(X_INTRODUCED_8,[X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5],-16);
constraint int_lin_le(X_INTRODUCED_8,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4],-14);
constraint int_lin_le(X_INTRODUCED_8,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_6],-19);
constraint int_lin_le(X_INTRODUCED_8,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_5,X_INTRODUCED_6],-15);
constraint int_lin_le(X_INTRODUCED_8,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6],-13);
constraint int_lin_le(X_INTRODUCED_8,[X_INTRODUCED_0,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6],-17);
constraint int_le(0,X_INTRODUCED_0);
constraint int_le(0,X_INTRODUCED_1);
constraint int_le(0,X_INTRODUCED_2);
constraint int_le(0,X_INTRODUCED_3);
constraint int_le(0,X_INTRODUCED_4);
constraint int_le(0,X_INTRODUCED_5);
constraint int_le(0,X_INTRODUCED_6);
constraint int_lin_eq([1,1,1,1,1,1,1,-1],[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,z],0):: defines_var(z);
solve :: int_search(x,first_fail,indomain_min,complete) minimize z;
