var set of 1..4: s:: output_var;
var 2..2: n:: output_var;
var 4..4: value:: output_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
array [1..4] of var int: variables:: output_array([1..4]) = [4,2,4,4];
constraint int_lin_le([-1,-1,-1],[X_INTRODUCED_7,X_INTRODUCED_15,X_INTRODUCED_19],-2);
constraint set_eq(s,2..4);
constraint set_in_reif(1,s,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint array_bool_and([X_INTRODUCED_5],X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint bool2int(X_INTRODUCED_6,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint set_in_reif(3,s,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
constraint array_bool_and([X_INTRODUCED_13],X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
constraint bool2int(X_INTRODUCED_14,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint set_in_reif(4,s,X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint array_bool_and([X_INTRODUCED_17],X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint bool2int(X_INTRODUCED_18,X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
solve  satisfy;
