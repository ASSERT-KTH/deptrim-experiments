predicate jacop_alldiff(array [int] of var int: x);
array [1..4] of int: s = [3,2,1,4];
array [1..13] of int: X_INTRODUCED_65 = [1,-3,-6,-9,-2,-4,-6,-1,-2,-3,-1,-2,-3];
var set of 1..3: X_INTRODUCED_0;
var set of 1..3: X_INTRODUCED_7;
var set of 1..3: X_INTRODUCED_8;
var set of 1..3: X_INTRODUCED_11;
var 0..42: cost:: output_var:: is_defined_var;
var set of 1..3: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var set of 1..3: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var set of 1..3: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var set of 1..3: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var set of 1..3: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var set of 1..3: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var set of 1..3: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var set of 1..3: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_33 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_37 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_41 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_42 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_45 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_46 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_47 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_48 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_50 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_51 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_54 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_55 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_56 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_57 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_59 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_60 ::var_is_introduced :: is_defined_var;
array [1..4] of var set of int: bef:: output_array([1..4]) = [X_INTRODUCED_0,X_INTRODUCED_13,X_INTRODUCED_15,X_INTRODUCED_17];
array [1..4] of var set of int: aft:: output_array([1..4]) = [X_INTRODUCED_12,X_INTRODUCED_14,X_INTRODUCED_16,X_INTRODUCED_7];
array [1..4] of var set of int: dur:: output_array([1..4]) = [X_INTRODUCED_8,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_11];
array [1..13] of var int: X_INTRODUCED_64 ::var_is_introduced  = [cost,X_INTRODUCED_21,X_INTRODUCED_25,X_INTRODUCED_29,X_INTRODUCED_34,X_INTRODUCED_38,X_INTRODUCED_42,X_INTRODUCED_46,X_INTRODUCED_48,X_INTRODUCED_51,X_INTRODUCED_55,X_INTRODUCED_57,X_INTRODUCED_60];
constraint jacop_alldiff(s);
constraint set_eq(X_INTRODUCED_7,1..0);
constraint set_eq(X_INTRODUCED_0,1..0);
constraint set_eq(X_INTRODUCED_11,2..2);
constraint set_eq(X_INTRODUCED_8,{1,3});
constraint int_lin_eq(X_INTRODUCED_65,X_INTRODUCED_64,0):: defines_var(cost);
constraint set_union(2..3,X_INTRODUCED_14,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint set_union({1,3},X_INTRODUCED_0,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
constraint set_union(1..2,X_INTRODUCED_16,X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
constraint set_union(2..3,X_INTRODUCED_13,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint set_union(2..2,X_INTRODUCED_7,X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint set_union(1..2,X_INTRODUCED_15,X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint set_intersect(X_INTRODUCED_15,X_INTRODUCED_14,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint set_intersect(X_INTRODUCED_17,X_INTRODUCED_16,X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
constraint set_in_reif(1,X_INTRODUCED_8,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint bool2int(X_INTRODUCED_20,X_INTRODUCED_21):: defines_var(X_INTRODUCED_21);
constraint set_in_reif(2,X_INTRODUCED_8,X_INTRODUCED_24):: defines_var(X_INTRODUCED_24);
constraint bool2int(X_INTRODUCED_24,X_INTRODUCED_25):: defines_var(X_INTRODUCED_25);
constraint set_in_reif(3,X_INTRODUCED_8,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint bool2int(X_INTRODUCED_28,X_INTRODUCED_29):: defines_var(X_INTRODUCED_29);
constraint set_in_reif(1,X_INTRODUCED_18,X_INTRODUCED_33):: defines_var(X_INTRODUCED_33);
constraint bool2int(X_INTRODUCED_33,X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint set_in_reif(2,X_INTRODUCED_18,X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
constraint bool2int(X_INTRODUCED_37,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint set_in_reif(3,X_INTRODUCED_18,X_INTRODUCED_41):: defines_var(X_INTRODUCED_41);
constraint bool2int(X_INTRODUCED_41,X_INTRODUCED_42):: defines_var(X_INTRODUCED_42);
constraint set_in_reif(1,X_INTRODUCED_19,X_INTRODUCED_45):: defines_var(X_INTRODUCED_45);
constraint bool2int(X_INTRODUCED_45,X_INTRODUCED_46):: defines_var(X_INTRODUCED_46);
constraint set_in_reif(2,X_INTRODUCED_19,X_INTRODUCED_47):: defines_var(X_INTRODUCED_47);
constraint bool2int(X_INTRODUCED_47,X_INTRODUCED_48):: defines_var(X_INTRODUCED_48);
constraint set_in_reif(3,X_INTRODUCED_19,X_INTRODUCED_50):: defines_var(X_INTRODUCED_50);
constraint bool2int(X_INTRODUCED_50,X_INTRODUCED_51):: defines_var(X_INTRODUCED_51);
constraint set_in_reif(1,X_INTRODUCED_11,X_INTRODUCED_54):: defines_var(X_INTRODUCED_54);
constraint bool2int(X_INTRODUCED_54,X_INTRODUCED_55):: defines_var(X_INTRODUCED_55);
constraint set_in_reif(2,X_INTRODUCED_11,X_INTRODUCED_56):: defines_var(X_INTRODUCED_56);
constraint bool2int(X_INTRODUCED_56,X_INTRODUCED_57):: defines_var(X_INTRODUCED_57);
constraint set_in_reif(3,X_INTRODUCED_11,X_INTRODUCED_59):: defines_var(X_INTRODUCED_59);
constraint bool2int(X_INTRODUCED_59,X_INTRODUCED_60):: defines_var(X_INTRODUCED_60);
solve :: int_search(s,first_fail,indomain,complete) minimize cost;
