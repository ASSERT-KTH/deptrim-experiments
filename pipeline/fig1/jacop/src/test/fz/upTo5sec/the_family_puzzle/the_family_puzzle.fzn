array [1..2] of int: X_INTRODUCED_1 = [1,-1];
var {1,3}: Edith:: output_var;
var 1..3: Doris:: output_var;
var 1..2: Luisa:: output_var;
var 1..3: Albert:: output_var;
var 1..2: Henry:: output_var;
var 1..3: Victor:: output_var;
var bool: X_INTRODUCED_0 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
constraint bool_clause([X_INTRODUCED_2],[X_INTRODUCED_0]);
constraint bool_clause([X_INTRODUCED_6],[X_INTRODUCED_5]);
constraint int_lin_ne(X_INTRODUCED_1,[Edith,Albert],0);
constraint int_lin_ne(X_INTRODUCED_1,[Albert,Henry],0);
constraint int_lin_ne(X_INTRODUCED_1,[Albert,Victor],0);
constraint int_lin_ne(X_INTRODUCED_1,[Henry,Victor],0);
constraint int_lin_ne(X_INTRODUCED_1,[Edith,Doris],0);
constraint int_lin_ne(X_INTRODUCED_1,[Edith,Luisa],0);
constraint int_lin_ne(X_INTRODUCED_1,[Doris,Luisa],0);
constraint int_eq_reif(Luisa,2,X_INTRODUCED_0):: defines_var(X_INTRODUCED_0);
constraint int_lin_ne_reif(X_INTRODUCED_1,[Doris,Albert],0,X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint int_eq_reif(Albert,3,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint int_eq_reif(Albert,2,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint array_bool_or([X_INTRODUCED_3,X_INTRODUCED_4],X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_eq_reif(Luisa,Victor,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
solve  satisfy;
