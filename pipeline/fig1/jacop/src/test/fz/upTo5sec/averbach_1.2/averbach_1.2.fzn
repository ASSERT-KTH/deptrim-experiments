array [1..2] of int: X_INTRODUCED_2 = [1,-1];
var 1..1: X:: output_var;
var 1..3: Y:: output_var;
var 1..3: Z:: output_var;
var 1..3: American:: output_var;
var 1..3: English:: output_var;
var 1..3: French:: output_var;
var bool: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
array [1..3] of var int: xtable = [1,Y,Z];
constraint array_bool_or([X_INTRODUCED_3,X_INTRODUCED_5],true);
constraint array_bool_or([X_INTRODUCED_7,X_INTRODUCED_9],true);
constraint int_lin_ne(X_INTRODUCED_2,[American,English],0);
constraint int_lin_ne(X_INTRODUCED_2,[American,French],0);
constraint int_lin_ne(X_INTRODUCED_2,[English,French],0);
constraint int_lin_ne([-1],[Y],-1);
constraint int_lin_ne([-1],[Z],-1);
constraint int_lin_ne(X_INTRODUCED_2,[Y,Z],0);
constraint int_lin_eq_reif([1],[French],-1,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint int_lin_eq_reif([1],[French],2,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_lin_eq_reif(X_INTRODUCED_2,[Y,American],-2,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint int_lin_eq_reif(X_INTRODUCED_2,[Y,American],1,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
solve  satisfy;
