predicate jacop_lex_lesseq_bool(array [int] of var bool: x,array [int] of var bool: y);
array [1..3] of int: X_INTRODUCED_7 = [1,1,1];
var bool: X_INTRODUCED_0;
var bool: X_INTRODUCED_1;
var bool: X_INTRODUCED_2;
var 0..1: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
array [1..3] of var bool: m:: output_array([1..3,1..1]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2];
array [1..1] of var bool: X_INTRODUCED_14 ::var_is_introduced  = [X_INTRODUCED_1];
array [1..1] of var bool: X_INTRODUCED_15 ::var_is_introduced  = [X_INTRODUCED_0];
array [1..1] of var bool: X_INTRODUCED_16 ::var_is_introduced  = [X_INTRODUCED_2];
constraint int_eq(X_INTRODUCED_3,1);
constraint int_eq(X_INTRODUCED_4,1);
constraint int_eq(X_INTRODUCED_5,1);
constraint int_lin_eq(X_INTRODUCED_7,[X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5],3);
constraint int_eq(X_INTRODUCED_9,1);
constraint int_eq(X_INTRODUCED_11,1);
constraint int_eq(X_INTRODUCED_13,1);
constraint jacop_lex_lesseq_bool(X_INTRODUCED_15,X_INTRODUCED_14);
constraint jacop_lex_lesseq_bool(X_INTRODUCED_14,X_INTRODUCED_16);
constraint bool2int(X_INTRODUCED_0,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint bool2int(X_INTRODUCED_1,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint bool2int(X_INTRODUCED_2,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint array_bool_and([X_INTRODUCED_0,X_INTRODUCED_1],X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint bool2int(X_INTRODUCED_8,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint array_bool_and([X_INTRODUCED_0,X_INTRODUCED_2],X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint bool2int(X_INTRODUCED_10,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint array_bool_and([X_INTRODUCED_1,X_INTRODUCED_2],X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint bool2int(X_INTRODUCED_12,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
solve :: bool_search([X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2],input_order,indomain_min,complete) satisfy;
