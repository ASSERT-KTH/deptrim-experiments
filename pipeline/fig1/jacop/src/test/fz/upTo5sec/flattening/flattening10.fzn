array [1..2] of int: X_INTRODUCED_10 = [-1,-1];
var 0..4: a:: output_var;
var 0..4: b:: output_var;
var 0..4: c:: output_var;
var 0..4: d:: output_var;
var bool: X_INTRODUCED_0 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var -4..4: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var 0..4: X_INTRODUCED_5 ::var_is_introduced ;
var -4..4: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var 0..4: X_INTRODUCED_7 ::var_is_introduced ;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
constraint int_abs(X_INTRODUCED_4,X_INTRODUCED_5);
constraint int_abs(X_INTRODUCED_6,X_INTRODUCED_7);
constraint array_bool_or([X_INTRODUCED_2,X_INTRODUCED_11],true);
constraint int_eq_reif(b,d,X_INTRODUCED_0):: defines_var(X_INTRODUCED_0);
constraint int_eq_reif(a,c,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint array_bool_and([X_INTRODUCED_0,X_INTRODUCED_1],X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint int_lin_eq([1,-1,-1],[b,d,X_INTRODUCED_4],0):: defines_var(X_INTRODUCED_4);
constraint int_lin_eq([1,-1,-1],[a,c,X_INTRODUCED_6],0):: defines_var(X_INTRODUCED_6);
constraint int_lin_le_reif(X_INTRODUCED_10,[X_INTRODUCED_7,X_INTRODUCED_5],-4,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
solve  satisfy;
