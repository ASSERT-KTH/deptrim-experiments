predicate jacop_alldiff(array [int] of var int: x);
array [1..2] of int: X_INTRODUCED_4 = [1,-1];
var 0..3: x:: output_var;
var 0..3: y:: output_var;
var 0..3: z:: output_var;
var 0..3: t:: output_var;
var bool: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
array [1..3] of var int: X_INTRODUCED_0 ::var_is_introduced  = [x,y,z];
constraint jacop_alldiff(X_INTRODUCED_0);
constraint bool_clause([X_INTRODUCED_2],[X_INTRODUCED_1]);
constraint array_bool_and([X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7],X_INTRODUCED_1):: defines_var(X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint int_eq_reif(x,0,X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint int_lin_ne_reif(X_INTRODUCED_4,[y,z],0,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_lin_ne_reif(X_INTRODUCED_4,[y,t],0,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint int_lin_ne_reif(X_INTRODUCED_4,[z,t],0,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
solve  satisfy;
