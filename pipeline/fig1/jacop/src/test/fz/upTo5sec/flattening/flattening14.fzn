var -3..3: y:: output_var;
var bool: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var {-3,-2,-1,1,2,3}: X_INTRODUCED_3 ::var_is_introduced ;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var -9..9: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var -27..27: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
constraint bool_clause([X_INTRODUCED_5],[X_INTRODUCED_4]);
constraint bool_clause([X_INTRODUCED_4,X_INTRODUCED_6],[]);
constraint int_div(9,X_INTRODUCED_3,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint bool_clause([X_INTRODUCED_11],[X_INTRODUCED_10]);
constraint int_ne_reif(y,0,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint int_eq_reif(y,0,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint int_eq_reif(X_INTRODUCED_3,1,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_eq_reif(X_INTRODUCED_3,y,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint int_times(X_INTRODUCED_7,y,X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint int_ne_reif(X_INTRODUCED_8,9,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint array_bool_and([X_INTRODUCED_1,X_INTRODUCED_9],X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint int_ne_reif(y,2,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
solve  satisfy;
