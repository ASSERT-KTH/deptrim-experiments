array [1..2] of int: X_INTRODUCED_5 = [1,-1];
array [1..5] of int: X_INTRODUCED_37 = [1,1,1,1,1];
var 1..100: X_INTRODUCED_0;
var 1..100: X_INTRODUCED_1;
var 1..100: X_INTRODUCED_2;
var 1..100: X_INTRODUCED_3;
var 1..100: X_INTRODUCED_4;
var -5..5: X_INTRODUCED_7 ::var_is_introduced ;
var bool: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var -2..2: X_INTRODUCED_10 ::var_is_introduced ;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var -5..5: X_INTRODUCED_13 ::var_is_introduced ;
var bool: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var -2..2: X_INTRODUCED_16 ::var_is_introduced ;
var bool: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var -5..5: X_INTRODUCED_19 ::var_is_introduced ;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var -2..2: X_INTRODUCED_22 ::var_is_introduced ;
var bool: X_INTRODUCED_23 ::var_is_introduced :: is_defined_var;
var -5..5: X_INTRODUCED_25 ::var_is_introduced ;
var bool: X_INTRODUCED_26 ::var_is_introduced :: is_defined_var;
var -2..2: X_INTRODUCED_28 ::var_is_introduced ;
var bool: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
var -5..5: X_INTRODUCED_31 ::var_is_introduced ;
var bool: X_INTRODUCED_32 ::var_is_introduced :: is_defined_var;
var -2..2: X_INTRODUCED_34 ::var_is_introduced ;
var bool: X_INTRODUCED_35 ::var_is_introduced :: is_defined_var;
array [1..5] of var int: x:: output_array([1..5]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4];
constraint int_lin_le(X_INTRODUCED_5,[X_INTRODUCED_0,X_INTRODUCED_1],0);
constraint int_lin_le(X_INTRODUCED_5,[X_INTRODUCED_1,X_INTRODUCED_2],0);
constraint int_lin_le(X_INTRODUCED_5,[X_INTRODUCED_2,X_INTRODUCED_3],0);
constraint int_lin_le(X_INTRODUCED_5,[X_INTRODUCED_3,X_INTRODUCED_4],0);
constraint int_mod(X_INTRODUCED_0,5,X_INTRODUCED_7);
constraint int_mod(X_INTRODUCED_0,2,X_INTRODUCED_10);
constraint array_bool_or([X_INTRODUCED_8,X_INTRODUCED_11],true);
constraint int_mod(X_INTRODUCED_1,5,X_INTRODUCED_13);
constraint int_mod(X_INTRODUCED_1,2,X_INTRODUCED_16);
constraint array_bool_or([X_INTRODUCED_14,X_INTRODUCED_17],true);
constraint int_mod(X_INTRODUCED_2,5,X_INTRODUCED_19);
constraint int_mod(X_INTRODUCED_2,2,X_INTRODUCED_22);
constraint array_bool_or([X_INTRODUCED_20,X_INTRODUCED_23],true);
constraint int_mod(X_INTRODUCED_3,5,X_INTRODUCED_25);
constraint int_mod(X_INTRODUCED_3,2,X_INTRODUCED_28);
constraint array_bool_or([X_INTRODUCED_26,X_INTRODUCED_29],true);
constraint int_mod(X_INTRODUCED_4,5,X_INTRODUCED_31);
constraint int_mod(X_INTRODUCED_4,2,X_INTRODUCED_34);
constraint array_bool_or([X_INTRODUCED_32,X_INTRODUCED_35],true);
constraint int_lin_eq(X_INTRODUCED_37,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4],100);
constraint int_eq_reif(X_INTRODUCED_7,0,X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint int_eq_reif(X_INTRODUCED_10,0,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint int_eq_reif(X_INTRODUCED_13,0,X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
constraint int_eq_reif(X_INTRODUCED_16,0,X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint int_eq_reif(X_INTRODUCED_19,0,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint int_eq_reif(X_INTRODUCED_22,0,X_INTRODUCED_23):: defines_var(X_INTRODUCED_23);
constraint int_eq_reif(X_INTRODUCED_25,0,X_INTRODUCED_26):: defines_var(X_INTRODUCED_26);
constraint int_eq_reif(X_INTRODUCED_28,0,X_INTRODUCED_29):: defines_var(X_INTRODUCED_29);
constraint int_eq_reif(X_INTRODUCED_31,0,X_INTRODUCED_32):: defines_var(X_INTRODUCED_32);
constraint int_eq_reif(X_INTRODUCED_34,0,X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
solve :: int_search(x,first_fail,indomain_min,complete) satisfy;
