array [1..6] of int: X_INTRODUCED_7 = [1,1,1,1,1,1];
array [1..6] of int: X_INTRODUCED_9 = [-1,-1,-1,-1,-1,-1];
var 0..1: artie:: output_var;
var 0..1: bill:: output_var;
var 0..1: crackitt:: output_var;
var 0..1: dodgy:: output_var;
var 0..1: edgy:: output_var;
var 0..1: fingers:: output_var;
var 0..1: artie_t:: output_var;
var 0..1: bill_t:: output_var;
var 0..1: crackitt_t:: output_var;
var 0..1: dodgy_t:: output_var;
var 0..1: edgy_t:: output_var;
var 0..1: fingers_t:: output_var;
var bool: X_INTRODUCED_0 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
constraint int_eq_reif(artie,0,X_INTRODUCED_0):: defines_var(X_INTRODUCED_0);
constraint int_eq_reif(bill,0,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint int_eq_reif(crackitt,0,X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint int_eq_reif(dodgy,0,X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
constraint int_eq_reif(edgy,0,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint int_eq_reif(fingers,0,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_lin_le(X_INTRODUCED_7,[artie,bill,crackitt,dodgy,edgy,fingers],2);
constraint int_lin_le(X_INTRODUCED_9,[artie_t,bill_t,crackitt_t,dodgy_t,edgy_t,fingers_t],-4);
constraint array_bool_and([X_INTRODUCED_10,X_INTRODUCED_11],X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_lin_le_reif(X_INTRODUCED_9,[artie,bill,crackitt,dodgy,edgy,fingers],-2,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint bool_eq(X_INTRODUCED_1,X_INTRODUCED_12);
constraint array_bool_or([X_INTRODUCED_12,X_INTRODUCED_14],true);
constraint bool_clause([X_INTRODUCED_14],[X_INTRODUCED_13]);
constraint bool_clause([X_INTRODUCED_13],[X_INTRODUCED_12,X_INTRODUCED_14]);
constraint int_eq_reif(artie_t,1,X_INTRODUCED_0):: defines_var(X_INTRODUCED_0);
constraint int_eq_reif(bill_t,1,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint int_eq_reif(crackitt_t,1,X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint int_eq_reif(edgy_t,1,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint int_eq_reif(fingers_t,1,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_eq_reif(dodgy,1,X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint int_eq_reif(artie,1,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint int_eq_reif(crackitt,1,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint int_eq_reif(bill,1,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
constraint int_eq_reif(dodgy_t,1,X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
solve  satisfy;
