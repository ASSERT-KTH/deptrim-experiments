array [1..9] of int: X_INTRODUCED_31 = [1,-1,-1,-1,-1,-1,-1,-1,-1];
array [1..7] of int: X_INTRODUCED_53 = [1,-1,-1,-1,-1,-1,-1];
var 0..1: X_INTRODUCED_0;
var 0..1: X_INTRODUCED_1;
var 0..1: X_INTRODUCED_2;
var 0..1: X_INTRODUCED_3;
var 0..1: X_INTRODUCED_4;
var 0..1: X_INTRODUCED_5;
var 0..1: X_INTRODUCED_6;
var 0..1: X_INTRODUCED_7;
var 0..1: X_INTRODUCED_8;
var 0..1: X_INTRODUCED_9;
var 0..1: X_INTRODUCED_10;
var 0..1: X_INTRODUCED_11;
var 0..1: X_INTRODUCED_12;
var 0..1: X_INTRODUCED_13;
var 0..1: X_INTRODUCED_14;
var 0..1: X_INTRODUCED_15;
var 0..1: X_INTRODUCED_16;
var 0..1: X_INTRODUCED_17;
var 0..1: X_INTRODUCED_18;
var 0..1: X_INTRODUCED_19;
var 0..8: X_INTRODUCED_20:: is_defined_var;
var 0..8: X_INTRODUCED_21:: is_defined_var;
var 0..8: X_INTRODUCED_22:: is_defined_var;
var 0..8: X_INTRODUCED_23:: is_defined_var;
var 0..8: X_INTRODUCED_24:: is_defined_var;
var 0..8: X_INTRODUCED_25:: is_defined_var;
var 0..6: cost:: output_var:: is_defined_var;
var bool: X_INTRODUCED_26 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_32 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_33 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_37 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_41 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_42 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_44 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_45 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_46 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_48 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_49 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_50 ::var_is_introduced :: is_defined_var;
array [1..20] of var int: a:: output_array([0..3,0..4]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19];
constraint array_bool_and([X_INTRODUCED_27,X_INTRODUCED_28],X_INTRODUCED_26):: defines_var(X_INTRODUCED_26);
constraint int_lin_eq(X_INTRODUCED_31,[X_INTRODUCED_20,X_INTRODUCED_11,X_INTRODUCED_10,X_INTRODUCED_7,X_INTRODUCED_5,X_INTRODUCED_2,X_INTRODUCED_1,X_INTRODUCED_0,X_INTRODUCED_12],0):: defines_var(X_INTRODUCED_20);
constraint array_bool_and([X_INTRODUCED_33,X_INTRODUCED_34],X_INTRODUCED_32):: defines_var(X_INTRODUCED_32);
constraint int_lin_eq(X_INTRODUCED_31,[X_INTRODUCED_21,X_INTRODUCED_12,X_INTRODUCED_11,X_INTRODUCED_8,X_INTRODUCED_6,X_INTRODUCED_3,X_INTRODUCED_2,X_INTRODUCED_1,X_INTRODUCED_13],0):: defines_var(X_INTRODUCED_21);
constraint array_bool_and([X_INTRODUCED_37,X_INTRODUCED_38],X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint int_lin_eq(X_INTRODUCED_31,[X_INTRODUCED_22,X_INTRODUCED_13,X_INTRODUCED_12,X_INTRODUCED_9,X_INTRODUCED_7,X_INTRODUCED_4,X_INTRODUCED_3,X_INTRODUCED_2,X_INTRODUCED_14],0):: defines_var(X_INTRODUCED_22);
constraint array_bool_and([X_INTRODUCED_41,X_INTRODUCED_42],X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
constraint int_lin_eq(X_INTRODUCED_31,[X_INTRODUCED_23,X_INTRODUCED_16,X_INTRODUCED_15,X_INTRODUCED_12,X_INTRODUCED_10,X_INTRODUCED_7,X_INTRODUCED_6,X_INTRODUCED_5,X_INTRODUCED_17],0):: defines_var(X_INTRODUCED_23);
constraint array_bool_and([X_INTRODUCED_45,X_INTRODUCED_46],X_INTRODUCED_44):: defines_var(X_INTRODUCED_44);
constraint int_lin_eq(X_INTRODUCED_31,[X_INTRODUCED_24,X_INTRODUCED_17,X_INTRODUCED_16,X_INTRODUCED_13,X_INTRODUCED_11,X_INTRODUCED_8,X_INTRODUCED_7,X_INTRODUCED_6,X_INTRODUCED_18],0):: defines_var(X_INTRODUCED_24);
constraint array_bool_and([X_INTRODUCED_49,X_INTRODUCED_50],X_INTRODUCED_48):: defines_var(X_INTRODUCED_48);
constraint int_lin_eq(X_INTRODUCED_31,[X_INTRODUCED_25,X_INTRODUCED_18,X_INTRODUCED_17,X_INTRODUCED_14,X_INTRODUCED_12,X_INTRODUCED_9,X_INTRODUCED_8,X_INTRODUCED_7,X_INTRODUCED_19],0):: defines_var(X_INTRODUCED_25);
constraint int_lin_eq(X_INTRODUCED_53,[cost,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13],0):: defines_var(cost);
constraint int_eq_reif(X_INTRODUCED_6,1,X_INTRODUCED_26):: defines_var(X_INTRODUCED_26);
constraint int_le_reif(X_INTRODUCED_20,3,X_INTRODUCED_27):: defines_var(X_INTRODUCED_27);
constraint int_le_reif(2,X_INTRODUCED_20,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint int_eq_reif(X_INTRODUCED_7,1,X_INTRODUCED_32):: defines_var(X_INTRODUCED_32);
constraint int_le_reif(X_INTRODUCED_21,3,X_INTRODUCED_33):: defines_var(X_INTRODUCED_33);
constraint int_le_reif(2,X_INTRODUCED_21,X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint int_eq_reif(X_INTRODUCED_8,1,X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint int_le_reif(X_INTRODUCED_22,3,X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
constraint int_le_reif(2,X_INTRODUCED_22,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint int_eq_reif(X_INTRODUCED_11,1,X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
constraint int_le_reif(X_INTRODUCED_23,3,X_INTRODUCED_41):: defines_var(X_INTRODUCED_41);
constraint int_le_reif(2,X_INTRODUCED_23,X_INTRODUCED_42):: defines_var(X_INTRODUCED_42);
constraint int_eq_reif(X_INTRODUCED_12,1,X_INTRODUCED_44):: defines_var(X_INTRODUCED_44);
constraint int_le_reif(X_INTRODUCED_24,3,X_INTRODUCED_45):: defines_var(X_INTRODUCED_45);
constraint int_le_reif(2,X_INTRODUCED_24,X_INTRODUCED_46):: defines_var(X_INTRODUCED_46);
constraint int_eq_reif(X_INTRODUCED_13,1,X_INTRODUCED_48):: defines_var(X_INTRODUCED_48);
constraint int_le_reif(X_INTRODUCED_25,3,X_INTRODUCED_49):: defines_var(X_INTRODUCED_49);
constraint int_le_reif(2,X_INTRODUCED_25,X_INTRODUCED_50):: defines_var(X_INTRODUCED_50);
solve :: int_search([X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13],input_order,indomain_max,complete) maximize cost;
