predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..2] of int: X_INTRODUCED_11 = [-1,1];
array [1..2] of int: X_INTRODUCED_22 = [1,-1];
array [1..2] of int: X_INTRODUCED_23 = [2,3];
array [1..2] of int: X_INTRODUCED_33 = [2,-1];
var 0..5: X_INTRODUCED_1;
var 0..5: X_INTRODUCED_2;
var 0..1: X_INTRODUCED_4;
var 0..0: X_INTRODUCED_5;
var 4..5: Width:: output_var;
var 3..3: Height:: output_var;
var 14..15: Area:: output_var:: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_36 ::var_is_introduced ;
var bool: X_INTRODUCED_39 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_41 ::var_is_introduced ;
var bool: X_INTRODUCED_43 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_44 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_45 ::var_is_introduced ;
var bool: X_INTRODUCED_48 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_49 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_50 ::var_is_introduced ;
var bool: X_INTRODUCED_53 ::var_is_introduced :: is_defined_var;
array [1..3] of var int: X:: output_array([1..3]) = [0,X_INTRODUCED_1,X_INTRODUCED_2];
array [1..3] of var int: Y:: output_array([1..3]) = [0,X_INTRODUCED_4,0];
array [1..2] of var int: X_INTRODUCED_24 ::var_is_introduced  = [X_INTRODUCED_1,X_INTRODUCED_2];
array [1..2] of var int: X_INTRODUCED_27 ::var_is_introduced  = [X_INTRODUCED_4,0];
constraint array_bool_or([X_INTRODUCED_12,X_INTRODUCED_16,X_INTRODUCED_18,X_INTRODUCED_20],true);
constraint jacop_cumulative(X_INTRODUCED_24,X_INTRODUCED_23,X_INTRODUCED_23,3);
constraint int_lin_le(X_INTRODUCED_22,[X_INTRODUCED_1,Width],-2);
constraint int_lin_le(X_INTRODUCED_22,[X_INTRODUCED_2,Width],-3);
constraint jacop_cumulative(X_INTRODUCED_27,X_INTRODUCED_23,X_INTRODUCED_23,Width);
constraint int_lin_le(X_INTRODUCED_33,[X_INTRODUCED_2,Width],-3);
constraint array_bool_or([X_INTRODUCED_36,X_INTRODUCED_39],true);
constraint bool_clause([X_INTRODUCED_40],[X_INTRODUCED_36]);
constraint array_bool_or([X_INTRODUCED_41,X_INTRODUCED_43],true);
constraint bool_clause([X_INTRODUCED_44],[X_INTRODUCED_41]);
constraint array_bool_or([X_INTRODUCED_45,X_INTRODUCED_48],true);
constraint bool_clause([X_INTRODUCED_49],[X_INTRODUCED_45]);
constraint bool_clause([X_INTRODUCED_53],[X_INTRODUCED_50]);
constraint int_times(Height,Width,Area):: defines_var(Area);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_2,X_INTRODUCED_1],-2,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint int_lin_le_reif([-1],[X_INTRODUCED_4],-3,X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint int_lin_le_reif([1],[X_INTRODUCED_4],-2,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_1,X_INTRODUCED_2],-3,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_1,Width],2,X_INTRODUCED_39):: defines_var(X_INTRODUCED_39);
constraint int_le_reif(X_INTRODUCED_1,0,X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_2,Width],3,X_INTRODUCED_43):: defines_var(X_INTRODUCED_43);
constraint int_le_reif(X_INTRODUCED_2,0,X_INTRODUCED_44):: defines_var(X_INTRODUCED_44);
constraint int_lin_le_reif([-1],[X_INTRODUCED_4],-1,X_INTRODUCED_48):: defines_var(X_INTRODUCED_48);
constraint int_le_reif(X_INTRODUCED_4,0,X_INTRODUCED_49):: defines_var(X_INTRODUCED_49);
constraint int_le_reif(0,0,X_INTRODUCED_53):: defines_var(X_INTRODUCED_53);
solve :: int_search([Area,Height,X_INTRODUCED_5,X_INTRODUCED_4,X_INTRODUCED_2,X_INTRODUCED_1],input_order,indomain_min,complete) satisfy;
