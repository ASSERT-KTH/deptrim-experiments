predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..2] of int: X_INTRODUCED_13 = [-1,1];
array [1..2] of int: X_INTRODUCED_42 = [1,-1];
array [1..3] of int: X_INTRODUCED_43 = [2,3,4];
array [1..2] of int: X_INTRODUCED_55 = [2,-1];
var 0..7: X_INTRODUCED_1;
var 0..7: X_INTRODUCED_2;
var 0..7: X_INTRODUCED_3;
var 0..3: X_INTRODUCED_5;
var 0..2: X_INTRODUCED_6;
var 0..0: X_INTRODUCED_7;
var 6..7: Width:: output_var;
var 5..5: Height:: output_var;
var 30..35: Area:: output_var:: is_defined_var;
var bool: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_22 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_32 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_58 ::var_is_introduced ;
var bool: X_INTRODUCED_61 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_62 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_63 ::var_is_introduced ;
var bool: X_INTRODUCED_66 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_67 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_68 ::var_is_introduced ;
var bool: X_INTRODUCED_70 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_71 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_72 ::var_is_introduced ;
var bool: X_INTRODUCED_75 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_76 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_77 ::var_is_introduced ;
var bool: X_INTRODUCED_80 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_81 ::var_is_introduced :: is_defined_var;
array [1..4] of var int: X:: output_array([1..4]) = [0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
array [1..4] of var int: Y:: output_array([1..4]) = [0,X_INTRODUCED_5,X_INTRODUCED_6,0];
array [1..3] of var int: X_INTRODUCED_44 ::var_is_introduced  = [X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
array [1..3] of var int: X_INTRODUCED_48 ::var_is_introduced  = [X_INTRODUCED_5,X_INTRODUCED_6,0];
constraint array_bool_or([X_INTRODUCED_14,X_INTRODUCED_18,X_INTRODUCED_20,X_INTRODUCED_22],true);
constraint array_bool_or([X_INTRODUCED_25,X_INTRODUCED_28,X_INTRODUCED_30,X_INTRODUCED_32],true);
constraint array_bool_or([X_INTRODUCED_34,X_INTRODUCED_36,X_INTRODUCED_38,X_INTRODUCED_40],true);
constraint jacop_cumulative(X_INTRODUCED_44,X_INTRODUCED_43,X_INTRODUCED_43,5);
constraint int_lin_le(X_INTRODUCED_42,[X_INTRODUCED_1,Width],-2);
constraint int_lin_le(X_INTRODUCED_42,[X_INTRODUCED_2,Width],-3);
constraint int_lin_le(X_INTRODUCED_42,[X_INTRODUCED_3,Width],-4);
constraint jacop_cumulative(X_INTRODUCED_48,X_INTRODUCED_43,X_INTRODUCED_43,Width);
constraint int_lin_le(X_INTRODUCED_55,[X_INTRODUCED_3,Width],-4);
constraint array_bool_or([X_INTRODUCED_58,X_INTRODUCED_61],true);
constraint bool_clause([X_INTRODUCED_62],[X_INTRODUCED_58]);
constraint array_bool_or([X_INTRODUCED_63,X_INTRODUCED_66],true);
constraint bool_clause([X_INTRODUCED_67],[X_INTRODUCED_63]);
constraint array_bool_or([X_INTRODUCED_68,X_INTRODUCED_70],true);
constraint bool_clause([X_INTRODUCED_71],[X_INTRODUCED_68]);
constraint array_bool_or([X_INTRODUCED_72,X_INTRODUCED_75],true);
constraint bool_clause([X_INTRODUCED_76],[X_INTRODUCED_72]);
constraint array_bool_or([X_INTRODUCED_77,X_INTRODUCED_80],true);
constraint bool_clause([X_INTRODUCED_81],[X_INTRODUCED_77]);
constraint int_times(Height,Width,Area):: defines_var(Area);
constraint int_lin_le_reif(X_INTRODUCED_13,[X_INTRODUCED_2,X_INTRODUCED_1],-2,X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
constraint int_lin_le_reif(X_INTRODUCED_13,[X_INTRODUCED_5,X_INTRODUCED_6],-3,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint int_lin_le_reif(X_INTRODUCED_13,[X_INTRODUCED_6,X_INTRODUCED_5],-2,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint int_lin_le_reif(X_INTRODUCED_13,[X_INTRODUCED_1,X_INTRODUCED_2],-3,X_INTRODUCED_22):: defines_var(X_INTRODUCED_22);
constraint int_lin_le_reif(X_INTRODUCED_13,[X_INTRODUCED_3,X_INTRODUCED_1],-2,X_INTRODUCED_25):: defines_var(X_INTRODUCED_25);
constraint int_lin_le_reif([-1],[X_INTRODUCED_5],-4,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint int_lin_le_reif([1],[X_INTRODUCED_5],-2,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint int_lin_le_reif(X_INTRODUCED_13,[X_INTRODUCED_1,X_INTRODUCED_3],-4,X_INTRODUCED_32):: defines_var(X_INTRODUCED_32);
constraint int_lin_le_reif(X_INTRODUCED_13,[X_INTRODUCED_3,X_INTRODUCED_2],-3,X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint int_lin_le_reif([-1],[X_INTRODUCED_6],-4,X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint int_lin_le_reif([1],[X_INTRODUCED_6],-3,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint int_lin_le_reif(X_INTRODUCED_13,[X_INTRODUCED_2,X_INTRODUCED_3],-4,X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
constraint int_lin_le_reif(X_INTRODUCED_13,[X_INTRODUCED_1,Width],2,X_INTRODUCED_61):: defines_var(X_INTRODUCED_61);
constraint int_le_reif(X_INTRODUCED_1,0,X_INTRODUCED_62):: defines_var(X_INTRODUCED_62);
constraint int_lin_le_reif(X_INTRODUCED_13,[X_INTRODUCED_2,Width],3,X_INTRODUCED_66):: defines_var(X_INTRODUCED_66);
constraint int_le_reif(X_INTRODUCED_2,0,X_INTRODUCED_67):: defines_var(X_INTRODUCED_67);
constraint int_lin_le_reif(X_INTRODUCED_13,[X_INTRODUCED_3,Width],4,X_INTRODUCED_70):: defines_var(X_INTRODUCED_70);
constraint int_le_reif(X_INTRODUCED_3,0,X_INTRODUCED_71):: defines_var(X_INTRODUCED_71);
constraint int_lin_le_reif([-1],[X_INTRODUCED_5],-3,X_INTRODUCED_75):: defines_var(X_INTRODUCED_75);
constraint int_le_reif(X_INTRODUCED_5,0,X_INTRODUCED_76):: defines_var(X_INTRODUCED_76);
constraint int_lin_le_reif([-1],[X_INTRODUCED_6],-2,X_INTRODUCED_80):: defines_var(X_INTRODUCED_80);
constraint int_le_reif(X_INTRODUCED_6,0,X_INTRODUCED_81):: defines_var(X_INTRODUCED_81);
solve :: int_search([Area,Height,X_INTRODUCED_7,X_INTRODUCED_6,X_INTRODUCED_5,X_INTRODUCED_3,X_INTRODUCED_2,X_INTRODUCED_1],input_order,indomain_min,complete) satisfy;
