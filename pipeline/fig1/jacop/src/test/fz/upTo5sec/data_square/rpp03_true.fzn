predicate jacop_cumulative(array [int] of var int: s,array [int] of var int: d,array [int] of var int: r,var int: b);
array [1..2] of int: X_INTRODUCED_11 = [-1,1];
array [1..2] of int: X_INTRODUCED_40 = [1,-1];
array [1..3] of int: X_INTRODUCED_41 = [1,2,3];
array [1..2] of int: X_INTRODUCED_51 = [2,-1];
var 0..5: X_INTRODUCED_0;
var 0..5: X_INTRODUCED_1;
var 0..5: X_INTRODUCED_2;
var 0..2: X_INTRODUCED_3;
var 0..1: X_INTRODUCED_4;
var 0..0: X_INTRODUCED_5;
var 4..5: Width:: output_var;
var 3..3: Height:: output_var;
var 14..15: Area:: output_var:: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_23 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_26 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_32 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_54 ::var_is_introduced ;
var bool: X_INTRODUCED_55 ::var_is_introduced ;
var bool: X_INTRODUCED_58 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_59 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_61 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_62 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_63 ::var_is_introduced ;
var bool: X_INTRODUCED_66 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_67 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_68 ::var_is_introduced ;
var bool: X_INTRODUCED_70 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_71 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_72 ::var_is_introduced ;
var bool: X_INTRODUCED_73 ::var_is_introduced ;
var bool: X_INTRODUCED_76 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_77 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_79 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_80 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_81 ::var_is_introduced ;
var bool: X_INTRODUCED_84 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_85 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_86 ::var_is_introduced ;
var bool: X_INTRODUCED_89 ::var_is_introduced :: is_defined_var;
array [1..3] of var int: X:: output_array([1..3]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2];
array [1..3] of var int: Y:: output_array([1..3]) = [X_INTRODUCED_3,X_INTRODUCED_4,0];
constraint array_bool_or([X_INTRODUCED_12,X_INTRODUCED_16,X_INTRODUCED_18,X_INTRODUCED_20],true);
constraint array_bool_or([X_INTRODUCED_23,X_INTRODUCED_26,X_INTRODUCED_28,X_INTRODUCED_30],true);
constraint array_bool_or([X_INTRODUCED_32,X_INTRODUCED_34,X_INTRODUCED_36,X_INTRODUCED_38],true);
constraint jacop_cumulative(X,X_INTRODUCED_41,X_INTRODUCED_41,3);
constraint int_lin_le(X_INTRODUCED_40,[X_INTRODUCED_0,Width],-1);
constraint int_lin_le(X_INTRODUCED_40,[X_INTRODUCED_1,Width],-2);
constraint int_lin_le(X_INTRODUCED_40,[X_INTRODUCED_2,Width],-3);
constraint jacop_cumulative(Y,X_INTRODUCED_41,X_INTRODUCED_41,Width);
constraint int_lin_le(X_INTRODUCED_51,[X_INTRODUCED_2,Width],-3);
constraint bool_clause([],[X_INTRODUCED_54,X_INTRODUCED_55]);
constraint array_bool_or([X_INTRODUCED_55,X_INTRODUCED_58],true);
constraint bool_clause([X_INTRODUCED_59],[X_INTRODUCED_55]);
constraint array_bool_or([X_INTRODUCED_54,X_INTRODUCED_61],true);
constraint bool_clause([X_INTRODUCED_62],[X_INTRODUCED_54]);
constraint array_bool_or([X_INTRODUCED_63,X_INTRODUCED_66],true);
constraint bool_clause([X_INTRODUCED_67],[X_INTRODUCED_63]);
constraint array_bool_or([X_INTRODUCED_68,X_INTRODUCED_70],true);
constraint bool_clause([X_INTRODUCED_71],[X_INTRODUCED_68]);
constraint bool_clause([],[X_INTRODUCED_72,X_INTRODUCED_73]);
constraint array_bool_or([X_INTRODUCED_73,X_INTRODUCED_76],true);
constraint bool_clause([X_INTRODUCED_77],[X_INTRODUCED_73]);
constraint array_bool_or([X_INTRODUCED_72,X_INTRODUCED_79],true);
constraint bool_clause([X_INTRODUCED_80],[X_INTRODUCED_72]);
constraint array_bool_or([X_INTRODUCED_81,X_INTRODUCED_84],true);
constraint bool_clause([X_INTRODUCED_85],[X_INTRODUCED_81]);
constraint bool_clause([X_INTRODUCED_89],[X_INTRODUCED_86]);
constraint int_times(Height,Width,Area):: defines_var(Area);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_1,X_INTRODUCED_0],-1,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_3,X_INTRODUCED_4],-2,X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_4,X_INTRODUCED_3],-1,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_0,X_INTRODUCED_1],-2,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_2,X_INTRODUCED_0],-1,X_INTRODUCED_23):: defines_var(X_INTRODUCED_23);
constraint int_lin_le_reif([-1],[X_INTRODUCED_3],-3,X_INTRODUCED_26):: defines_var(X_INTRODUCED_26);
constraint int_lin_le_reif([1],[X_INTRODUCED_3],-1,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_0,X_INTRODUCED_2],-3,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_2,X_INTRODUCED_1],-2,X_INTRODUCED_32):: defines_var(X_INTRODUCED_32);
constraint int_lin_le_reif([-1],[X_INTRODUCED_4],-3,X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint int_lin_le_reif([1],[X_INTRODUCED_4],-2,X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_1,X_INTRODUCED_2],-3,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint int_lin_le_reif(X_INTRODUCED_40,[X_INTRODUCED_0,Width],-2,X_INTRODUCED_58):: defines_var(X_INTRODUCED_58);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_0,Width],1,X_INTRODUCED_59):: defines_var(X_INTRODUCED_59);
constraint int_le_reif(1,X_INTRODUCED_0,X_INTRODUCED_61):: defines_var(X_INTRODUCED_61);
constraint int_le_reif(X_INTRODUCED_0,0,X_INTRODUCED_62):: defines_var(X_INTRODUCED_62);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_1,Width],2,X_INTRODUCED_66):: defines_var(X_INTRODUCED_66);
constraint int_le_reif(X_INTRODUCED_1,0,X_INTRODUCED_67):: defines_var(X_INTRODUCED_67);
constraint int_lin_le_reif(X_INTRODUCED_11,[X_INTRODUCED_2,Width],3,X_INTRODUCED_70):: defines_var(X_INTRODUCED_70);
constraint int_le_reif(X_INTRODUCED_2,0,X_INTRODUCED_71):: defines_var(X_INTRODUCED_71);
constraint int_lin_le_reif([1],[X_INTRODUCED_3],1,X_INTRODUCED_76):: defines_var(X_INTRODUCED_76);
constraint int_lin_le_reif([-1],[X_INTRODUCED_3],-2,X_INTRODUCED_77):: defines_var(X_INTRODUCED_77);
constraint int_le_reif(1,X_INTRODUCED_3,X_INTRODUCED_79):: defines_var(X_INTRODUCED_79);
constraint int_le_reif(X_INTRODUCED_3,0,X_INTRODUCED_80):: defines_var(X_INTRODUCED_80);
constraint int_lin_le_reif([-1],[X_INTRODUCED_4],-1,X_INTRODUCED_84):: defines_var(X_INTRODUCED_84);
constraint int_le_reif(X_INTRODUCED_4,0,X_INTRODUCED_85):: defines_var(X_INTRODUCED_85);
constraint int_le_reif(0,0,X_INTRODUCED_89):: defines_var(X_INTRODUCED_89);
solve :: int_search([Area,Height,X_INTRODUCED_5,X_INTRODUCED_4,X_INTRODUCED_3,X_INTRODUCED_2,X_INTRODUCED_1,X_INTRODUCED_0],input_order,indomain_min,complete) satisfy;
