array [1..17] of int: X_INTRODUCED_53 = [1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];
var 0..16: num_divisors:: is_defined_var;
var 0..1: is_prime:: output_var;
var bool: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_22 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_23 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_26 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_31 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_32 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_33 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_35 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_37 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_39 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_41 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_42 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_43 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_44 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_45 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_46 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_47 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_48 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_49 ::var_is_introduced :: is_defined_var;
array [1..16] of var int: divisor:: output_array([2..17]) = [0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0];
array [1..17] of var int: X_INTRODUCED_52 ::var_is_introduced  = [num_divisors,X_INTRODUCED_19,X_INTRODUCED_21,X_INTRODUCED_23,X_INTRODUCED_25,X_INTRODUCED_27,X_INTRODUCED_29,X_INTRODUCED_31,X_INTRODUCED_33,X_INTRODUCED_35,X_INTRODUCED_37,X_INTRODUCED_39,X_INTRODUCED_41,X_INTRODUCED_43,X_INTRODUCED_45,X_INTRODUCED_47,X_INTRODUCED_49];
constraint int_le_reif(1,num_divisors,X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint int_eq_reif(num_divisors,0,X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint int_lin_eq(X_INTRODUCED_53,X_INTRODUCED_52,0):: defines_var(num_divisors);
constraint int_ne(1,0);
constraint int_ne(1,0);
constraint int_eq_reif(is_prime,0,X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint int_eq_reif(is_prime,1,X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint int_le_reif(1,0,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint bool2int(X_INTRODUCED_18,X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
constraint int_le_reif(1,1,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint bool2int(X_INTRODUCED_20,X_INTRODUCED_21):: defines_var(X_INTRODUCED_21);
constraint int_le_reif(1,0,X_INTRODUCED_22):: defines_var(X_INTRODUCED_22);
constraint bool2int(X_INTRODUCED_22,X_INTRODUCED_23):: defines_var(X_INTRODUCED_23);
constraint int_le_reif(1,0,X_INTRODUCED_24):: defines_var(X_INTRODUCED_24);
constraint bool2int(X_INTRODUCED_24,X_INTRODUCED_25):: defines_var(X_INTRODUCED_25);
constraint int_le_reif(1,0,X_INTRODUCED_26):: defines_var(X_INTRODUCED_26);
constraint bool2int(X_INTRODUCED_26,X_INTRODUCED_27):: defines_var(X_INTRODUCED_27);
constraint int_le_reif(1,0,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint bool2int(X_INTRODUCED_28,X_INTRODUCED_29):: defines_var(X_INTRODUCED_29);
constraint int_le_reif(1,0,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint bool2int(X_INTRODUCED_30,X_INTRODUCED_31):: defines_var(X_INTRODUCED_31);
constraint int_le_reif(1,0,X_INTRODUCED_32):: defines_var(X_INTRODUCED_32);
constraint bool2int(X_INTRODUCED_32,X_INTRODUCED_33):: defines_var(X_INTRODUCED_33);
constraint int_le_reif(1,0,X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint bool2int(X_INTRODUCED_34,X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
constraint int_le_reif(1,1,X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint bool2int(X_INTRODUCED_36,X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
constraint int_le_reif(1,0,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint bool2int(X_INTRODUCED_38,X_INTRODUCED_39):: defines_var(X_INTRODUCED_39);
constraint int_le_reif(1,0,X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
constraint bool2int(X_INTRODUCED_40,X_INTRODUCED_41):: defines_var(X_INTRODUCED_41);
constraint int_le_reif(1,0,X_INTRODUCED_42):: defines_var(X_INTRODUCED_42);
constraint bool2int(X_INTRODUCED_42,X_INTRODUCED_43):: defines_var(X_INTRODUCED_43);
constraint int_le_reif(1,0,X_INTRODUCED_44):: defines_var(X_INTRODUCED_44);
constraint bool2int(X_INTRODUCED_44,X_INTRODUCED_45):: defines_var(X_INTRODUCED_45);
constraint int_le_reif(1,0,X_INTRODUCED_46):: defines_var(X_INTRODUCED_46);
constraint bool2int(X_INTRODUCED_46,X_INTRODUCED_47):: defines_var(X_INTRODUCED_47);
constraint int_le_reif(1,0,X_INTRODUCED_48):: defines_var(X_INTRODUCED_48);
constraint bool2int(X_INTRODUCED_48,X_INTRODUCED_49):: defines_var(X_INTRODUCED_49);
solve :: int_search(divisor,first_fail,indomain_min,complete) satisfy;
