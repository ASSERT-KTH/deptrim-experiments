predicate jacop_count(array [int] of var int: x,int: y,var int: c);
var 0..10: X_INTRODUCED_0;
var 0..10: X_INTRODUCED_1;
var 0..10: X_INTRODUCED_2;
var 0..10: X_INTRODUCED_3;
var 0..10: X_INTRODUCED_4;
var 0..10: X_INTRODUCED_5;
var 0..10: X_INTRODUCED_6;
var 0..10: X_INTRODUCED_7;
var 0..10: X_INTRODUCED_8;
var 0..10: X_INTRODUCED_9;
array [1..10] of var int: x:: output_array([0..9]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9];
constraint jacop_count(x,0,X_INTRODUCED_0);
constraint jacop_count(x,1,X_INTRODUCED_1);
constraint jacop_count(x,2,X_INTRODUCED_2);
constraint jacop_count(x,3,X_INTRODUCED_3);
constraint jacop_count(x,4,X_INTRODUCED_4);
constraint jacop_count(x,5,X_INTRODUCED_5);
constraint jacop_count(x,6,X_INTRODUCED_6);
constraint jacop_count(x,7,X_INTRODUCED_7);
constraint jacop_count(x,8,X_INTRODUCED_8);
constraint jacop_count(x,9,X_INTRODUCED_9);
solve  satisfy;
