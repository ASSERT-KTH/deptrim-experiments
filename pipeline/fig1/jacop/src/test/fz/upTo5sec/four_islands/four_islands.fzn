array [1..2] of int: X_INTRODUCED_51 = [1,-1];
var 1..4: Pwana:: output_var;
var 1..4: Quero:: output_var;
var 1..4: Rayou:: output_var;
var 1..4: Skern:: output_var;
var 1..4: alabaster:: output_var;
var 1..4: bananas:: output_var;
var 1..4: coconuts:: output_var;
var 1..4: durian_fruit:: output_var;
var 1..4: resort_hotel:: output_var;
var 1..4: ice_skating_rink:: output_var;
var 1..4: jai_alai_stadium:: output_var;
var 1..4: koala_preserve:: output_var;
var bool: X_INTRODUCED_0 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_22 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_23 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_26 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_31 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_32 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_33 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_35 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_37 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_39 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_41 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_42 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_43 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_44 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_45 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_46 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_47 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_48 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_49 ::var_is_introduced :: is_defined_var;
array [1..4] of var int: island = [Pwana,Quero,Rayou,Skern];
array [1..4] of var int: export = [alabaster,bananas,coconuts,durian_fruit];
array [1..4] of var int: attraction = [resort_hotel,ice_skating_rink,jai_alai_stadium,koala_preserve];
constraint array_bool_or([X_INTRODUCED_2,X_INTRODUCED_5,X_INTRODUCED_8,X_INTRODUCED_11],true);
constraint array_bool_or([X_INTRODUCED_14,X_INTRODUCED_17,X_INTRODUCED_20,X_INTRODUCED_23],true);
constraint array_bool_or([X_INTRODUCED_25,X_INTRODUCED_27,X_INTRODUCED_29,X_INTRODUCED_31],true);
constraint array_bool_or([X_INTRODUCED_34,X_INTRODUCED_37],true);
constraint array_bool_or([X_INTRODUCED_40,X_INTRODUCED_43],true);
constraint array_bool_or([X_INTRODUCED_46,X_INTRODUCED_49],true);
constraint int_lin_ne(X_INTRODUCED_51,[resort_hotel,ice_skating_rink],0);
constraint int_lin_ne(X_INTRODUCED_51,[resort_hotel,jai_alai_stadium],0);
constraint int_lin_ne(X_INTRODUCED_51,[resort_hotel,koala_preserve],0);
constraint int_lin_ne(X_INTRODUCED_51,[ice_skating_rink,jai_alai_stadium],0);
constraint int_lin_ne(X_INTRODUCED_51,[ice_skating_rink,koala_preserve],0);
constraint int_lin_ne(X_INTRODUCED_51,[jai_alai_stadium,koala_preserve],0);
constraint int_lin_ne(X_INTRODUCED_51,[alabaster,bananas],0);
constraint int_lin_ne(X_INTRODUCED_51,[alabaster,coconuts],0);
constraint int_lin_ne(X_INTRODUCED_51,[alabaster,durian_fruit],0);
constraint int_lin_ne(X_INTRODUCED_51,[bananas,coconuts],0);
constraint int_lin_ne(X_INTRODUCED_51,[bananas,durian_fruit],0);
constraint int_lin_ne(X_INTRODUCED_51,[coconuts,durian_fruit],0);
constraint int_lin_ne(X_INTRODUCED_51,[Pwana,Quero],0);
constraint int_lin_ne(X_INTRODUCED_51,[Pwana,Rayou],0);
constraint int_lin_ne(X_INTRODUCED_51,[Pwana,Skern],0);
constraint int_lin_ne(X_INTRODUCED_51,[Quero,Rayou],0);
constraint int_lin_ne(X_INTRODUCED_51,[Quero,Skern],0);
constraint int_lin_ne(X_INTRODUCED_51,[Rayou,Skern],0);
constraint int_eq_reif(jai_alai_stadium,1,X_INTRODUCED_0):: defines_var(X_INTRODUCED_0);
constraint int_eq_reif(ice_skating_rink,4,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint array_bool_and([X_INTRODUCED_0,X_INTRODUCED_1],X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint int_eq_reif(jai_alai_stadium,3,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint int_eq_reif(ice_skating_rink,2,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint array_bool_and([X_INTRODUCED_3,X_INTRODUCED_4],X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_eq_reif(jai_alai_stadium,2,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint int_eq_reif(ice_skating_rink,3,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint array_bool_and([X_INTRODUCED_6,X_INTRODUCED_7],X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint int_eq_reif(jai_alai_stadium,4,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint int_eq_reif(ice_skating_rink,1,X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint array_bool_and([X_INTRODUCED_9,X_INTRODUCED_10],X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint int_eq_reif(bananas,1,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint int_eq_reif(Rayou,2,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
constraint array_bool_and([X_INTRODUCED_12,X_INTRODUCED_13],X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
constraint int_eq_reif(bananas,4,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint int_eq_reif(Rayou,3,X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint array_bool_and([X_INTRODUCED_15,X_INTRODUCED_16],X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint int_eq_reif(bananas,3,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint int_eq_reif(Rayou,4,X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
constraint array_bool_and([X_INTRODUCED_18,X_INTRODUCED_19],X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint int_eq_reif(bananas,2,X_INTRODUCED_21):: defines_var(X_INTRODUCED_21);
constraint int_eq_reif(Rayou,1,X_INTRODUCED_22):: defines_var(X_INTRODUCED_22);
constraint array_bool_and([X_INTRODUCED_21,X_INTRODUCED_22],X_INTRODUCED_23):: defines_var(X_INTRODUCED_23);
constraint int_eq_reif(Skern,3,X_INTRODUCED_24):: defines_var(X_INTRODUCED_24);
constraint array_bool_and([X_INTRODUCED_0,X_INTRODUCED_24],X_INTRODUCED_25):: defines_var(X_INTRODUCED_25);
constraint int_eq_reif(Skern,2,X_INTRODUCED_26):: defines_var(X_INTRODUCED_26);
constraint array_bool_and([X_INTRODUCED_9,X_INTRODUCED_26],X_INTRODUCED_27):: defines_var(X_INTRODUCED_27);
constraint int_eq_reif(Skern,4,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint array_bool_and([X_INTRODUCED_6,X_INTRODUCED_28],X_INTRODUCED_29):: defines_var(X_INTRODUCED_29);
constraint int_eq_reif(Skern,1,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint array_bool_and([X_INTRODUCED_3,X_INTRODUCED_30],X_INTRODUCED_31):: defines_var(X_INTRODUCED_31);
constraint int_eq_reif(resort_hotel,4,X_INTRODUCED_32):: defines_var(X_INTRODUCED_32);
constraint int_eq_reif(durian_fruit,3,X_INTRODUCED_33):: defines_var(X_INTRODUCED_33);
constraint array_bool_and([X_INTRODUCED_32,X_INTRODUCED_33],X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint int_eq_reif(resort_hotel,2,X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
constraint int_eq_reif(durian_fruit,1,X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint array_bool_and([X_INTRODUCED_35,X_INTRODUCED_36],X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
constraint int_eq_reif(Quero,4,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint int_eq_reif(alabaster,3,X_INTRODUCED_39):: defines_var(X_INTRODUCED_39);
constraint array_bool_and([X_INTRODUCED_38,X_INTRODUCED_39],X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
constraint int_eq_reif(Quero,2,X_INTRODUCED_41):: defines_var(X_INTRODUCED_41);
constraint int_eq_reif(alabaster,1,X_INTRODUCED_42):: defines_var(X_INTRODUCED_42);
constraint array_bool_and([X_INTRODUCED_41,X_INTRODUCED_42],X_INTRODUCED_43):: defines_var(X_INTRODUCED_43);
constraint int_eq_reif(koala_preserve,4,X_INTRODUCED_44):: defines_var(X_INTRODUCED_44);
constraint int_eq_reif(Pwana,2,X_INTRODUCED_45):: defines_var(X_INTRODUCED_45);
constraint array_bool_and([X_INTRODUCED_44,X_INTRODUCED_45],X_INTRODUCED_46):: defines_var(X_INTRODUCED_46);
constraint int_eq_reif(koala_preserve,3,X_INTRODUCED_47):: defines_var(X_INTRODUCED_47);
constraint int_eq_reif(Pwana,1,X_INTRODUCED_48):: defines_var(X_INTRODUCED_48);
constraint array_bool_and([X_INTRODUCED_47,X_INTRODUCED_48],X_INTRODUCED_49):: defines_var(X_INTRODUCED_49);
solve  satisfy;
