var bool: X_INTRODUCED_0:: is_defined_var;
var bool: X_INTRODUCED_1:: is_defined_var;
var bool: X_INTRODUCED_2:: is_defined_var;
var bool: X_INTRODUCED_3:: is_defined_var;
var set of 1..6: X_INTRODUCED_5;
var set of 1..6: X_INTRODUCED_6;
var set of 1..6: X_INTRODUCED_7;
var set of 1..6: X_INTRODUCED_8;
var set of 1..6: X_INTRODUCED_9;
var set of 1..6: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_22 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_23 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_26 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_27 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_31 ::var_is_introduced :: is_defined_var;
var set of 1..6: X_INTRODUCED_32 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_33 ::var_is_introduced :: is_defined_var;
var 0..6: X_INTRODUCED_34 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_35 ::var_is_introduced :: is_defined_var;
var 0..6: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_37 ::var_is_introduced :: is_defined_var;
var 0..6: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_39 ::var_is_introduced :: is_defined_var;
var 0..6: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
var 0..6: X_INTRODUCED_42 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_4 = true;
array [1..5] of var bool: x:: output_array([1..5]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,true];
array [1..5] of var set of int: xs:: output_array([1..5]) = [X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9];
constraint set_eq(1..6,X_INTRODUCED_22);
constraint set_eq(X_INTRODUCED_23,1..0);
constraint set_eq(X_INTRODUCED_24,1..0);
constraint set_eq(X_INTRODUCED_25,1..0);
constraint set_eq(X_INTRODUCED_26,1..0);
constraint set_eq(X_INTRODUCED_27,1..0);
constraint set_eq(X_INTRODUCED_28,1..0);
constraint set_eq(X_INTRODUCED_29,1..0);
constraint set_eq(X_INTRODUCED_30,1..0);
constraint set_eq(X_INTRODUCED_31,1..0);
constraint set_eq(X_INTRODUCED_32,1..0);
constraint int_eq_reif(X_INTRODUCED_34,0,X_INTRODUCED_33):: defines_var(X_INTRODUCED_33);
constraint int_eq_reif(X_INTRODUCED_36,0,X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
constraint int_eq_reif(X_INTRODUCED_38,0,X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
constraint int_eq_reif(X_INTRODUCED_40,0,X_INTRODUCED_39):: defines_var(X_INTRODUCED_39);
constraint int_eq_reif(X_INTRODUCED_42,0,false);
constraint array_bool_or([X_INTRODUCED_2,X_INTRODUCED_3],true);
constraint array_bool_or([X_INTRODUCED_0,X_INTRODUCED_1],true);
constraint set_eq_reif(X_INTRODUCED_5,1..2,X_INTRODUCED_0):: defines_var(X_INTRODUCED_0);
constraint set_eq_reif(X_INTRODUCED_6,{2,4},X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint set_eq_reif(X_INTRODUCED_7,{1,3},X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint set_eq_reif(X_INTRODUCED_8,4..5,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint set_eq(X_INTRODUCED_9,5..6);
constraint set_union(X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
constraint set_union(X_INTRODUCED_7,X_INTRODUCED_19,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint set_union(X_INTRODUCED_6,X_INTRODUCED_20,X_INTRODUCED_21):: defines_var(X_INTRODUCED_21);
constraint set_union(X_INTRODUCED_5,X_INTRODUCED_21,X_INTRODUCED_22):: defines_var(X_INTRODUCED_22);
constraint set_intersect(X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_23):: defines_var(X_INTRODUCED_23);
constraint set_intersect(X_INTRODUCED_5,X_INTRODUCED_7,X_INTRODUCED_24):: defines_var(X_INTRODUCED_24);
constraint set_intersect(X_INTRODUCED_5,X_INTRODUCED_8,X_INTRODUCED_25):: defines_var(X_INTRODUCED_25);
constraint set_intersect(X_INTRODUCED_5,X_INTRODUCED_9,X_INTRODUCED_26):: defines_var(X_INTRODUCED_26);
constraint set_intersect(X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_27):: defines_var(X_INTRODUCED_27);
constraint set_intersect(X_INTRODUCED_6,X_INTRODUCED_8,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint set_intersect(X_INTRODUCED_6,X_INTRODUCED_9,X_INTRODUCED_29):: defines_var(X_INTRODUCED_29);
constraint set_intersect(X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint set_intersect(X_INTRODUCED_7,X_INTRODUCED_9,X_INTRODUCED_31):: defines_var(X_INTRODUCED_31);
constraint set_intersect(X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_32):: defines_var(X_INTRODUCED_32);
constraint bool_eq_reif(X_INTRODUCED_0,false,X_INTRODUCED_33):: defines_var(X_INTRODUCED_33);
constraint set_card(X_INTRODUCED_5,X_INTRODUCED_34):: defines_var(X_INTRODUCED_34);
constraint bool_eq_reif(X_INTRODUCED_1,false,X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
constraint set_card(X_INTRODUCED_6,X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint bool_eq_reif(X_INTRODUCED_2,false,X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
constraint set_card(X_INTRODUCED_7,X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint bool_eq_reif(X_INTRODUCED_3,false,X_INTRODUCED_39):: defines_var(X_INTRODUCED_39);
constraint set_card(X_INTRODUCED_8,X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
constraint set_card(X_INTRODUCED_9,X_INTRODUCED_42):: defines_var(X_INTRODUCED_42);
solve  satisfy;
