array [1..10] of int: X_INTRODUCED_11 = [1,1,1,1,1,1,1,1,1,1];
array [1..11] of int: X_INTRODUCED_13 = [1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];
array [1..5] of int: X_INTRODUCED_15 = [-1,-1,-1,-1,-1];
array [1..4] of int: X_INTRODUCED_19 = [-1,-1,-1,-1];
array [1..6] of int: X_INTRODUCED_21 = [-1,-1,-1,-1,-1,-1];
var 0..1: X_INTRODUCED_0;
var 0..1: X_INTRODUCED_1;
var 0..1: X_INTRODUCED_2;
var 0..1: X_INTRODUCED_3;
var 0..1: X_INTRODUCED_4;
var 0..1: X_INTRODUCED_5;
var 0..1: X_INTRODUCED_6;
var 0..1: X_INTRODUCED_7;
var 0..1: X_INTRODUCED_8;
var 0..1: X_INTRODUCED_9;
var 0..10: numNeeded:: is_defined_var;
array [1..10] of var int: x:: output_array([1..10]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9];
array [1..11] of var int: X_INTRODUCED_12 ::var_is_introduced  = [numNeeded,X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9];
constraint int_lin_eq(X_INTRODUCED_11,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9],2);
constraint int_lin_eq(X_INTRODUCED_13,X_INTRODUCED_12,0):: defines_var(numNeeded);
constraint int_lin_le(X_INTRODUCED_15,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4],-1);
constraint int_lin_le(X_INTRODUCED_15,[X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9],-1);
constraint int_lin_le(X_INTRODUCED_15,[X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9],-1);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_0,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6],-1);
constraint int_lin_le(X_INTRODUCED_21,[X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_8],-1);
constraint int_lin_le(X_INTRODUCED_19,[X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_7,X_INTRODUCED_9],-1);
solve  satisfy;
