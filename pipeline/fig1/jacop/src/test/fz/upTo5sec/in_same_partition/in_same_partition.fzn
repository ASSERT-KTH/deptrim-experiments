var set of 1..6: X_INTRODUCED_0;
var set of 1..6: X_INTRODUCED_1;
var set of 1..6: X_INTRODUCED_2;
var 6..6: var1:: output_var;
var 2..2: var2:: output_var;
var bool: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
array [1..3] of var set of int: s:: output_array([1..3]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2];
constraint array_bool_or([X_INTRODUCED_5,X_INTRODUCED_8,X_INTRODUCED_11],true);
constraint set_eq(X_INTRODUCED_0,{1,3});
constraint set_eq(X_INTRODUCED_1,4..4);
constraint set_eq(X_INTRODUCED_2,{2,6});
constraint set_in_reif(2,X_INTRODUCED_0,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint set_in_reif(6,X_INTRODUCED_0,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint array_bool_and([X_INTRODUCED_3,X_INTRODUCED_4],X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint set_in_reif(2,X_INTRODUCED_1,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint set_in_reif(6,X_INTRODUCED_1,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint array_bool_and([X_INTRODUCED_6,X_INTRODUCED_7],X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint set_in_reif(2,X_INTRODUCED_2,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint set_in_reif(6,X_INTRODUCED_2,X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint array_bool_and([X_INTRODUCED_9,X_INTRODUCED_10],X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
solve  satisfy;
