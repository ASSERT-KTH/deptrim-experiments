predicate jacop_count(array [int] of var int: x,int: y,var int: c);
array [1..28] of int: X_INTRODUCED_35 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
var 0..27: X_INTRODUCED_0;
var 0..27: X_INTRODUCED_1;
var 0..27: X_INTRODUCED_2;
var 0..27: X_INTRODUCED_3;
var 0..27: X_INTRODUCED_4;
var 0..27: X_INTRODUCED_5;
var 0..27: X_INTRODUCED_6;
var 0..27: X_INTRODUCED_7;
var 0..27: X_INTRODUCED_8;
var 0..27: X_INTRODUCED_9;
var 0..27: X_INTRODUCED_10;
var 0..27: X_INTRODUCED_11;
var 0..27: X_INTRODUCED_12;
var 0..27: X_INTRODUCED_13;
var 0..27: X_INTRODUCED_14;
var 0..27: X_INTRODUCED_15;
var 0..27: X_INTRODUCED_16;
var 0..27: X_INTRODUCED_17;
var 0..27: X_INTRODUCED_18;
var 0..27: X_INTRODUCED_19;
var 0..27: X_INTRODUCED_20;
var 0..27: X_INTRODUCED_21;
var 0..27: X_INTRODUCED_22;
var 0..27: X_INTRODUCED_23;
var 0..27: X_INTRODUCED_24;
var 0..27: X_INTRODUCED_25;
var 0..27: X_INTRODUCED_26;
var 0..27: X_INTRODUCED_27;
array [1..29] of var int: s:: output_array([0..28]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27,5];
array [1..28] of var int: X_INTRODUCED_34 ::var_is_introduced  = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3,X_INTRODUCED_4,X_INTRODUCED_5,X_INTRODUCED_6,X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_9,X_INTRODUCED_10,X_INTRODUCED_11,X_INTRODUCED_12,X_INTRODUCED_13,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,X_INTRODUCED_20,X_INTRODUCED_21,X_INTRODUCED_22,X_INTRODUCED_23,X_INTRODUCED_24,X_INTRODUCED_25,X_INTRODUCED_26,X_INTRODUCED_27];
constraint int_lin_le(X_INTRODUCED_35,X_INTRODUCED_34,29):: domain;
constraint jacop_count(s,0,X_INTRODUCED_0):: domain;
constraint jacop_count(s,1,X_INTRODUCED_1):: domain;
constraint jacop_count(s,2,X_INTRODUCED_2):: domain;
constraint jacop_count(s,3,X_INTRODUCED_3):: domain;
constraint jacop_count(s,4,X_INTRODUCED_4):: domain;
constraint jacop_count(s,5,X_INTRODUCED_5):: domain;
constraint jacop_count(s,6,X_INTRODUCED_6):: domain;
constraint jacop_count(s,7,X_INTRODUCED_7):: domain;
constraint jacop_count(s,8,X_INTRODUCED_8):: domain;
constraint jacop_count(s,9,X_INTRODUCED_9):: domain;
constraint jacop_count(s,10,X_INTRODUCED_10):: domain;
constraint jacop_count(s,11,X_INTRODUCED_11):: domain;
constraint jacop_count(s,12,X_INTRODUCED_12):: domain;
constraint jacop_count(s,13,X_INTRODUCED_13):: domain;
constraint jacop_count(s,14,X_INTRODUCED_14):: domain;
constraint jacop_count(s,15,X_INTRODUCED_15):: domain;
constraint jacop_count(s,16,X_INTRODUCED_16):: domain;
constraint jacop_count(s,17,X_INTRODUCED_17):: domain;
constraint jacop_count(s,18,X_INTRODUCED_18):: domain;
constraint jacop_count(s,19,X_INTRODUCED_19):: domain;
constraint jacop_count(s,20,X_INTRODUCED_20):: domain;
constraint jacop_count(s,21,X_INTRODUCED_21):: domain;
constraint jacop_count(s,22,X_INTRODUCED_22):: domain;
constraint jacop_count(s,23,X_INTRODUCED_23):: domain;
constraint jacop_count(s,24,X_INTRODUCED_24):: domain;
constraint jacop_count(s,25,X_INTRODUCED_25):: domain;
constraint jacop_count(s,26,X_INTRODUCED_26):: domain;
constraint jacop_count(s,27,X_INTRODUCED_27):: domain;
solve :: int_search(s,first_fail,indomain_middle,complete) satisfy;
