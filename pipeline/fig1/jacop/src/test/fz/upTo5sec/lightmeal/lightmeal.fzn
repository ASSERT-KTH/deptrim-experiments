array [1..8] of int: X_INTRODUCED_2 = [1,6,5,7,2,4,2,6];
array [1..4] of int: X_INTRODUCED_9 = [1,-1,-1,-1];
var 1..2: appetiser:: output_var;
var {0,3,4}: meat;
var {0,5,6}: fish;
var 1..8: main:: output_var;
var 7..8: dessert:: output_var;
var 3..10: sum_calories:: output_var:: is_defined_var;
var 1..7: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var 1..7: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var 1..7: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
constraint array_int_element(dessert,X_INTRODUCED_2,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint array_int_element(appetiser,X_INTRODUCED_2,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint array_int_element(main,X_INTRODUCED_2,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint int_lin_eq(X_INTRODUCED_9,[sum_calories,X_INTRODUCED_6,X_INTRODUCED_4,X_INTRODUCED_1],0):: defines_var(sum_calories);
constraint array_bool_or([X_INTRODUCED_12,X_INTRODUCED_15],true);
constraint int_eq_reif(meat,0,X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint int_eq_reif(main,fish,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint array_bool_and([X_INTRODUCED_10,X_INTRODUCED_11],X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint int_eq_reif(fish,0,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
constraint int_eq_reif(main,meat,X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
constraint array_bool_and([X_INTRODUCED_13,X_INTRODUCED_14],X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
solve :: int_search([appetiser,meat,fish,main,dessert,sum_calories],first_fail,indomain_min,complete) satisfy;
