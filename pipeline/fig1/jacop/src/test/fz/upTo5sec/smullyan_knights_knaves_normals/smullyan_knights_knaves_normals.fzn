array [1..2] of int: X_INTRODUCED_3 = [1,-1];
var 1..3: X_INTRODUCED_0;
var 1..3: X_INTRODUCED_1;
var 1..3: X_INTRODUCED_2;
var bool: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_13 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_14 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_21 ::var_is_introduced :: is_defined_var;
array [1..3] of var int: p:: output_array([1..3]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2];
constraint int_lin_ne(X_INTRODUCED_3,[X_INTRODUCED_0,X_INTRODUCED_1],0);
constraint int_lin_ne(X_INTRODUCED_3,[X_INTRODUCED_0,X_INTRODUCED_2],0);
constraint int_lin_ne(X_INTRODUCED_3,[X_INTRODUCED_1,X_INTRODUCED_2],0);
constraint array_bool_or([X_INTRODUCED_7,X_INTRODUCED_8,X_INTRODUCED_10],true);
constraint array_bool_or([X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_17],true);
constraint array_bool_or([X_INTRODUCED_11,X_INTRODUCED_19,X_INTRODUCED_21],true);
constraint int_ne_reif(X_INTRODUCED_2,2,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint bool_eq_reif(X_INTRODUCED_4,false,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_eq_reif(X_INTRODUCED_2,3,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint array_bool_and([X_INTRODUCED_5,X_INTRODUCED_6],X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint int_eq_reif(X_INTRODUCED_2,2,X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint int_eq_reif(X_INTRODUCED_2,1,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint array_bool_and([X_INTRODUCED_4,X_INTRODUCED_9],X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint int_eq_reif(X_INTRODUCED_0,2,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint bool_eq_reif(X_INTRODUCED_11,false,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint int_eq_reif(X_INTRODUCED_1,3,X_INTRODUCED_13):: defines_var(X_INTRODUCED_13);
constraint array_bool_and([X_INTRODUCED_12,X_INTRODUCED_13],X_INTRODUCED_14):: defines_var(X_INTRODUCED_14);
constraint int_eq_reif(X_INTRODUCED_1,2,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint int_eq_reif(X_INTRODUCED_1,1,X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint array_bool_and([X_INTRODUCED_11,X_INTRODUCED_16],X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint int_eq_reif(X_INTRODUCED_0,3,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint array_bool_and([X_INTRODUCED_12,X_INTRODUCED_18],X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
constraint int_eq_reif(X_INTRODUCED_0,1,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint array_bool_and([X_INTRODUCED_11,X_INTRODUCED_20],X_INTRODUCED_21):: defines_var(X_INTRODUCED_21);
solve  satisfy;
