array [1..2] of int: X_INTRODUCED_4 = [-1,1];
var 0..1: X_INTRODUCED_0;
var 0..1: X_INTRODUCED_1;
var 0..1: X_INTRODUCED_2;
var 0..1: X_INTRODUCED_3;
var 1..4: start:: output_var;
var 1..4: end:: output_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
array [1..4] of var int: x:: output_array([1..4]) = [X_INTRODUCED_0,X_INTRODUCED_1,X_INTRODUCED_2,X_INTRODUCED_3];
constraint int_lin_le(X_INTRODUCED_4,[end,start],0);
constraint int_eq_reif(X_INTRODUCED_0,1,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_eq_reif(X_INTRODUCED_1,1,X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint int_eq_reif(X_INTRODUCED_2,1,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint int_eq_reif(X_INTRODUCED_3,1,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint int_le_reif(start,1,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint int_le_reif(2,end,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint int_le_reif(start,2,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint array_bool_and([X_INTRODUCED_6,X_INTRODUCED_7],X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint int_le_reif(3,end,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint int_le_reif(start,3,X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint array_bool_and([X_INTRODUCED_9,X_INTRODUCED_10],X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint int_le_reif(4,end,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
solve  satisfy;
