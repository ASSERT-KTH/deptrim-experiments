array [1..6] of int: X_INTRODUCED_14 = [-1,-1,-1,-1,-1,-1];
array [1..4] of int: X_INTRODUCED_23 = [1,-1,-1,-1];
var bool: Alan:: output_var;
var bool: Brian:: output_var;
var bool: Charlie:: output_var;
var bool: Dave:: output_var;
var bool: Eddie:: output_var;
var bool: Freddie:: output_var;
var 2..3: AlanC:: output_var:: is_defined_var;
var 2..3: BrianC:: output_var:: is_defined_var;
var 2..3: CharlieC:: output_var:: is_defined_var;
var 2..3: DaveC:: output_var:: is_defined_var;
var 2..3: EddieC:: output_var:: is_defined_var;
var 2..3: FreddieC:: output_var:: is_defined_var;
var bool: X_INTRODUCED_1 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_2 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_3 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_4 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_5 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_6 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_7 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_8 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_9 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_10 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_11 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_12 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_15 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_16 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_17 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_18 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_19 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_20 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_24 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_25 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_28 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_29 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_30 ::var_is_introduced :: is_defined_var;
var 0..1: X_INTRODUCED_31 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_35 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_36 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_37 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_38 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_39 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
constraint int_lin_eq(X_INTRODUCED_14,[X_INTRODUCED_2,X_INTRODUCED_4,X_INTRODUCED_6,X_INTRODUCED_8,X_INTRODUCED_10,X_INTRODUCED_12],-4);
constraint int_lin_eq(X_INTRODUCED_23,[FreddieC,X_INTRODUCED_20,X_INTRODUCED_18,X_INTRODUCED_16],0):: defines_var(FreddieC);
constraint int_lin_eq(X_INTRODUCED_23,[EddieC,X_INTRODUCED_20,X_INTRODUCED_18,X_INTRODUCED_25],0):: defines_var(EddieC);
constraint int_lin_eq(X_INTRODUCED_23,[DaveC,X_INTRODUCED_25,X_INTRODUCED_16,X_INTRODUCED_18],0):: defines_var(DaveC);
constraint int_lin_eq(X_INTRODUCED_23,[CharlieC,X_INTRODUCED_25,X_INTRODUCED_31,X_INTRODUCED_29],0):: defines_var(CharlieC);
constraint int_lin_eq(X_INTRODUCED_23,[BrianC,X_INTRODUCED_18,X_INTRODUCED_16,X_INTRODUCED_29],0):: defines_var(BrianC);
constraint int_lin_eq(X_INTRODUCED_23,[AlanC,X_INTRODUCED_20,X_INTRODUCED_31,X_INTRODUCED_29],0):: defines_var(AlanC);
constraint bool_clause([X_INTRODUCED_35],[Freddie]);
constraint bool_clause([X_INTRODUCED_36],[Eddie]);
constraint bool_clause([X_INTRODUCED_37],[Dave]);
constraint bool_clause([X_INTRODUCED_38],[Charlie]);
constraint bool_clause([X_INTRODUCED_39],[Brian]);
constraint bool_clause([X_INTRODUCED_40],[Alan]);
constraint int_eq_reif(AlanC,2,X_INTRODUCED_1):: defines_var(X_INTRODUCED_1);
constraint bool2int(X_INTRODUCED_1,X_INTRODUCED_2):: defines_var(X_INTRODUCED_2);
constraint int_eq_reif(BrianC,2,X_INTRODUCED_3):: defines_var(X_INTRODUCED_3);
constraint bool2int(X_INTRODUCED_3,X_INTRODUCED_4):: defines_var(X_INTRODUCED_4);
constraint int_eq_reif(CharlieC,2,X_INTRODUCED_5):: defines_var(X_INTRODUCED_5);
constraint bool2int(X_INTRODUCED_5,X_INTRODUCED_6):: defines_var(X_INTRODUCED_6);
constraint int_eq_reif(DaveC,2,X_INTRODUCED_7):: defines_var(X_INTRODUCED_7);
constraint bool2int(X_INTRODUCED_7,X_INTRODUCED_8):: defines_var(X_INTRODUCED_8);
constraint int_eq_reif(EddieC,2,X_INTRODUCED_9):: defines_var(X_INTRODUCED_9);
constraint bool2int(X_INTRODUCED_9,X_INTRODUCED_10):: defines_var(X_INTRODUCED_10);
constraint int_eq_reif(FreddieC,2,X_INTRODUCED_11):: defines_var(X_INTRODUCED_11);
constraint bool2int(X_INTRODUCED_11,X_INTRODUCED_12):: defines_var(X_INTRODUCED_12);
constraint bool_eq_reif(Alan,false,X_INTRODUCED_15):: defines_var(X_INTRODUCED_15);
constraint bool2int(X_INTRODUCED_15,X_INTRODUCED_16):: defines_var(X_INTRODUCED_16);
constraint bool_eq_reif(Charlie,false,X_INTRODUCED_17):: defines_var(X_INTRODUCED_17);
constraint bool2int(X_INTRODUCED_17,X_INTRODUCED_18):: defines_var(X_INTRODUCED_18);
constraint bool_eq_reif(Dave,false,X_INTRODUCED_19):: defines_var(X_INTRODUCED_19);
constraint bool2int(X_INTRODUCED_19,X_INTRODUCED_20):: defines_var(X_INTRODUCED_20);
constraint bool_eq_reif(Freddie,false,X_INTRODUCED_24):: defines_var(X_INTRODUCED_24);
constraint bool2int(X_INTRODUCED_24,X_INTRODUCED_25):: defines_var(X_INTRODUCED_25);
constraint bool_eq_reif(Eddie,false,X_INTRODUCED_28):: defines_var(X_INTRODUCED_28);
constraint bool2int(X_INTRODUCED_28,X_INTRODUCED_29):: defines_var(X_INTRODUCED_29);
constraint bool_eq_reif(Brian,false,X_INTRODUCED_30):: defines_var(X_INTRODUCED_30);
constraint bool2int(X_INTRODUCED_30,X_INTRODUCED_31):: defines_var(X_INTRODUCED_31);
constraint array_bool_and([X_INTRODUCED_15,X_INTRODUCED_17,X_INTRODUCED_19],X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
constraint array_bool_and([X_INTRODUCED_17,X_INTRODUCED_19,X_INTRODUCED_24],X_INTRODUCED_36):: defines_var(X_INTRODUCED_36);
constraint array_bool_and([X_INTRODUCED_15,X_INTRODUCED_17,X_INTRODUCED_24],X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
constraint array_bool_and([X_INTRODUCED_24,X_INTRODUCED_28,X_INTRODUCED_30],X_INTRODUCED_38):: defines_var(X_INTRODUCED_38);
constraint array_bool_and([X_INTRODUCED_15,X_INTRODUCED_17,X_INTRODUCED_28],X_INTRODUCED_39):: defines_var(X_INTRODUCED_39);
constraint array_bool_and([X_INTRODUCED_19,X_INTRODUCED_28,X_INTRODUCED_30],X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
solve  satisfy;
