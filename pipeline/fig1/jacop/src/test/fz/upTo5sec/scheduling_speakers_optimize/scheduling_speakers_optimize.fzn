array [1..2] of int: X_INTRODUCED_34 = [1,-1];
var {1,4,5}: X_INTRODUCED_0;
var {1,3,4,6}: X_INTRODUCED_2;
var -1..1: X_INTRODUCED_6;
var -1..1: X_INTRODUCED_8;
var -1..1: X_INTRODUCED_14;
var -1..1: X_INTRODUCED_15;
var -1..1: X_INTRODUCED_16;
var -1..1: X_INTRODUCED_17;
var -1..1: X_INTRODUCED_18;
var -1..1: X_INTRODUCED_19;
var -1..1: X_INTRODUCED_23;
var 1..6: X_INTRODUCED_29 ::var_is_introduced ;
var 1..6: X_INTRODUCED_30 ::var_is_introduced ;
var bool: X_INTRODUCED_35 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_37 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_39 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_40 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_41 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_42 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_43 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_44 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_46 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_47 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_48 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_49 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_53 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_54 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_57 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_58 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_62 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_63 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_64 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_65 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_66 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_67 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_68 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_69 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_70 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_71 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_72 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_73 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_74 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_75 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_76 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_77 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_79 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_80 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_86 ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_87 ::var_is_introduced :: is_defined_var;
var 5..5: X_INTRODUCED_32 ::var_is_introduced  = 5;
var bool: X_INTRODUCED_50 ::var_is_introduced :: is_defined_var = false;
var bool: X_INTRODUCED_55 ::var_is_introduced :: is_defined_var = false;
var bool: X_INTRODUCED_59 ::var_is_introduced :: is_defined_var = false;
var bool: X_INTRODUCED_81 ::var_is_introduced :: is_defined_var = false;
array [1..3] of var int: starting_slot:: output_array([1..3]) = [X_INTRODUCED_0,4,X_INTRODUCED_2];
array [1..3] of var int: ending_slot:: output_array([1..3]) = [X_INTRODUCED_0,5,X_INTRODUCED_2];
array [1..18] of var int: m:: output_array([1..6,1..3]) = [X_INTRODUCED_6,-1,X_INTRODUCED_8,-1,-1,-1,-1,-1,X_INTRODUCED_14,X_INTRODUCED_15,X_INTRODUCED_16,X_INTRODUCED_17,X_INTRODUCED_18,X_INTRODUCED_19,-1,-1,-1,X_INTRODUCED_23];
constraint int_max(5,X_INTRODUCED_0,X_INTRODUCED_29);
constraint int_max(X_INTRODUCED_2,X_INTRODUCED_29,X_INTRODUCED_30);
constraint array_bool_or([X_INTRODUCED_35,X_INTRODUCED_37],true);
constraint array_bool_or([X_INTRODUCED_39,X_INTRODUCED_40],true);
constraint array_bool_or([X_INTRODUCED_41,X_INTRODUCED_42],true);
constraint bool_clause([X_INTRODUCED_44],[X_INTRODUCED_43]);
constraint int_ne(X_INTRODUCED_6,-1);
constraint bool_clause([X_INTRODUCED_47],[X_INTRODUCED_46]);
constraint int_ne(X_INTRODUCED_8,-1);
constraint bool_clause([X_INTRODUCED_65],[X_INTRODUCED_64]);
constraint int_ne(X_INTRODUCED_14,-1);
constraint bool_clause([X_INTRODUCED_69],[X_INTRODUCED_68]);
constraint int_ne(X_INTRODUCED_15,-1);
constraint bool_clause([X_INTRODUCED_71],[X_INTRODUCED_70]);
constraint int_ne(X_INTRODUCED_16,-1);
constraint bool_clause([X_INTRODUCED_75],[X_INTRODUCED_74]);
constraint int_ne(X_INTRODUCED_17,-1);
constraint bool_clause([X_INTRODUCED_77],[X_INTRODUCED_76]);
constraint int_ne(X_INTRODUCED_18,-1);
constraint int_ne(X_INTRODUCED_19,-1);
constraint bool_clause([X_INTRODUCED_87],[X_INTRODUCED_86]);
constraint int_ne(X_INTRODUCED_23,-1);
constraint int_eq(X_INTRODUCED_19,1);
constraint int_lin_le_reif([-1],[X_INTRODUCED_0],-6,X_INTRODUCED_35):: defines_var(X_INTRODUCED_35);
constraint int_lin_le_reif([1],[X_INTRODUCED_0],3,X_INTRODUCED_37):: defines_var(X_INTRODUCED_37);
constraint int_lin_le_reif(X_INTRODUCED_34,[X_INTRODUCED_2,X_INTRODUCED_0],-1,X_INTRODUCED_39):: defines_var(X_INTRODUCED_39);
constraint int_lin_le_reif(X_INTRODUCED_34,[X_INTRODUCED_0,X_INTRODUCED_2],-1,X_INTRODUCED_40):: defines_var(X_INTRODUCED_40);
constraint int_lin_le_reif([1],[X_INTRODUCED_2],3,X_INTRODUCED_41):: defines_var(X_INTRODUCED_41);
constraint int_lin_le_reif([-1],[X_INTRODUCED_2],-6,X_INTRODUCED_42):: defines_var(X_INTRODUCED_42);
constraint int_le_reif(X_INTRODUCED_0,1,X_INTRODUCED_43):: defines_var(X_INTRODUCED_43);
constraint int_eq_reif(X_INTRODUCED_6,1,X_INTRODUCED_44):: defines_var(X_INTRODUCED_44);
constraint int_le_reif(X_INTRODUCED_2,1,X_INTRODUCED_46):: defines_var(X_INTRODUCED_46);
constraint int_eq_reif(X_INTRODUCED_8,1,X_INTRODUCED_47):: defines_var(X_INTRODUCED_47);
constraint int_le_reif(2,X_INTRODUCED_0,X_INTRODUCED_48):: defines_var(X_INTRODUCED_48);
constraint int_le_reif(X_INTRODUCED_0,2,X_INTRODUCED_49):: defines_var(X_INTRODUCED_49);
constraint array_bool_and([X_INTRODUCED_48,X_INTRODUCED_49],X_INTRODUCED_50):: defines_var(X_INTRODUCED_50);
constraint int_le_reif(2,X_INTRODUCED_2,X_INTRODUCED_53):: defines_var(X_INTRODUCED_53);
constraint int_le_reif(X_INTRODUCED_2,2,X_INTRODUCED_54):: defines_var(X_INTRODUCED_54);
constraint array_bool_and([X_INTRODUCED_53,X_INTRODUCED_54],X_INTRODUCED_55):: defines_var(X_INTRODUCED_55);
constraint int_le_reif(3,X_INTRODUCED_0,X_INTRODUCED_57):: defines_var(X_INTRODUCED_57);
constraint int_le_reif(X_INTRODUCED_0,3,X_INTRODUCED_58):: defines_var(X_INTRODUCED_58);
constraint array_bool_and([X_INTRODUCED_57,X_INTRODUCED_58],X_INTRODUCED_59):: defines_var(X_INTRODUCED_59);
constraint int_le_reif(3,X_INTRODUCED_2,X_INTRODUCED_62):: defines_var(X_INTRODUCED_62);
constraint int_le_reif(X_INTRODUCED_2,3,X_INTRODUCED_63):: defines_var(X_INTRODUCED_63);
constraint array_bool_and([X_INTRODUCED_62,X_INTRODUCED_63],X_INTRODUCED_64):: defines_var(X_INTRODUCED_64);
constraint int_eq_reif(X_INTRODUCED_14,1,X_INTRODUCED_65):: defines_var(X_INTRODUCED_65);
constraint int_le_reif(4,X_INTRODUCED_0,X_INTRODUCED_66):: defines_var(X_INTRODUCED_66);
constraint int_le_reif(X_INTRODUCED_0,4,X_INTRODUCED_67):: defines_var(X_INTRODUCED_67);
constraint array_bool_and([X_INTRODUCED_66,X_INTRODUCED_67],X_INTRODUCED_68):: defines_var(X_INTRODUCED_68);
constraint int_eq_reif(X_INTRODUCED_15,1,X_INTRODUCED_69):: defines_var(X_INTRODUCED_69);
constraint int_le_reif(4,4,X_INTRODUCED_70):: defines_var(X_INTRODUCED_70);
constraint int_eq_reif(X_INTRODUCED_16,1,X_INTRODUCED_71):: defines_var(X_INTRODUCED_71);
constraint int_le_reif(4,X_INTRODUCED_2,X_INTRODUCED_72):: defines_var(X_INTRODUCED_72);
constraint int_le_reif(X_INTRODUCED_2,4,X_INTRODUCED_73):: defines_var(X_INTRODUCED_73);
constraint array_bool_and([X_INTRODUCED_72,X_INTRODUCED_73],X_INTRODUCED_74):: defines_var(X_INTRODUCED_74);
constraint int_eq_reif(X_INTRODUCED_17,1,X_INTRODUCED_75):: defines_var(X_INTRODUCED_75);
constraint int_le_reif(5,X_INTRODUCED_0,X_INTRODUCED_76):: defines_var(X_INTRODUCED_76);
constraint int_eq_reif(X_INTRODUCED_18,1,X_INTRODUCED_77):: defines_var(X_INTRODUCED_77);
constraint int_le_reif(5,X_INTRODUCED_2,X_INTRODUCED_79):: defines_var(X_INTRODUCED_79);
constraint int_le_reif(X_INTRODUCED_2,5,X_INTRODUCED_80):: defines_var(X_INTRODUCED_80);
constraint array_bool_and([X_INTRODUCED_79,X_INTRODUCED_80],X_INTRODUCED_81):: defines_var(X_INTRODUCED_81);
constraint int_le_reif(6,X_INTRODUCED_2,X_INTRODUCED_86):: defines_var(X_INTRODUCED_86);
constraint int_eq_reif(X_INTRODUCED_23,1,X_INTRODUCED_87):: defines_var(X_INTRODUCED_87);
solve  minimize X_INTRODUCED_30;
