predicate jacop_diff2(array [int] of var int: rects);
predicate jacop_list_diff2(array [int] of var int: x, array [int] of var int: y, array [int] of var int: lx, array [int] of var int: ly);
predicate jacop_maximum(var int: m, array [int] of var int: x);
var 1..1000: INT____1 :: is_defined_var :: var_is_introduced;
var 2..1000: INT____2 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____3 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____4 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____5 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____6 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____7 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____8 :: is_defined_var :: var_is_introduced;
array [1..34] of var 1..2: d = [1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1];
array [1..34] of set of int: dependencies = [{3, 16, 18}, {5, 9, 12}, {4, 8, 10}, 5..5, {6, 7, 11}, 8..8, 9..9, 10..11, {12, 14, 20}, 13..13, 14..14, 15..15, 16..16, {}, 17..17, {18, 19, 30}, {20, 21, 29}, 22..22, 23..23, 24..24, 25..25, 28..28, {26, 33}, {27, 34}, 29..29, 31..31, 32..32, 30..30, {}, {}, 33..33, 34..34, {}, {}];
var int: end :: output_var;
array [1..34] of var 1..10: r :: output_array([1..34]);
array [1..34] of var 0..1000: t :: output_array([1..34]);
array [1..26] of var 0..1000: t_add = [t[1], t[2], t[3], t[4], t[5], t[8], t[9], t[10], t[11], t[12], t[14], t[16], t[17], t[18], t[19], t[20], t[21], t[23], t[24], t[28], t[29], t[30], t[31], t[32], t[33], t[34]];
array [1..8] of var 0..1000: t_mul = [t[6], t[7], t[13], t[15], t[22], t[25], t[26], t[27]];
constraint int_le(r[1], 2);
constraint int_le(r[2], 2);
constraint int_le(r[3], 2);
constraint int_le(r[4], 2);
constraint int_le(r[5], 2);
constraint int_le(r[6], 2);
constraint int_le(r[7], 2);
constraint int_le(r[8], 2);
constraint int_le(r[9], 2);
constraint int_le(r[10], 2);
constraint int_le(r[11], 2);
constraint int_le(r[12], 2);
constraint int_le(r[13], 2);
constraint int_le(r[14], 2);
constraint int_le(r[15], 2);
constraint int_le(r[16], 2);
constraint int_le(r[17], 2);
constraint int_le(r[18], 2);
constraint int_le(r[19], 2);
constraint int_le(r[20], 2);
constraint int_le(r[21], 2);
constraint int_le(r[22], 2);
constraint int_le(r[23], 2);
constraint int_le(r[24], 2);
constraint int_le(r[25], 2);
constraint int_le(r[26], 2);
constraint int_le(r[27], 2);
constraint int_le(r[28], 2);
constraint int_le(r[29], 2);
constraint int_le(r[30], 2);
constraint int_le(r[31], 2);
constraint int_le(r[32], 2);
constraint int_le(r[33], 2);
constraint int_le(r[34], 2);
constraint int_lin_eq([-1, 1], [INT____1, t[14]], -1) :: defines_var(INT____1);
constraint int_lin_eq([-1, 1], [INT____2, t[25]], -2) :: defines_var(INT____2);
constraint int_lin_eq([-1, 1], [INT____3, t[29]], -1) :: defines_var(INT____3);
constraint int_lin_eq([-1, 1], [INT____4, t[30]], -1) :: defines_var(INT____4);
constraint int_lin_eq([-1, 1], [INT____5, t[31]], -1) :: defines_var(INT____5);
constraint int_lin_eq([-1, 1], [INT____6, t[32]], -1) :: defines_var(INT____6);
constraint int_lin_eq([-1, 1], [INT____7, t[33]], -1) :: defines_var(INT____7);
constraint int_lin_eq([-1, 1], [INT____8, t[34]], -1) :: defines_var(INT____8);
constraint int_lin_le([1, -1], [t[1], t[3]], -1);
constraint int_lin_le([1, -1], [t[1], t[16]], -1);
constraint int_lin_le([1, -1], [t[1], t[18]], -1);
constraint int_lin_le([1, -1], [t[2], t[5]], -1);
constraint int_lin_le([1, -1], [t[2], t[9]], -1);
constraint int_lin_le([1, -1], [t[2], t[12]], -1);
constraint int_lin_le([1, -1], [t[3], t[4]], -1);
constraint int_lin_le([1, -1], [t[3], t[8]], -1);
constraint int_lin_le([1, -1], [t[3], t[10]], -1);
constraint int_lin_le([1, -1], [t[4], t[5]], -1);
constraint int_lin_le([1, -1], [t[5], t[6]], -1);
constraint int_lin_le([1, -1], [t[5], t[7]], -1);
constraint int_lin_le([1, -1], [t[5], t[11]], -1);
constraint int_lin_le([1, -1], [t[6], t[8]], -2);
constraint int_lin_le([1, -1], [t[7], t[9]], -2);
constraint int_lin_le([1, -1], [t[8], t[10]], -1);
constraint int_lin_le([1, -1], [t[8], t[11]], -1);
constraint int_lin_le([1, -1], [t[9], t[12]], -1);
constraint int_lin_le([1, -1], [t[9], t[14]], -1);
constraint int_lin_le([1, -1], [t[9], t[20]], -1);
constraint int_lin_le([1, -1], [t[10], t[13]], -1);
constraint int_lin_le([1, -1], [t[11], t[14]], -1);
constraint int_lin_le([1, -1], [t[12], t[15]], -1);
constraint int_lin_le([1, -1], [t[13], t[16]], -2);
constraint int_lin_le([1, -1], [t[15], t[17]], -2);
constraint int_lin_le([1, -1], [t[16], t[18]], -1);
constraint int_lin_le([1, -1], [t[16], t[19]], -1);
constraint int_lin_le([1, -1], [t[16], t[30]], -1);
constraint int_lin_le([1, -1], [t[17], t[20]], -1);
constraint int_lin_le([1, -1], [t[17], t[21]], -1);
constraint int_lin_le([1, -1], [t[17], t[29]], -1);
constraint int_lin_le([1, -1], [t[18], t[22]], -1);
constraint int_lin_le([1, -1], [t[19], t[23]], -1);
constraint int_lin_le([1, -1], [t[20], t[24]], -1);
constraint int_lin_le([1, -1], [t[21], t[25]], -1);
constraint int_lin_le([1, -1], [t[22], t[28]], -2);
constraint int_lin_le([1, -1], [t[23], t[26]], -1);
constraint int_lin_le([1, -1], [t[23], t[33]], -1);
constraint int_lin_le([1, -1], [t[24], t[27]], -1);
constraint int_lin_le([1, -1], [t[24], t[34]], -1);
constraint int_lin_le([1, -1], [t[25], t[29]], -2);
constraint int_lin_le([1, -1], [t[26], t[31]], -2);
constraint int_lin_le([1, -1], [t[27], t[32]], -2);
constraint int_lin_le([1, -1], [t[28], t[30]], -1);
constraint int_lin_le([1, -1], [t[31], t[33]], -1);
constraint int_lin_le([1, -1], [t[32], t[34]], -1);
constraint jacop_list_diff2([t[6], t[7], t[13], t[15], t[22], t[25], t[26], t[27]], [r[6], r[7], r[13], r[15], r[22], r[25], r[26], r[27]], [2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1]);
constraint jacop_list_diff2([t[1], t[2], t[3], t[4], t[5], t[8], t[9], t[10], t[11], t[12], t[14], t[16], t[17], t[18], t[19], t[20], t[21], t[23], t[24], t[28], t[29], t[30], t[31], t[32], t[33], t[34]], [r[1], r[2], r[3], r[4], r[5], r[8], r[9], r[10], r[11], r[12], r[14], r[16], r[17], r[18], r[19], r[20], r[21], r[23], r[24], r[28], r[29], r[30], r[31], r[32], r[33], r[34]], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
constraint jacop_maximum(end, [INT____1, INT____2, INT____3, INT____4, INT____5, INT____6, INT____7, INT____8]);
solve :: seq_search([int_search(t, smallest, indomain_min, complete), int_search(r, input_order, indomain_min, complete)]) minimize end;
