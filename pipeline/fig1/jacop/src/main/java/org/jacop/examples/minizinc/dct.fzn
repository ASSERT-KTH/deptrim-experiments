predicate jacop_diff2(array [int] of var int: rects);
predicate jacop_list_diff2(array [int] of var int: x, array [int] of var int: y, array [int] of var int: lx, array [int] of var int: ly);
predicate jacop_maximum(var int: m, array [int] of var int: x);
var 1..1000: INT____1 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____2 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____3 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____4 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____5 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____6 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____7 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____8 :: is_defined_var :: var_is_introduced;
array [1..48] of var 1..2: d = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
array [1..48] of set of int: dependencies = [{9, 17, 18}, {9, 20, 21}, {10, 23, 24}, {10, 26, 27}, 11..12, 11..12, 13..14, 13..14, {15, 19}, {15, 25}, 28..28, {16, 30}, 29..29, {16, 32}, 22..22, 31..31, 33..33, 39..39, {33, 35}, 35..35, 37..37, {34, 36, 37, 39}, 36..36, 38..38, {38, 40}, 34..34, 40..40, 45..46, 45..46, 47..47, 47..48, 48..48, 41..41, 41..41, 42..42, 42..42, 43..43, 43..43, 44..44, 44..44, {}, {}, {}, {}, {}, {}, {}, {}];
var int: end :: output_var;
array [1..48] of var 1..10: r :: output_array([1..48]);
array [1..48] of var 0..1000: t :: output_array([1..48]);
array [1..32] of var 0..1000: t_add = [t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14], t[15], t[16], t[33], t[34], t[35], t[36], t[37], t[38], t[39], t[40], t[41], t[42], t[43], t[44], t[45], t[46], t[47], t[48]];
array [1..16] of var 0..1000: t_mul = [t[17], t[18], t[19], t[20], t[21], t[22], t[23], t[24], t[25], t[26], t[27], t[28], t[29], t[30], t[31], t[32]];
constraint int_le(r[1], 2);
constraint int_le(r[2], 2);
constraint int_le(r[3], 2);
constraint int_le(r[4], 2);
constraint int_le(r[5], 2);
constraint int_le(r[6], 2);
constraint int_le(r[7], 2);
constraint int_le(r[8], 2);
constraint int_le(r[9], 2);
constraint int_le(r[10], 2);
constraint int_le(r[11], 2);
constraint int_le(r[12], 2);
constraint int_le(r[13], 2);
constraint int_le(r[14], 2);
constraint int_le(r[15], 2);
constraint int_le(r[16], 2);
constraint int_le(r[17], 2);
constraint int_le(r[18], 2);
constraint int_le(r[19], 2);
constraint int_le(r[20], 2);
constraint int_le(r[21], 2);
constraint int_le(r[22], 2);
constraint int_le(r[23], 2);
constraint int_le(r[24], 2);
constraint int_le(r[25], 2);
constraint int_le(r[26], 2);
constraint int_le(r[27], 2);
constraint int_le(r[28], 2);
constraint int_le(r[29], 2);
constraint int_le(r[30], 2);
constraint int_le(r[31], 2);
constraint int_le(r[32], 2);
constraint int_le(r[33], 2);
constraint int_le(r[34], 2);
constraint int_le(r[35], 2);
constraint int_le(r[36], 2);
constraint int_le(r[37], 2);
constraint int_le(r[38], 2);
constraint int_le(r[39], 2);
constraint int_le(r[40], 2);
constraint int_le(r[41], 2);
constraint int_le(r[42], 2);
constraint int_le(r[43], 2);
constraint int_le(r[44], 2);
constraint int_le(r[45], 2);
constraint int_le(r[46], 2);
constraint int_le(r[47], 2);
constraint int_le(r[48], 2);
constraint int_lin_eq([-1, 1], [INT____1, t[41]], -1) :: defines_var(INT____1);
constraint int_lin_eq([-1, 1], [INT____2, t[42]], -1) :: defines_var(INT____2);
constraint int_lin_eq([-1, 1], [INT____3, t[43]], -1) :: defines_var(INT____3);
constraint int_lin_eq([-1, 1], [INT____4, t[44]], -1) :: defines_var(INT____4);
constraint int_lin_eq([-1, 1], [INT____5, t[45]], -1) :: defines_var(INT____5);
constraint int_lin_eq([-1, 1], [INT____6, t[46]], -1) :: defines_var(INT____6);
constraint int_lin_eq([-1, 1], [INT____7, t[47]], -1) :: defines_var(INT____7);
constraint int_lin_eq([-1, 1], [INT____8, t[48]], -1) :: defines_var(INT____8);
constraint int_lin_le([1, -1], [t[1], t[9]], -1);
constraint int_lin_le([1, -1], [t[1], t[17]], -1);
constraint int_lin_le([1, -1], [t[1], t[18]], -1);
constraint int_lin_le([1, -1], [t[2], t[9]], -1);
constraint int_lin_le([1, -1], [t[2], t[20]], -1);
constraint int_lin_le([1, -1], [t[2], t[21]], -1);
constraint int_lin_le([1, -1], [t[3], t[10]], -1);
constraint int_lin_le([1, -1], [t[3], t[23]], -1);
constraint int_lin_le([1, -1], [t[3], t[24]], -1);
constraint int_lin_le([1, -1], [t[4], t[10]], -1);
constraint int_lin_le([1, -1], [t[4], t[26]], -1);
constraint int_lin_le([1, -1], [t[4], t[27]], -1);
constraint int_lin_le([1, -1], [t[5], t[11]], -1);
constraint int_lin_le([1, -1], [t[5], t[12]], -1);
constraint int_lin_le([1, -1], [t[6], t[11]], -1);
constraint int_lin_le([1, -1], [t[6], t[12]], -1);
constraint int_lin_le([1, -1], [t[7], t[13]], -1);
constraint int_lin_le([1, -1], [t[7], t[14]], -1);
constraint int_lin_le([1, -1], [t[8], t[13]], -1);
constraint int_lin_le([1, -1], [t[8], t[14]], -1);
constraint int_lin_le([1, -1], [t[9], t[15]], -1);
constraint int_lin_le([1, -1], [t[9], t[19]], -1);
constraint int_lin_le([1, -1], [t[10], t[15]], -1);
constraint int_lin_le([1, -1], [t[10], t[25]], -1);
constraint int_lin_le([1, -1], [t[11], t[28]], -1);
constraint int_lin_le([1, -1], [t[12], t[16]], -1);
constraint int_lin_le([1, -1], [t[12], t[30]], -1);
constraint int_lin_le([1, -1], [t[13], t[29]], -1);
constraint int_lin_le([1, -1], [t[14], t[16]], -1);
constraint int_lin_le([1, -1], [t[14], t[32]], -1);
constraint int_lin_le([1, -1], [t[15], t[22]], -1);
constraint int_lin_le([1, -1], [t[16], t[31]], -1);
constraint int_lin_le([1, -1], [t[17], t[33]], -2);
constraint int_lin_le([1, -1], [t[18], t[39]], -2);
constraint int_lin_le([1, -1], [t[19], t[33]], -2);
constraint int_lin_le([1, -1], [t[19], t[35]], -2);
constraint int_lin_le([1, -1], [t[20], t[35]], -2);
constraint int_lin_le([1, -1], [t[21], t[37]], -2);
constraint int_lin_le([1, -1], [t[22], t[34]], -2);
constraint int_lin_le([1, -1], [t[22], t[36]], -2);
constraint int_lin_le([1, -1], [t[22], t[37]], -2);
constraint int_lin_le([1, -1], [t[22], t[39]], -2);
constraint int_lin_le([1, -1], [t[23], t[36]], -2);
constraint int_lin_le([1, -1], [t[24], t[38]], -2);
constraint int_lin_le([1, -1], [t[25], t[38]], -2);
constraint int_lin_le([1, -1], [t[25], t[40]], -2);
constraint int_lin_le([1, -1], [t[26], t[34]], -2);
constraint int_lin_le([1, -1], [t[27], t[40]], -2);
constraint int_lin_le([1, -1], [t[28], t[45]], -2);
constraint int_lin_le([1, -1], [t[28], t[46]], -2);
constraint int_lin_le([1, -1], [t[29], t[45]], -2);
constraint int_lin_le([1, -1], [t[29], t[46]], -2);
constraint int_lin_le([1, -1], [t[30], t[47]], -2);
constraint int_lin_le([1, -1], [t[31], t[47]], -2);
constraint int_lin_le([1, -1], [t[31], t[48]], -2);
constraint int_lin_le([1, -1], [t[32], t[48]], -2);
constraint int_lin_le([1, -1], [t[33], t[41]], -1);
constraint int_lin_le([1, -1], [t[34], t[41]], -1);
constraint int_lin_le([1, -1], [t[35], t[42]], -1);
constraint int_lin_le([1, -1], [t[36], t[42]], -1);
constraint int_lin_le([1, -1], [t[37], t[43]], -1);
constraint int_lin_le([1, -1], [t[38], t[43]], -1);
constraint int_lin_le([1, -1], [t[39], t[44]], -1);
constraint int_lin_le([1, -1], [t[40], t[44]], -1);
constraint jacop_list_diff2([t[17], t[18], t[19], t[20], t[21], t[22], t[23], t[24], t[25], t[26], t[27], t[28], t[29], t[30], t[31], t[32]], [r[17], r[18], r[19], r[20], r[21], r[22], r[23], r[24], r[25], r[26], r[27], r[28], r[29], r[30], r[31], r[32]], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
constraint jacop_list_diff2([t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14], t[15], t[16], t[33], t[34], t[35], t[36], t[37], t[38], t[39], t[40], t[41], t[42], t[43], t[44], t[45], t[46], t[47], t[48]], [r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10], r[11], r[12], r[13], r[14], r[15], r[16], r[33], r[34], r[35], r[36], r[37], r[38], r[39], r[40], r[41], r[42], r[43], r[44], r[45], r[46], r[47], r[48]], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
constraint jacop_maximum(end, [INT____1, INT____2, INT____3, INT____4, INT____5, INT____6, INT____7, INT____8]);
solve :: seq_search([int_search(t, smallest, indomain_min, complete), int_search(r, input_order, indomain_min, complete)]) minimize end;
