predicate jacop_alldiff(array [int] of var int: x);
predicate jacop_alldistinct(array [int] of var int: x);
predicate jacop_among(array [int] of var int: x, set of int: v, var int: n);
predicate jacop_among_var(array [int] of var int: x, array [int] of var int: v, var int: n);
predicate jacop_assignment(array [int] of var int: f, array [int] of var int: invf, int: index_f, int: index_invf);
predicate jacop_circuit(array [int] of var int: x);
predicate jacop_count(array [int] of var int: x, int: y, var int: c);
predicate jacop_cumulative(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate jacop_diff2(array [int] of var int: rects);
predicate jacop_gcc(array [int] of var int: x, array [int] of var int: c, int: index);
predicate jacop_knapsack(array [int] of int: w, array [int] of int: p, var int: W, var int: P, array [int] of var int: x);
predicate jacop_list_diff2(array [int] of var int: x, array [int] of var int: y, array [int] of var int: lx, array [int] of var int: ly);
predicate jacop_maximum(var int: m, array [int] of var int: x);
predicate jacop_minimum(var int: m, array [int] of var int: x);
predicate jacop_nvalue(var int: n, array [int] of var int: x);
predicate jacop_regular(array [int] of var int: x, int: Q, int: S, array [int] of int: d, int: q0, set of int: F, int: min_index);
predicate jacop_stretch(array [int] of int: values, array [int] of int: min_v, array [int] of int: max_v, array [int] of var int: x);
predicate jacop_table_bool(array [int] of var bool: x, array [int] of bool: t);
predicate jacop_table_int(array [int] of var int: x, array [int] of int: t);
var 81..96: INT____10 :: is_defined_var :: var_is_introduced;
var 97..112: INT____12 :: is_defined_var :: var_is_introduced;
var 113..128: INT____14 :: is_defined_var :: var_is_introduced;
var 129..144: INT____16 :: is_defined_var :: var_is_introduced;
var 145..160: INT____18 :: is_defined_var :: var_is_introduced;
var 17..32: INT____2 :: is_defined_var :: var_is_introduced;
var 161..176: INT____20 :: is_defined_var :: var_is_introduced;
var 177..192: INT____22 :: is_defined_var :: var_is_introduced;
var 193..208: INT____24 :: is_defined_var :: var_is_introduced;
var 209..224: INT____26 :: is_defined_var :: var_is_introduced;
var 225..240: INT____28 :: is_defined_var :: var_is_introduced;
var 241..256: INT____30 :: is_defined_var :: var_is_introduced;
var int: INT____32 :: is_defined_var :: var_is_introduced;
var 33..48: INT____4 :: is_defined_var :: var_is_introduced;
var 49..64: INT____6 :: is_defined_var :: var_is_introduced;
var 65..80: INT____8 :: is_defined_var :: var_is_introduced;
array [1..16] of var int: d;
var 0..2789: INT____9 :: var_is_introduced = d[5];
var 0..2789: INT____7 :: var_is_introduced = d[4];
var 0..2789: INT____5 :: var_is_introduced = d[3];
var 0..2789: INT____31 :: var_is_introduced = d[16];
var 0..2789: INT____3 :: var_is_introduced = d[2];
var 0..2789: INT____29 :: var_is_introduced = d[15];
var 0..2789: INT____27 :: var_is_introduced = d[14];
var 0..2789: INT____25 :: var_is_introduced = d[13];
var 0..2789: INT____23 :: var_is_introduced = d[12];
var 0..2789: INT____21 :: var_is_introduced = d[11];
var 0..2789: INT____19 :: var_is_introduced = d[10];
var 0..2789: INT____17 :: var_is_introduced = d[9];
var 0..2789: INT____15 :: var_is_introduced = d[8];
var 0..2789: INT____13 :: var_is_introduced = d[7];
var 0..2789: INT____11 :: var_is_introduced = d[6];
var 0..2789: INT____1 :: var_is_introduced = d[1];
var int: distance :: output_var = INT____32;
array [1..256] of int: distances = [0, 509, 501, 312, 1019, 736, 656, 60, 1039, 726, 2314, 479, 448, 479, 619, 150, 509, 0, 126, 474, 1526, 1226, 1133, 532, 1449, 1122, 2789, 958, 941, 978, 1127, 542, 501, 126, 0, 541, 1516, 1184, 1084, 536, 1371, 1045, 2728, 913, 904, 946, 1115, 499, 312, 474, 541, 0, 1157, 980, 919, 271, 1333, 1029, 2553, 751, 704, 720, 783, 455, 1019, 1526, 1516, 1157, 0, 478, 583, 996, 858, 855, 1504, 677, 651, 600, 401, 1033, 736, 1226, 1184, 980, 478, 0, 115, 740, 470, 379, 1581, 271, 289, 261, 308, 687, 656, 1133, 1084, 919, 583, 115, 0, 667, 455, 288, 1661, 177, 216, 207, 343, 592, 60, 532, 536, 271, 996, 740, 667, 0, 1066, 759, 2320, 493, 454, 479, 598, 206, 1039, 1449, 1371, 1333, 858, 470, 455, 1066, 0, 328, 1387, 591, 650, 656, 776, 933, 726, 1122, 1045, 1029, 855, 379, 288, 759, 328, 0, 1697, 333, 400, 427, 622, 610, 2314, 2789, 2728, 2553, 1504, 1581, 1661, 2320, 1387, 1697, 0, 1838, 1868, 1841, 1789, 2248, 479, 958, 913, 751, 677, 271, 177, 493, 591, 333, 1838, 0, 68, 105, 336, 417, 448, 941, 904, 704, 651, 289, 216, 454, 650, 400, 1868, 68, 0, 52, 287, 406, 479, 978, 946, 720, 600, 261, 207, 479, 656, 427, 1841, 105, 52, 0, 237, 449, 619, 1127, 1115, 783, 401, 308, 343, 598, 776, 622, 1789, 336, 287, 237, 0, 636, 150, 542, 499, 455, 1033, 687, 592, 206, 933, 610, 2248, 417, 406, 449, 636, 0];
array [1..16] of var 1..16: x :: output_array([1..16]);
constraint array_int_element(INT____10, distances, INT____11);
constraint array_int_element(INT____12, distances, INT____13);
constraint array_int_element(INT____14, distances, INT____15);
constraint array_int_element(INT____16, distances, INT____17);
constraint array_int_element(INT____18, distances, INT____19);
constraint array_int_element(INT____2, distances, INT____3);
constraint array_int_element(INT____20, distances, INT____21);
constraint array_int_element(INT____22, distances, INT____23);
constraint array_int_element(INT____24, distances, INT____25);
constraint array_int_element(INT____26, distances, INT____27);
constraint array_int_element(INT____28, distances, INT____29);
constraint array_int_element(INT____30, distances, INT____31);
constraint array_int_element(INT____4, distances, INT____5);
constraint array_int_element(INT____6, distances, INT____7);
constraint array_int_element(INT____8, distances, INT____9);
constraint array_int_element(x[1], distances, INT____1);
constraint int_lin_eq([-1, 1], [INT____10, x[6]], -80) :: defines_var(INT____10) :: domain;
constraint int_lin_eq([-1, 1], [INT____12, x[7]], -96) :: defines_var(INT____12) :: domain;
constraint int_lin_eq([-1, 1], [INT____14, x[8]], -112) :: defines_var(INT____14) :: domain;
constraint int_lin_eq([-1, 1], [INT____16, x[9]], -128) :: defines_var(INT____16) :: domain;
constraint int_lin_eq([-1, 1], [INT____18, x[10]], -144) :: defines_var(INT____18) :: domain;
constraint int_lin_eq([-1, 1], [INT____2, x[2]], -16) :: defines_var(INT____2) :: domain;
constraint int_lin_eq([-1, 1], [INT____20, x[11]], -160) :: defines_var(INT____20) :: domain;
constraint int_lin_eq([-1, 1], [INT____22, x[12]], -176) :: defines_var(INT____22) :: domain;
constraint int_lin_eq([-1, 1], [INT____24, x[13]], -192) :: defines_var(INT____24) :: domain;
constraint int_lin_eq([-1, 1], [INT____26, x[14]], -208) :: defines_var(INT____26) :: domain;
constraint int_lin_eq([-1, 1], [INT____28, x[15]], -224) :: defines_var(INT____28) :: domain;
constraint int_lin_eq([-1, 1], [INT____30, x[16]], -240) :: defines_var(INT____30) :: domain;
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____32, d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10], d[11], d[12], d[13], d[14], d[15], d[16]], 0) :: defines_var(INT____32);
constraint int_lin_eq([-1, 1], [INT____4, x[3]], -32) :: defines_var(INT____4) :: domain;
constraint int_lin_eq([-1, 1], [INT____6, x[4]], -48) :: defines_var(INT____6) :: domain;
constraint int_lin_eq([-1, 1], [INT____8, x[5]], -64) :: defines_var(INT____8) :: domain;
constraint jacop_circuit(x);
solve :: int_search(d, max_regret, indomain_min, complete) minimize INT____32;
