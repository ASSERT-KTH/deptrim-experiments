predicate jacop_diff2(array [int] of var int: rects);
predicate jacop_list_diff2(array [int] of var int: x, array [int] of var int: y, array [int] of var int: lx, array [int] of var int: ly);
array [1..21] of int: squars = [2, 4, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 24, 25, 27, 29, 33, 35, 37, 42, 50];
array [1..21] of var 0..112: x :: output_array([1..21]);
array [1..21] of var 0..112: y :: output_array([1..21]);
constraint int_le(x[1], 110);
constraint int_le(x[2], 108);
constraint int_le(x[3], 106);
constraint int_le(x[4], 105);
constraint int_le(x[5], 104);
constraint int_le(x[6], 103);
constraint int_le(x[7], 101);
constraint int_le(x[8], 97);
constraint int_le(x[9], 96);
constraint int_le(x[10], 95);
constraint int_le(x[11], 94);
constraint int_le(x[12], 93);
constraint int_le(x[13], 88);
constraint int_le(x[14], 87);
constraint int_le(x[15], 85);
constraint int_le(x[16], 83);
constraint int_le(x[17], 79);
constraint int_le(x[18], 77);
constraint int_le(x[19], 75);
constraint int_le(x[20], 70);
constraint int_le(x[21], 62);
constraint int_le(y[1], 110);
constraint int_le(y[2], 108);
constraint int_le(y[3], 106);
constraint int_le(y[4], 105);
constraint int_le(y[5], 104);
constraint int_le(y[6], 103);
constraint int_le(y[7], 101);
constraint int_le(y[8], 97);
constraint int_le(y[9], 96);
constraint int_le(y[10], 95);
constraint int_le(y[11], 94);
constraint int_le(y[12], 93);
constraint int_le(y[13], 88);
constraint int_le(y[14], 87);
constraint int_le(y[15], 85);
constraint int_le(y[16], 83);
constraint int_le(y[17], 79);
constraint int_le(y[18], 77);
constraint int_le(y[19], 75);
constraint int_le(y[20], 70);
constraint int_le(y[21], 62);
constraint jacop_list_diff2(x, y, squars, squars);
solve :: seq_search([int_search(x, smallest, indomain_min, complete), int_search(y, smallest, indomain_min, complete)]) satisfy;
