var bool: BOOL____1 :: is_defined_var :: var_is_introduced;
var bool: BOOL____10 :: is_defined_var :: var_is_introduced;
var bool: BOOL____11 :: is_defined_var :: var_is_introduced;
var bool: BOOL____12 :: is_defined_var :: var_is_introduced;
var bool: BOOL____13 :: is_defined_var :: var_is_introduced;
var bool: BOOL____14 :: is_defined_var :: var_is_introduced;
var bool: BOOL____15 :: is_defined_var :: var_is_introduced;
var bool: BOOL____16 :: is_defined_var :: var_is_introduced;
var bool: BOOL____17 :: is_defined_var :: var_is_introduced;
var bool: BOOL____18 :: is_defined_var :: var_is_introduced;
var bool: BOOL____19 :: is_defined_var :: var_is_introduced;
var bool: BOOL____2 :: is_defined_var :: var_is_introduced;
var bool: BOOL____20 :: is_defined_var :: var_is_introduced;
var bool: BOOL____21 :: is_defined_var :: var_is_introduced;
var bool: BOOL____3 :: is_defined_var :: var_is_introduced;
var bool: BOOL____4 :: is_defined_var :: var_is_introduced;
var bool: BOOL____5 :: is_defined_var :: var_is_introduced;
var bool: BOOL____6 :: is_defined_var :: var_is_introduced;
var bool: BOOL____7 :: is_defined_var :: var_is_introduced;
var bool: BOOL____8 :: is_defined_var :: var_is_introduced;
var bool: BOOL____9 :: is_defined_var :: var_is_introduced;
var bool: a :: output_var;
var bool: b :: output_var;
var bool: c :: output_var;
var bool: carry :: output_var;
var bool: nca;
array [1..4] of var bool: q;
var bool: summa :: output_var;
array [1..6] of var bool: t;
constraint bool_eq_reif(a, false, BOOL____1) :: defines_var(BOOL____1);
constraint bool_eq_reif(q[3], false, BOOL____10) :: defines_var(BOOL____10);
constraint bool_eq_reif(q[4], false, BOOL____11) :: defines_var(BOOL____11);
constraint bool_eq_reif(t[1], t[5], BOOL____12) :: defines_var(BOOL____12);
constraint bool_eq_reif(t[1], t[2], BOOL____13) :: defines_var(BOOL____13);
constraint bool_eq_reif(t[5], t[2], BOOL____14) :: defines_var(BOOL____14);
constraint bool_eq_reif(t[2], false, BOOL____15) :: defines_var(BOOL____15);
constraint bool_eq_reif(t[2], t[3], BOOL____16) :: defines_var(BOOL____16);
constraint bool_eq_reif(t[2], t[6], BOOL____17) :: defines_var(BOOL____17);
constraint bool_eq_reif(summa, false, BOOL____18) :: defines_var(BOOL____18);
constraint bool_eq_reif(t[3], t[6], BOOL____19) :: defines_var(BOOL____19);
constraint bool_eq_reif(b, false, BOOL____2) :: defines_var(BOOL____2);
constraint bool_eq_reif(t[3], false, BOOL____20) :: defines_var(BOOL____20);
constraint bool_eq_reif(t[6], false, BOOL____21) :: defines_var(BOOL____21);
constraint bool_eq_reif(c, false, BOOL____3) :: defines_var(BOOL____3);
constraint bool_eq_reif(q[1], nca, BOOL____4) :: defines_var(BOOL____4);
constraint bool_eq_reif(q[2], nca, BOOL____5) :: defines_var(BOOL____5);
constraint bool_eq_reif(nca, false, BOOL____6) :: defines_var(BOOL____6);
constraint bool_eq_reif(nca, q[3], BOOL____7) :: defines_var(BOOL____7);
constraint bool_eq_reif(nca, q[4], BOOL____8) :: defines_var(BOOL____8);
constraint bool_eq_reif(carry, false, BOOL____9) :: defines_var(BOOL____9);
constraint bool_le(BOOL____1, BOOL____13);
constraint bool_le(BOOL____1, q[1]);
constraint bool_le(BOOL____1, q[2]);
constraint bool_le(BOOL____15, summa);
constraint bool_le(BOOL____2, BOOL____12);
constraint bool_le(BOOL____2, BOOL____5);
constraint bool_le(BOOL____2, q[1]);
constraint bool_le(BOOL____3, BOOL____4);
constraint bool_le(BOOL____3, t[5]);
constraint bool_le(BOOL____6, BOOL____14);
constraint bool_le(BOOL____6, carry);
constraint bool_le(BOOL____6, t[1]);
constraint bool_le(a, BOOL____10);
constraint bool_le(a, BOOL____11);
constraint bool_le(a, BOOL____16);
constraint bool_le(b, BOOL____10);
constraint bool_le(b, BOOL____19);
constraint bool_le(b, BOOL____8);
constraint bool_le(c, BOOL____21);
constraint bool_le(c, BOOL____7);
constraint bool_le(nca, BOOL____17);
constraint bool_le(nca, BOOL____20);
constraint bool_le(nca, BOOL____9);
constraint bool_le(t[2], BOOL____18);
solve :: bool_search([a, b, c, summa, carry], input_order, indomain_min, complete) satisfy;
