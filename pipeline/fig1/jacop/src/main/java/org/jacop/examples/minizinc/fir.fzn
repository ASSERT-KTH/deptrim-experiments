predicate jacop_diff2(array [int] of var int: rects);
predicate jacop_list_diff2(array [int] of var int: x, array [int] of var int: y, array [int] of var int: lx, array [int] of var int: ly);
predicate jacop_maximum(var int: m, array [int] of var int: x);
var 1..1000: INT____1 :: is_defined_var :: var_is_introduced;
array [1..23] of var 1..2: d = [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2];
array [1..23] of set of int: dependencies = [2..2, 3..3, 4..4, 5..5, 6..6, 7..7, 8..8, 9..9, {}, 11..11, 3..3, 13..13, 4..4, 15..15, 5..5, 17..17, 6..6, 19..19, 7..7, 21..21, 8..8, 23..23, 9..9];
var int: end :: output_var;
array [1..23] of var 1..10: r :: output_array([1..23]);
array [1..23] of var 0..1000: t :: output_array([1..23]);
array [1..15] of var 0..1000: t_add = [t[1], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[12], t[14], t[16], t[18], t[20], t[22]];
array [1..8] of var 0..1000: t_mul = [t[2], t[11], t[13], t[15], t[17], t[19], t[21], t[23]];
constraint int_le(r[1], 2);
constraint int_le(r[2], 3);
constraint int_le(r[3], 2);
constraint int_le(r[4], 2);
constraint int_le(r[5], 2);
constraint int_le(r[6], 2);
constraint int_le(r[7], 2);
constraint int_le(r[8], 2);
constraint int_le(r[9], 2);
constraint int_le(r[10], 2);
constraint int_le(r[11], 3);
constraint int_le(r[12], 2);
constraint int_le(r[13], 3);
constraint int_le(r[14], 2);
constraint int_le(r[15], 3);
constraint int_le(r[16], 2);
constraint int_le(r[17], 3);
constraint int_le(r[18], 2);
constraint int_le(r[19], 3);
constraint int_le(r[20], 2);
constraint int_le(r[21], 3);
constraint int_le(r[22], 2);
constraint int_le(r[23], 3);
constraint int_lin_eq([-1, 1], [INT____1, t[9]], -1) :: defines_var(INT____1);
constraint int_lin_le([-1, 1], [t[3], t[11]], -2);
constraint int_lin_le([-1, 1], [t[4], t[13]], -2);
constraint int_lin_le([-1, 1], [t[5], t[15]], -2);
constraint int_lin_le([-1, 1], [t[6], t[17]], -2);
constraint int_lin_le([-1, 1], [t[7], t[19]], -2);
constraint int_lin_le([-1, 1], [t[8], t[21]], -2);
constraint int_lin_le([-1, 1], [t[9], t[23]], -2);
constraint int_lin_le([1, -1], [t[1], t[2]], -1);
constraint int_lin_le([1, -1], [t[2], t[3]], -2);
constraint int_lin_le([1, -1], [t[3], t[4]], -1);
constraint int_lin_le([1, -1], [t[4], t[5]], -1);
constraint int_lin_le([1, -1], [t[5], t[6]], -1);
constraint int_lin_le([1, -1], [t[6], t[7]], -1);
constraint int_lin_le([1, -1], [t[7], t[8]], -1);
constraint int_lin_le([1, -1], [t[8], t[9]], -1);
constraint int_lin_le([1, -1], [t[10], t[11]], -1);
constraint int_lin_le([1, -1], [t[12], t[13]], -1);
constraint int_lin_le([1, -1], [t[14], t[15]], -1);
constraint int_lin_le([1, -1], [t[16], t[17]], -1);
constraint int_lin_le([1, -1], [t[18], t[19]], -1);
constraint int_lin_le([1, -1], [t[20], t[21]], -1);
constraint int_lin_le([1, -1], [t[22], t[23]], -1);
constraint jacop_list_diff2([t[2], t[11], t[13], t[15], t[17], t[19], t[21], t[23]], [r[2], r[11], r[13], r[15], r[17], r[19], r[21], r[23]], [2, 2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1]);
constraint jacop_list_diff2([t[1], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[12], t[14], t[16], t[18], t[20], t[22]], [r[1], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10], r[12], r[14], r[16], r[18], r[20], r[22]], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
constraint jacop_maximum(end, [INT____1]);
solve :: seq_search([int_search(t, smallest, indomain_min, complete), int_search(r, input_order, indomain_min, complete)]) minimize end;
