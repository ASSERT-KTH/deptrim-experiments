predicate jacop_diff2(array [int] of var int: rects);
predicate jacop_list_diff2(array [int] of var int: x, array [int] of var int: y, array [int] of var int: lx, array [int] of var int: ly);
predicate jacop_maximum(var int: m, array [int] of var int: x);
var 1..1000: INT____1 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____2 :: is_defined_var :: var_is_introduced;
var 1..1000: INT____3 :: is_defined_var :: var_is_introduced;
array [1..11] of var 1..2: d = [2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1];
array [1..11] of set of int: dependencies = [6..6, 6..6, 7..7, 8..8, 9..9, 10..10, 11..11, {}, {}, 11..11, {}];
var int: end :: output_var;
array [1..11] of var 1..10: r :: output_array([1..11]);
array [1..11] of var 0..1000: t :: output_array([1..11]);
array [1..5] of var 0..1000: t_add = [t[5], t[8], t[9], t[10], t[11]];
array [1..6] of var 0..1000: t_mul = [t[1], t[2], t[3], t[4], t[6], t[7]];
constraint int_le(r[1], 3);
constraint int_le(r[2], 3);
constraint int_le(r[3], 3);
constraint int_le(r[4], 3);
constraint int_le(r[5], 2);
constraint int_le(r[6], 3);
constraint int_le(r[7], 3);
constraint int_le(r[8], 2);
constraint int_le(r[9], 2);
constraint int_le(r[10], 2);
constraint int_le(r[11], 2);
constraint int_lin_eq([-1, 1], [INT____1, t[8]], -1) :: defines_var(INT____1);
constraint int_lin_eq([-1, 1], [INT____2, t[9]], -1) :: defines_var(INT____2);
constraint int_lin_eq([-1, 1], [INT____3, t[11]], -1) :: defines_var(INT____3);
constraint int_lin_le([1, -1], [t[1], t[6]], -2);
constraint int_lin_le([1, -1], [t[2], t[6]], -2);
constraint int_lin_le([1, -1], [t[3], t[7]], -2);
constraint int_lin_le([1, -1], [t[4], t[8]], -2);
constraint int_lin_le([1, -1], [t[5], t[9]], -1);
constraint int_lin_le([1, -1], [t[6], t[10]], -2);
constraint int_lin_le([1, -1], [t[7], t[11]], -2);
constraint int_lin_le([1, -1], [t[10], t[11]], -1);
constraint jacop_list_diff2([t[5], t[8], t[9], t[10], t[11]], [r[5], r[8], r[9], r[10], r[11]], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]);
constraint jacop_list_diff2([t[1], t[2], t[3], t[4], t[6], t[7]], [r[1], r[2], r[3], r[4], r[6], r[7]], [2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1]);
constraint jacop_maximum(end, [INT____1, INT____2, INT____3]);
solve :: seq_search([int_search(t, smallest, indomain_min, complete), int_search(r, input_order, indomain_min, complete)]) minimize end;
