predicate jacop_alldiff(array [int] of var int: x);
predicate jacop_among(array [int] of var int: x, set of int: v, var int: n);
predicate jacop_assignment(array [int] of var int: f, array [int] of var int: invf, int: index_f, int: index_invf);
predicate jacop_bin_packing(array [int] of var int: bin, array [int] of var int: cap, array [int] of int: w);
predicate jacop_count(array [int] of var int: x, int: y, var int: c);
predicate jacop_cumulative(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate jacop_diff2(array [int] of var int: rects);
predicate jacop_disjoint(var set of int: s1, var set of int: s2);
predicate jacop_gcc(array [int] of var int: x, array [int] of var int: c, int: index);
predicate jacop_global_cardinality_closed(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate jacop_global_cardinality_low_up_closed(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound);
predicate jacop_lex_less_int(array [int] of var int: x, array [int] of var int: y);
predicate jacop_lex_lesseq_int(array [int] of var int: x, array [int] of var int: y);
predicate jacop_list_diff2(array [int] of var int: x, array [int] of var int: y, array [int] of var int: lx, array [int] of var int: ly);
predicate jacop_maximum(var int: m, array [int] of var int: x);
predicate jacop_minimum(var int: m, array [int] of var int: x);
predicate jacop_nvalue(var int: n, array [int] of var int: x);
predicate jacop_regular(array [int] of var int: x, int: Q, int: S, array [int] of int: d, int: q0, set of int: F, int: min_index);
predicate jacop_table_bool(array [int] of var bool: x, array [int] of bool: t);
predicate jacop_table_int(array [int] of var int: x, array [int] of int: t);
array [1..50] of int: w = [99, 98, 95, 95, 95, 94, 94, 91, 88, 87, 86, 85, 76, 74, 73, 71, 68, 60, 55, 54, 51, 45, 42, 40, 39, 39, 36, 34, 33, 32, 32, 31, 31, 30, 29, 26, 26, 23, 21, 21, 21, 19, 18, 18, 16, 15, 5, 5, 4, 1];
array [1..50] of var 1..50: b :: output_array([1..50]);
array [1..50] of var 0..100: cap____1;
var 1..50: max_bin :: output_var;
constraint jacop_bin_packing(b, cap____1, w);
constraint jacop_maximum(max_bin, b);
solve  :: int_search(b, input_order, indomain_min, complete) minimize max_bin;
